#AWS             : https://www.youtube.com/watch?v=a9__D53WsUs
                   https://aws.amazon.com/what-is-aws/

#CLOUD COMPUTING : https://www.youtube.com/watch?v=dH0yz-Osy54
                   https://aws.amazon.com/what-is-cloud-computing/

** Watch the above video and read the article  to continue.

CLOUD INTRO :
===============
  # CLOUD
    It provides us means by which we can access the applications as utilities over the internet.
    It allows us to create, configure, and customize the business applications online
    It provides services over public and private networks/Internet, i.e., WAN, LAN or VPN.

  # CLOUD COMPUTING
    Refers to manipulating, configuring, and accessing the hardware and software resources remotely.
    It offers online data storage, infrastructure, and application.
    It offers platform independency, as the software is not required to be installed locally on the PC.
    Hence, the Cloud Computing is making our business applications mobile and collaborative.

DEFINITION :
----------------
Cloud computing is the on-demand delivery of IT resources over a public or private Internet with pay-as-you-go pricing. Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider like Amazon Web Services (AWS).
Also refers to manipulating, configuring, and accessing the hardware and software resources remotely without actually installing any software locally on a PC , providing a platform independency . We can access through a WEB BROWSER or a CLI and also API's and SDK's.
Organizations of every type, size, and industry are using the cloud for a wide variety of use cases, such as data backup, disaster recovery, email, virtual desktops, software development and testing, big data analytics, and customer-facing web applications.
For example, healthcare companies are using the cloud to develop more personalized treatments for patients. Financial services companies are using the cloud to power real-time fraud detection and prevention. And video game makers are using the cloud to deliver online games to millions of players around the world.

Advantages of Cloud Computing include:  (IMPORTANT)
-------------------------------------------------------

1- Trade capital for variable expense:
   Instead of having to invest heavily in data centers and servers before you know how you’re going to use them, you can only pay when you consume computing resources, and only pay for how much you consume.
   By using AWS, infrastructure costs are converted to a pay-as-you-go model, where customers are charged for the resources that they consume, and those costs are incurred as operating costs instead of as capital expenditures.

2- Benefit from massive economies of scale:
   By using cloud computing, you can achieve a lower variable cost than you can get on your own.
   Because usage from hundreds of thousands of customers are aggregated in the cloud, providers such as Amazon Web Services can achieve higher economies of scale which translates into lower pay as you go.

3- Stop guessing capacity:
   Eliminate guessing on your infrastructure capacity needs.
   When you make a capacity decision prior to deploying an application, you often either end up sitting on expensive idle resources or dealing with limited capacity.
   With cloud computing, these problems go away. You can access as much or as little as you need, and scale up and down as required with only a few minutes notice.

4- Increase speed and agility:
   In a cloud computing environment, new IT resources are only ever a click away, which means you reduce the time it takes to make those resources available to your developers from weeks to just minutes.
   This results in a dramatic increase in agility for the organization, since the cost and time it takes to experiment and develop is significantly lower.

5- Stop spending money on running and maintaining data centers:
   Focus on projects that differentiate your business, not the infrastructure.
   Cloud computing lets you focus on your own customers, rather than on the heavy lifting of racking, stacking and powering servers.

6- Go global in minutes:
   Easily deploy your application in multiple regions around the world with just a few clicks.
   This means you can provide a lower latency and better experience for your customers simply and at minimal cost.


  SOME MORE BENIFITS OF CLOUD COMPUTING : // ACDE
  -------------------------------
  1. AGILITY :
     The cloud gives you easy access to a broad range of technologies so that you can innovate faster and build nearly anything that you can imagine.
     You can quickly spin up resources as you need them–from infrastructure services, such as compute, storage, and databases, to Internet of Things, machine learning, data lakes and analytics, and much more.
     You can deploy technology services in a matter of minutes which gives you the freedom to experiment, test new ideas to differentiate customer experiences, and transform your business.

  2. ELASTICITY :
     With cloud computing, you don’t have to over-provision resources up front to handle peak levels of business activity in the future.
     Instead, you provision the amount of resources that you actually need.
     You can scale these resources up or down to instantly grow and shrink capacity as your business needs change.

  3. COST SAVINGS :
     The cloud allows you to trade capital expenses (such as data centers and physical servers) for variable expenses, and only pay for IT as you consume it.
     Plus, the variable expenses are much lower than what you would pay to do it yourself because of the economies of scale.

  4. DEPLOY GLOBALLY IN MINUTES :
     With the cloud, you can expand to new geographic regions and deploy globally in minutes.
     For example, AWS has infrastructure all over the world, so you can deploy your application in multiple physical locations with just a few clicks.
     Putting applications in closer proximity to end users reduces latency and improves their experience.

  CLASSIFICATION OF CLOUD  :
---------------------------------

    --> DEPLOYMENT MODELS
        Deployment models define the type of access to the cloud, i.e., how the cloud is located?
        Cloud can have any of the four types of access: PUBLIC, PRIVATE, HYBRID, COMMUNITY.

    --> SERVICE MODELS
        Cloud computing is based on service models : IAAS , PAAS , SAAS.


PUBLIC CLOUD    : Allows systems and services to be easily accessible to the general public.
  (BUS)           Public cloud may be less secure because of its openness. -> CHEAP & LESS SECURE & LOCATION INDEPENDENCE

PRIVATE CLOUD   : Allows systems and services to be accessible within an organization.
  (BIKE)          It is more secured because of its private nature. -> RELIABLE & MORE EFFICIENT & HIGHLY SECURE

HYBRID CLOUD    : Is a mixture of public and private cloud.
  (CAB)           critical activities are performed using private cloud while the non-critical activities are performed using public cloud.

COMMUNITY CLOUD : Allows systems and services to be accessible by a group of organizations.

// IAAS - PAAS - SAAS are the only three basic cloud computing models and they come under AWS.
// NAAS - NETWORK AS A SERVICE is a part of IAAS and is not the basic service in AWS.
// Other Services are part of the basic IAAS, PAAS, SAAS and hence do not come under the basic services.

IaaS : Infrastructure-as-a-service provides access to fundamental resources such as:
       IaaS businesses offer services such as pay-as-you-go storage, networking, and virtualization.
       IaaS gives users cloud-based alternatives to on-premise infrastructure, so businesses can avoid investing in expensive on-site resources.
       physical machines, virtual machines, virtual storage, VLAN's, Load balancers, IP addresses  etc.

       IaaS gives you the highest level of flexibility and management control over your IT resources.
       It is most similar to the existing IT resources with which many IT departments and developers are familiar.

PaaS : Platform-as-a-Service provides the runtime environment for applications, development and deployment tools, etc
       PaaS is primarily used by developers who are building software or applications.
       It also offers development and deployment tools required to develop applications.
       PaaS provides built-in security, scalability, and web service interfaces.

       PaaS removes the need for you to manage underlying infrastructure (usually hardware and operating systems), and allows you to focus on the deployment and management of your applications.
       This helps you be more efficient as you don’t need to worry about resource procurement, capacity planning, software maintenance, patching, or any of the other undifferentiated heavy lifting involved in running your application.

SaaS : Software-as-a-Service model allows to use software applications as a service to end-users.
       It refers to a software that is deployed on a host service and is accessible via Internet
       Advantage -> maintained by vendor & upgrades done automatically also not needed to install apps (drive/maps etc)
       Ex : Billing systems , HR Solutions , Help Desk applications.

       SaaS provides you with a complete product that is run and managed by the service provider.
       In most cases, people referring to SaaS are referring to end-user applications (such as web-based email).
       With a SaaS offering, you don’t have to think about how the service is maintained or how the underlying infrastructure is managed.
       You only need to think about how you will use that particular software.


ID-AAS : Identity-as-a-Service -> Single Sign On Server to give users unique credentials and delete when he resigns.
         To solve the problem of using different username and password combinations for different servers, companies now employ Single Sign-On software, which allows the user to login only one time and manage the access to other systems.
         SSO has single authentication server, managing multiple accesses to other systems,

XAAS   : Anything-as-a-Service is yet another service model, which includes :
         Network-as-a-Service, Business-as-a-Service, Identity-as-a-Service, Database-as-a-Service or Strategy-as-a-Service.

    ### Each of the service models inherit the security and management mechanism from the underlying model ###

                                      ----------------------------------               ==
                                    |        CLOUD CLIENTS              |                 | --> FRONT END
                                    |    Web-Browser    Mobile etc;     |                 |
                                      ----------------------------------               ==
                                                    ^   ^
                                          INTERNET  |   |  INTERNET
                                                    v   v
                            -------------------------------------------------------    ==
  (Applications)           |   SAAS : CRM - Email - Games - Virtual Desktop etc;   |      |
                            -------------------------------------------------------       |
                                                      ||                                  |
                            -------------------------------------------------------       |
  (Security , Management)  |   PAAS : Database - Web Server - Deployment Tools ;   |      | --> BACK END
                            -------------------------------------------------------       |
                                                      ||                                  |
                            -------------------------------------------------------       |
  (Services)               |   IAAS : Compute  Machines - Servers - Storage - N/W  |      |
  (Most Basic Service)      -------------------------------------------------------    ==

BAAS = SAAS + Business Processing (Accounting - Auditing)
SAAS = PAAS + USER APPS (Gmail  - Drive - O365 - Maps)       -----> EVERYONE         - G-Drive, G-Maps, G-Mail, Sales Force
PAAS = IAAS + APPLICATIONS (Apache - Python - Node JS)       -----> DEVELOPERS       - AWS Bean Stalk
IAAS = H/W ( CPU - RAM - ROM ) + OS (LINUX - WINDOWS)        -----> ADMINISTARTORS   - AWS EC2, Google Compute Engine GCE


  ----  ----------- ------- ---------- ---------------- --------------  ------- ------- -----------
| DATA  APPLICATION RUNTIME MIDDLEWARE OPERATING_SYSTEM VIRTUALIZATION  SERVERS STORAGE NETWORKING |
  ----  ----------- ------- ---------- ---------------- --------------  ------- ------- -----------
  |___| |_________________________________________________________________________________________|
    1                                     SAAS                                       2
  |_______________| |_____________________________________________________________________________|         1 = Customer Managed Services
    1                                     PAAS                                       2                      2 = Cloud Vendor Managed
  |____________________________________________________| |________________________________________|
    1                                     IAAS                                       2
  |_______________________________________________________________________________________________|
    1                                     ON-ON_PREMISIS


ADVANTAGES OF CLOUD :
=======================
One can access applications as utilities, over the Internet.
One can manipulate and access and configure the applications online at any time without any software installation.
Cloud Computing offers online development and deployment tools, programming runtime environment through PaaS model.
Cloud resources are available over the network in a manner that provide platform independent access to any type of clients.
Cloud Computing offers on-demand self-service. The resources can be used without interaction with cloud service provider.
Cloud Computing is highly cost effective because it operates at high efficiency with optimum utilization. It just requires an Internet connection
Cloud Computing offers load balancing that makes it more reliable.

Pay for what we use , cost efficient and load balancing.
No need of experts to maintain h/w and s/w on premises.
Better security and disaster recovery using replication.
Automatic software updates by vendor for host machines.

VIRTUALIZATION :
==================
A technique, which allows to share single physical instance of an application or resource among multiple organizations or tenants (customers).
It does this by assigning a logical name to a physical resource and providing a pointer to that physical resource when demanded.

    APPLICATION virtualization : A single m/c hosts one or more applications delivered to one or more users via internet.
    HARDWARE virtualization    : A physical m/c hosting multiple virtual machines .
    SERVER virtualization      : Used by IAAS .
                                               Virtual Machine - 1 = (Applications + OS)
N/W  &  storage --> Virtual Infrastructure --> Virtual Machine - 2 = (Applications + OS)
(MAIN MACHINE)                                 Virtual Machine - 3 = (Applications + OS)

HOST MACHINE :
===============
The host machine is the physical hardware upon which the virtualization takes place.
This machine runs the virtualization software that allows virtual machines to exist.
Its physical components such as memory, storage, and processor ultimately handle the needs of the virtual machines.
These resources are typically hidden or masked from the guest machines.

GUEST MACHINE (virtual machine):
================
Virtual machines created from a host machine are called guest machines.
These are supervised by HYPERVISORS .
It emulates, or simulates, a single piece of physical hardware such as a desktop computer or server.
However, everything is passed through the hypervisor, which makes the actual requests to the real hardware.

HYPERVISOR : (Type-1 and Type-2)
==============
It's a software that exists to run, create and manage the virtual machines. It acts as a Virtual Machine Manager (VMM)
VMM, is software that creates and runs virtual machines (VMs).
A hypervisor allows one host computer to support multiple guest VMs by virtually sharing its resources, such as memory and processing.
The hypervisor manages the virtualization technique and creates, runs, and monitors multiple virtual machines (guest) simultaneously, on single computer hardware (host).
So, hypervisors regulate the virtualization process, creates multiple virtual machines that allow you to work on several computing instances at once.
Hypervisors create, start, stop, and reset multiple VMs while virtually sharing its resources like RAM and Network interface controller.
VMM governs the guest operating systems and manages execution on a virtual operating platform. It furthermore separates Virtual Machines (VMs) from each other logically, so even if one OS crashes for some reason, the other VMs can function unhindered.

// If one HOST goes down , we can directly move virtual machines on to a different HYPERVISOR without effecting anything.

TYPE-1 : Bare Metal Hypervisor - Hardware virtualization
TYPE-2 : Hosted Hypervisor     - OS virtualization

    Type-1, or bare-metal hypervisors, are installed directly onto the physical hardware.
    So a VM must contain their own operating systems for booting, running the hardware, and connecting to the network.
    Because bare-metal hypervisors are isolated from the attack-prone operating system, they are extremely secure.
    Less attack prone as there is no HOST OS involved .
    Popular Type-1 hypervisors include Microsoft Hyper-V and VMware ESXi.

    Type-2, or hosted hypervisors, run on an operating system that is directly installed on the hardware.
    In this case, a copy of Windows, or a Unix-based system must be installed to boot the system and access the hardware.
    Once the operating system is running, the hosted hypervisor can launch.
    High attack prone -> If HOST OS gets attacked , all VM's gets attacked.
    Type-2 hypervisors are often used to run multiple operating systems on a single machine, rather than to emulate numerous running systems on the hardware.
    Popular Type-2 hypervisors include VMware Workstation, VirtualBox

                       Virtual Machine - 1          Virtual Machine - 2         Virtual Machine - 3
                            -------------              -------------             -------------
                           |   APP - 1   |            |   APP - 3   |           |   APP - 5   |
                           |   APP - 2   |            |   APP - 4   |           |   APP - 6   |
                           |   . . .     |            |   . . .     |           |   . . .     |
                            -------------              -------------             -------------
                            -------------              -------------             -------------
                           | Binaries    |            | Binaries    |           | Binaries    |
                           | Libraries   |            | Libraries   |           | Libraries   |
                           |             |            |             |           |             |
                            -------------              -------------             -------------
                            -------------              -------------             -------------
                           |             |            |             |           |             |
                           | GUEST - OS  |            | GUEST - OS  |           | GUEST - OS  |
                           |             |            |             |           |             |
                            -------------              -------------             -------------
                            -------------------------------------------------------------------
                           |                       H Y P E R V I S O R                         | -> Virtual Machine Manager - VMM
                            -------------------------------------------------------------------
                    ------------------------------------------------------------------------------------
                  |         -------------------------------------------------------------------          |
                  |        |                          H O S T - O S                            |         |    -> Only for Type-2 Hypervisor
                  |         -------------------------------------------------------------------          |
                    -------------------------------------------------------------------------------------
                            -------------------------------------------------------------------
                           |                         H A R D W A R E                           |
                            -------------------------------------------------------------------
                                            H  O  S  T  -  M  A  C  H  I  N  E

DIFFERENCES ->> TYPE-1 vs TYPE-2:  https://www.youtube.com/watch?v=FZR0rG3HKIk&t=28s
-----------------------------------
The primary contributor to why hypervisors are segregated into two types is because of the presence or absence of the underlying operating system.

Type 1 runs directly on the hardware with Virtual Machine resources provided.
The Type 1 hypervisor doesn't have to load an underlying OS.
With direct access to the underlying hardware and no other software -- such as OSes and device drivers -- to contend with for virtualization,
Type 1 hypervisors are regarded as the most efficient and best-performing hypervisors available for enterprise computing.
Hypervisors that run directly on physical hardware are also highly secure.
Virtualization mitigates the risk of attacks that target security flaws and vulnerabilities in OSes because each guest has its own OS.
This ensures an attack on a guest VM is logically isolated to that VM and can't spread to others running on the same hardware.
Used by cloud vendors .

Type 2 runs on the host OS to provide virtualization management and other services.
It relies on the host machine's pre existing OS to manage calls to CPU, memory, storage and network resources.
the presence of an underlying OS with Type 2 hypervisors introduces unavoidable latency;
all of the hypervisor's activities and the work of every VM has to pass through the host OS.
Also, any security flaws or vulnerabilities in the host OS could potentially compromise all of the VMs running above it.
Used where performance and security are lesser concerns.
For example, software developers might use a Type 2 hypervisor to create VMs to test a software product prior to release.
IT organizations typically use Type 2 hypervisors to create virtual desktops.

============================================================================================================
############################################################################################################
============================================================================================================

CLOUD COMPUTING :
------------------
Cloud computing is the on-demand delivery of compute power, database, storage, applications, and other IT resources through a cloud services platform via the Internet with pay-as-you-go pricing.
With cloud computing, you don’t need to make large upfront investments in hardware and spend a lot of time on the heavy lifting of managing that hardware.
Instead, you can provision exactly the right type and size of computing resources you need to power your newest bright idea or operate your IT department.
You can access as many resources as you need, almost instantly, and only pay for what you use.
With cloud computing you avoid undifferentiated work such as procurement, maintenance, and capacity planning.

cloud computing provides means by which we can access applications as utilities over the internet.
It allows us to create/configure/customize the Business online.
Since we need not install any software locally , it is platform independent.

A cloud services platform such as Amazon Web Services or Azure owns and maintains the network-connected hardware required for these application services.
while you provision and use what you need via a web application.
Advantages of Cloud Computing include:  (IMPORTANT)

1- Trade capital for variable expense:
   Instead of having to invest heavily in data centers and servers before you know how you’re going to use them, you can only pay when you consume computing resources, and only pay for how much you consume.
   By using AWS, infrastructure costs are converted to a pay-as-you-go model, where customers are charged for the resources that they consume, and those costs are incurred as operating costs instead of as capital expenditures.

2- Benefit from massive economies of scale:
   By using cloud computing, you can achieve a lower variable cost than you can get on your own.
   Because usage from hundreds of thousands of customers are aggregated in the cloud, providers such as Amazon Web Services can achieve higher economies of scale which translates into lower pay as you go prices.

3- Stop guessing capacity:
   Eliminate guessing on your infrastructure capacity needs.
   When you make a capacity decision prior to deploying an application, you often either end up sitting on expensive idle resources or dealing with limited capacity.
   With cloud computing, these problems go away. You can access as much or as little as you need, and scale up and down as required with only a few minutes notice.

4- Increase speed and agility:
   In a cloud computing environment, new IT resources are only ever a click away, which means you reduce the time it takes to make those resources available to your developers from weeks to just minutes.
   This results in a dramatic increase in agility for the organization, since the cost and time it takes to experiment and develop is significantly lower.

5- Stop spending money on running and maintaining data centers:
   Focus on projects that differentiate your business, not the infrastructure.
   Cloud computing lets you focus on your own customers, rather than on the heavy lifting of racking, stacking and powering servers.

6- Go global in minutes:
   Easily deploy your application in multiple regions around the world with just a few clicks.
   This means you can provide a lower latency and better experience for your customers simply and at minimal cost.



EX : Netflix in Aws

AMAZON WEB SERVICES  : Since 2006 -
--------------------------
Amazon Web Services is a secure cloud service offering a broad set of global cloud-based products including compute, storage, databases, analytics, networking, mobile, developer tools, management tools, IoT, security, and enterprise applications: on-demand, available in seconds, with pay-as-you-go pricing.
From data warehousing to deployment tools, directories to content delivery, over 175 AWS services are available around 190 countries .
This allows enterprises, start-ups, small and medium-sized businesses, and customers in the public sector to access the building blocks they need to respond quickly to changing business requirements.
One of the key benefits of cloud computing is the opportunity to replace upfront capital infrastructure expenses with low variable costs that scale with your business.
With the cloud, businesses no longer need to plan for and procure servers and other IT infrastructure weeks or months in advance.
Instead, they can instantly spin up hundreds or thousands of servers in minutes and deliver results faster.


FIVE PILLARS OF AWS :
=======================
1. OPERATIONAL EXCELLENCE : -> Automation
   Focuses on how you can continuously improve your ability to run systems, create better procedures, and gain insights.
   Human error is the primary cause of defects and operational incidents. The more operations that can be automated, the less chance there is for human error.
   The operational excellence pillar includes the ability to run and monitor systems to deliver business value and to continually improve supporting processes and procedures.

    Infrastructure as Code -> process of managing your infrastructure through machine-readable configuration files to automate your infrastructure -> CLOUD FORMATION

    Observability -> Observability is the process of measuring the internal state of your system.
                     This is usually done to optimize it to some desired end state.

2. SECURITY : -> Policies (IAM) , Network Security (VPC) , Encryption (KMS)
   Focuses on how to secure your infrastructure on the cloud. Security and compliance is a shared responsibility between AWS and the customer.
   The security pillar includes the ability to protect information, systems, and assets while delivering business value through risk assessments and mitigation strategies.
    AWS      -> responsible for physical infrastructure, software, and networking capabilities.
    CUSTOMER -> configuration of specific cloud services, the application software, and the management of sensitive data, client side and server side encryption.

3. RELIABILITY :
   Focuses on how you can build services that are resilient to both service and infrastructure disruptions.
   The reliability pillar includes the ability of a system to recover from infrastructure or service disruptions, dynamically acquire computing resources to meet demand, and mitigate disruptions such as  misconfigurations or transient network issues.
   Fault Isolation -> Resource and Request , Availability Zone , Region
   Limits -> Limits are constraints that can be applied to protect your services from excessive load. (SERVICE QUOTAS)

4. PERFORMANCE EFFICIENCY :
   Focuses on how you can run services efficiently and scalably in the cloud to handle any amount of traffic.
   The performance efficiency pillar includes the ability to use computing resources efficiently to meet system requirements.
   Key topics include selecting the right resource types and sizes based on workload requirements, monitoring performance, and making informed decisions to maintain efficiency as business needs evolve.

   Selection -> Ability to choose the service that most closely aligns with your workload.
                AWS has the broadest selection of services. (COMPUTE, STORAGE , DB ,N/W)
   Scaling   -> VERTICAL : say micro instance to a macro instance (increasing capacity of an instance)
                HORIZONTAL : say 10 instances to 40 instances ( increasing number of instances)

5. COST OPTIMIZATION : -> AWS Cost Explorer ,  AWS Cost & Usage Report
   The cost optimization pillar includes the ability to avoid or eliminate unneeded cost or sub-optimal resources.
   Focuses on achieving business outcomes while minimizing costs.
   OpEx is an ongoing pay-as-you-go model whereas CapEx is a one-time purchase model.


WAYS TO COMMUNICATE WITH AWS :
-------------------------------

  WEB CONSOLE                     ----
  CLI                                 |------- API --------------- AWS
  SDK for java,python etc ;           |------- API --------------- SERVICES
  Blue-Prints                     ----

  WEB CONSOLE is the actual AWS Page
  CLI is used to automate tasks similar to JENKINS . It is written in python.
  SDK is used to integrate AWS in our Applications --> SDK = API + IDE + Debugger + Tools
  Blue-Prints are used to convert services & dependencies into a real running System in AWS . --> Cloud Formation
  Everything in AWS can be controlled via API by making REST API calls using HTTPS protocols. This is inconvenient hence CLI and SDK's have evolved.


SECURITY IN AWS :
--------------------
It is provided by the below :
  --> IAM & ROLES -- Identity and Management Services
  --> MFA         -- Multi Factor Authentication
  --> KMS         -- Key Master Service
  --> STS         -- Security Token Service
  --> CLOUD TRAIL
  --> CLOUD WATCH ALARMS
  --> SNS & Email Notifications

AWS ACCEPTABLE USE POLICY :
----------------------------
This Acceptable Use Policy (this “Policy”) describes prohibited uses of the web services offered by Amazon Web Services, Inc. and its affiliates (the “Services”) and the website located at http://aws.amazon.com (the “AWS Site”).
The examples described in this Policy are not exhaustive, meaning more can be added anytime.
We may modify this Policy at any time by posting a revised version on the AWS Site.
By using the Services or accessing the AWS Site, you agree to the latest version of this Policy.
If you violate the Policy or authorize or help others to do so, we may suspend or terminate your use of the Services.

    No Illegal, Harmful, or Offensive Use or Content
    No Security Violations
    No Network Abuse
    No E-Mail or Other Message Abuse

AWS SHARED RESPONSIBILITY MODEL :
----------------------------------
Security and Compliance is a shared responsibility between AWS and the customer.
This shared model can help relieve the customer’s operational burden as AWS operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates.
The customer assumes responsibility and management of the guest operating system (including updates and security patches), other associated application software as well as the configuration of the AWS provided security group firewall.
Whereas the host operating system is software installed on a computer to interact with the hardware, the guest operating system is software installed onto and running on the virtual machine.
Customers should carefully consider the services they choose as their responsibilities vary depending on the services used, the integration of those services into their IT environment, and applicable laws and regulations.
The nature of this shared responsibility also provides the flexibility and customer control that permits the deployment.
As shown below, this differentiation of responsibility is commonly referred to as Security “of” the Cloud versus Security “in” the Cloud.

AWS      - Security of the cloud
           operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the AWS  facilities.
           This infrastructure consisting  of the hardware, software, networking, and facilities that run AWS Cloud services.

CUSTOMER - Security in the cloud
           responsibility and management of the guest operating system (including updates and security patches)
           application software and firewall configurations
           Platforms, Applications, IAM, OS, Network and Firewall configuration
           client side and server side data encryption , networking traffic encryption and its integrity

AWS & CUSTOMER or BOTH -
        Inherited Controls : Physical and Environmental controls
        Shared Controls    :
           Patch Management         – AWS is responsible for patching and fixing flaws within the infrastructure, but customers are responsible for patching their guest OS and applications.
           Configuration Management – AWS maintains the configuration of its infrastructure devices, but a customer is responsible for configuring their own guest operating systems, databases, and applications.
           Awareness & Training     - AWS trains AWS employees, but a customer must train their own employees.

AWS KNOWLEDGE CENTRE : - Q&A for AWS related queries .
-------------------------
Similar to AWS Documentation, AWS Discussion Forums, AWS Support Center.
All AWS account owners have access to account and billing support free of charge.
You can find answers to your questions quickly by visiting the AWS Knowledge Center.

REGIONS AND AVAILABILITY ZONES : https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
// open EC2 -> move to bottom -> SERVICE HEALTH & ZONE STATUS
======================================================================================================
Amazon EC2 is hosted in multiple locations world-wide.
These locations are composed of Regions, Availability Zones, Local Zones, AWS Outposts, and Wavelength Zones.

REGIONS : --> 24 In Total
-------------------------
    • An AWS Region is a physical location in the world and each Region is a separate geographic area.
      Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions.
      This achieves the greatest possible fault tolerance and stability.
      When you view your resources, you see only the resources that are tied to the Region that you specified.
      This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.

    • The resources that you create in one Region do not exist in any other Region unless you explicitly use a replication feature offered by an AWS service.
      For example, Amazon S3 and Amazon EC2 support cross-Region replication.
      Some services, such as AWS Identity and Access Management (IAM), do not have Regional resources.
      You can use policy conditions to control access to AWS services in an AWS Region.

    • If a Region is disabled by default, you must enable it before you can create and manage resources. The following Regions are disabled by default:
      --> Africa (Cape Town)
      --> Asia Pacific (Hong Kong)
      --> Europe (Milan)
      --> Middle East (Bahrain)

   • After you disable a Region, the resources in this Region are immediately unavailable.
     However, they are not deleted. You cannot disable a Region that is enabled by default.

When you enable a Region, AWS performs actions to prepare your account in that Region, such as distributing your IAM resources to the Region.
This process takes a few minutes for most accounts, but this can take several hours. You cannot use the Region until this process is complete.

--> A partition is a grouping of Regions. AWS currently has three partitions.
    •   aws         (Standard Regions)
    •   aws-cn      (China Regions)
    •   aws-us-gov  (AWS GovCloud [US] Regions).

#### Regions are completely isolated so this achieves the greatest possible fault tolerance and stability.
#### Availability Zones are connected through low latency links .
#### AWS provides you with the flexibility to place instances and store data within multiple geographic regions as well as across multiple Availability Zones within each AWS Region.

AVAILABILITY ZONES : --> 77 In Total
----------------------------------------
    • Region is divided into availability zones to isolate themselves from a disaster to other zones. These are discrete data centres.
      Availability Zones are multiple, isolated locations within each Region. Each Region has multiple, isolated locations known as Availability Zones.
      Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones.
      By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location
      An Availability Zone is represented by a Region code followed by a letter identifier; for example, us-east-1a --> AZ ID is unique for all accounts but us-east-1a might not be same for all.
      When you launch an instance, you can select an Availability Zone or let us choose one for you.
      If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
      You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone.
      we can also migrate instances to another AZ --> make an AMI --> launch an instance --> configure


LOCAL ZONES :
----------------
// AWS Local Zones are only available in Los Angeles and also available in preview in Boston, Houston, and Miami.
    • AWS Local Zones are a type of AWS infrastructure deployment that places AWS compute, storage, database, and other select services close to large population, industry, and IT centers.
      With AWS Local Zones, you can easily run applications that need single-digit millisecond latency closer to end-users in a specific geography.
      AWS Local Zones are ideal for use cases such as media & entertainment content creation, real-time gaming, live video streaming, and machine learning inference.

      Local Zones provide you the ability to place resources, such as compute and storage, in multiple locations closer to your end users.
      Local Zones have their own connections to the internet and support AWS Direct Connect, so that resources created in a Local Zone can serve local users with low-latency communications.
      A Local Zone is represented by a Region code followed by an identifier that indicates the location, for example, us-west-2-lax-1a
      We need to enable them in order to use , then create a subnet .

      A Local Zone is an extension of an AWS Region that is geographically close to your users.
      You can extend any VPC from the parent AWS Region into Local Zones by creating a new subnet and assigning it to the AWS Local Zone.
      When you create a subnet in a Local Zone, your VPC is extended to that Local Zone.
      The subnet in the Local Zone operates the same as other subnets in your VPC

      A Local Zone is represented by an AWS Region code followed by an identifier that indicates the location, for example us-west-2-lax-1a.
      Resources created in a Local Zone can serve local users with very low-latency communications.

OUTPOSTS & WAVELENGTHS :
--------------------------
    • AWS Outposts is a fully managed service that extends AWS infrastructure, services, APIs, and tools to customer premises.
      By providing local access to AWS managed infrastructure, AWS Outposts enables customers to build and run applications on premises using the same programming interfaces as in AWSRegions, while using local compute and storage resources for lower latency and local data processing needs.

    • Wavelength Zones allow developers to build applications that deliver ultra-low latencies to 5G devices and end users.
      Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks.
      A Wavelength Zone is represented by a Region code followed by an identifier that indicates the Wavelength Zone, for example, us-east-1-wl1-bos-wlz-1.

EDGE LOCATIONS : - Content Delivery Network
------------------
A site that CloudFront uses to cache copies of your content for faster delivery to users at any location.
Amazon CloudFront, Amazon Route 53, AWS Firewall Manager, AWS Shield, and AWS WAF services are offered at AWS Edge Locations.

 ---------------------------------------------------------------------------------------------------------------------------------------------------------
|
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|    |                                                                                          |      |
|    |        ------------------------------     -----------------------------      ------      |      |     -----------------------     -----------------
|    |       |       ----       ----         |  |    ----      ----           |    |            |      |    |    ----               |   |
| A  |   B   |   C  |  D1 |    | D2 | . . .  |  |   |    |    |    | . . . .  |    | . . . .    |      |    |   |     | . . . . .   |   |
|    |       |       -----      ----         |  |    ----      ----           |    |            |      |    |    -----              |   |
|    |        ------------------------------     -----------------------------      -------     |      |     ------------------------    -----------------
|    |                                                                                          |      |
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|
 ---------------------------------------------------------------------------------------------------------------------------------------------------------

          A = TOTAL AWS SPACE
          B = REGIONS
          C = AVAILABILITY ZONE
          D = EDGE LOCATIONS : Amazon CloudFront, Amazon Route 53, AWS Firewall Manager, AWS Shield, and AWS WAF services are offered at AWS Edge Locations.




SCALABILITY :
-------------------
A scalable service will automatically grow in capacity to seamlessly meet any changes in demand.
A well-designed cloud-based operation will constantly monitor the health of its application stack and respond whenever pre-set performance metrics might soon go unmet.
The response might include automatically launching new server instances to add extra compute power to your existing cluster.
But it will probably also involve prepopulating those instances with the application data and configuration settings they’ll need to actually serve your application to your clients.
A large cloud provider like AWS will, for all practical purposes, have endless available capacity so the only practical limit to the maximum size of your application is your organization’s budget

ELASTICITY :
----------------
You can stretch an elastic band far beyond its resting state.
But part of what makes it truly elastic is the fact that, when you let go of it, it immediately returns to its original size.
The reason the word elastic is used in the names of so many AWS services (Elastic Compute Cloud, Elastic Load Balancing, Elastic Beanstalk, and so on) is because those services are built to be easily and automatically resized.
Generally, you set the maximum and minimum performance levels you want for your application, and the AWS service(s) you’re using will automatically add or remove resources to meet changing usage demands.
By way of illustration, a scalable ecommerce website could be configured to function using just a single server during low-demand periods, but any number of additional servers could be automatically brought online as demand spikes.
When demand drops back down, unused servers will be shut down automatically.

SERVRLESS :
---------------
Now don’t be fooled by the name. You can’t run a compute function without a computer environment (a “server”) somewhere that’ll host it.
What “serverless” does allow is for individual developers to run their code for seconds or minutes at a time on some else’s cloud servers.
The serverless model—as provided by services like AWS Lambda—makes it possible to design code that reacts to external events.
When, for instance, a video file is uploaded to a repository (like an AWS S3 bucket or even an on-premises FTP site), it can trigger a Lambda function that will convert the file to a new video format.
There’s no need to maintain and pay for an actual instance running 24/7, just for the moments your code is actually running.
And there’s no administration overhead to worry about.

Serverless allows customers to shift more operational responsibilities to AWS.
Serverless allows customers to build and run applications and services without thinking about servers.
Serverless eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning.

Serverless computing (or serverless for short), is an execution model where the cloud provider (AWS, Azure, or Google Cloud) is responsible for executing a piece of code by dynamically allocating the resources.
And only charging for the amount of resources used to run the code.
The code is typically run inside stateless containers that can be triggered by a variety of events including http requests, database events, queuing services, monitoring alerts, file uploads, scheduled events (cron jobs), etc.
The code that is sent to the cloud provider for execution is usually in the form of a function.
Hence serverless is sometimes referred to as “Functions as a Service” or “FaaS”.

Serverless is a way to describe the services, practices, and strategies that enable you to build more agile applications so you can innovate and respond to change faster.
With serverless computing, infrastructure management tasks like capacity provisioning and patching are handled by AWS, so you can focus on only writing code that serves your customers. Serverless services like AWS Lambda come with automatic scaling, built-in high availability, and a pay-for-value billing model. Lambda is an event-driven compute service that enables you to run code in response to events from over 150 natively-integrated AWS and SaaS sources - all without managing any servers.
Move from idea to market, faster

  Lower your costs : With a pay-for-value billing model, you never pay for over-provisioning and your resource utilization is optimized on your behalf.
  Adapt at scale   : With technologies that automatically scale from zero to peak demands, you can adapt to customer needs faster than ever.
  Build better applications, easier : Serverless applications have built-in service integrations, so you can focus on building your application instead of configuring it.
  Move from idea to market, faster  : By eliminating operational overhead, your teams can release quickly, get feedback, and iterate to get to market faster.

  COMPUTE                 : LAMBDA  -  FARGATE
  APPLICATION INTEGRATION : SNS  - SQS - APPSYNC - API GATEWAY - EVENET BRIDGE - STEP FUNCTIONS
  DATA STORE              : S3 - Dynamo DB - AURORA - RDS


BORGER GATEWAY PROTOCL - BGP :  https://www.cloudflare.com/learning/security/glossary/what-is-bgp/
-----------------------------------
Border Gateway Protocol (BGP) is the postal service of the Internet.
When someone drops a letter into a mailbox, the postal service processes that piece of mail and chooses a fast, efficient route to deliver that letter to its recipient.
Similarly, when someone submits data across the Internet, BGP is responsible for looking at all of the available paths that data could travel and picking the best route, which usually means hopping between autonomous systems.
BGP is the protocol that makes the Internet work.
It does this by enabling data routing on the Internet. When a user in Singapore loads a website with origin servers in Argentina, BGP is the protocol that enables that communication to happen quickly and efficiently.

The Internet is a network of networks; it’s broken up into hundreds of thousands of smaller networks known as autonomous systems (AS). Each of these networks is essentially a large pool of routers run by a single organization.
If we continue to think of BGP as the postal service of the Internet, AS’s are like individual post office branches.
A town may have hundreds of mailboxes, but the mail in those boxes must go through the local postal branch before being routed to another destination.
The internal routers within an AS are like mailboxes, they forward their outbound transmissions to the AS, which then uses BGP routing to get these transmissions to their destinations.

    Routes may be short or large.
    Say there are 8 nodes 1,2,3,4,5,6,7,8.
    To travel from 1 -> 3 :
      PATH-1 : 1 -> 2 -> 3
      PATH-2 : 1 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3
    Initially this is not known . Slowly the route info is stored and the shorter route is used the next time the same connection is used.

The structure of the Internet is constantly changing, with new systems popping up and existing systems becoming unavailable.
Because of this, every AS must be kept up to date with information regarding new routes as well as obsolete routes.
This is done through peering sessions where each AS connects to neighbouring AS’s with a TCP/IP connection for the purpose of sharing routing information.
Using this information, each AS is equipped to properly route outbound data transmissions coming from within.

Here’s where part of our analogy falls apart: Unlike post office branches, autonomous systems are not all part of the same organization.
As such, they have no reason to be friendly to each other and are often times business competitors!
For this reason, BGP routes sometimes take business considerations into account.
Autonomous Systems often charge each other to carry traffic across their networks, and the price of access can be factored into which route is ultimately selected.

Autonomous systems typically belong to ISPs or other large high-tech organizations, such as tech companies, universities, government agencies, and scientific institutions.
Each autonomous system wishing to exchange routing information must have a registered autonomous system number (ASN).
Internet Assigned Numbers Authority (IANA) assigns ASNs to Regional Internet Registries (RIRs), which then assigns them to ISPs and networks.
ASNs are 16 bit numbers between 1 and 65534 and 32 bit numbers between 131072 and 4294967294.
As of 2018, there are approximately 64,000 ASNs in-use worldwide. These ASNs are only required for external BGP.

===============================================================================================
===============================================================================================
APPLICATION PROGRAMMING INTERFACES - API :
===============================================================================================
===============================================================================================
When you type www.facebook.com into your browser, a request goes out to Facebook’s remote server.
Once your browser receives the response, it interprets the code and displays the page.
To the browser, also known as the client, Facebook’s server is an API.
This means that every time you visit a page on the Web, you interact with some remote server’s API.
An API isn’t the same as the remote server — rather it is the part of the server that receives requests and sends responses.
To summarize, when a company offers an API to their customers, it just means that they’ve built a set of dedicated URLs that return pure data responses
    — meaning the responses won’t contain the kind of presentational overhead that you would expect in a graphical user interface like a website.

                                                                            -----
     -------                                                               |     |                    -------            ---------
    |        |        REQUEST       -----------------------                |  A  |                   |       |          (          )
    |        | <------------------>|       INTERNET        | <------------>|  P  |<----------------->|       | <------> (  PAGES   )
    |        |        RESPONSE      -----------------------                |  I  |                   |       |          (          )
     --------                                                              |     |                    -------             ---------
    WEB BROWSER                                                             -----                    WEB SERVER            DATABASE


HUMAN - HUMAN       --> Speech , text , gestures etc ;
HUMAN - COMPUTER    --> Monitor with a GUI , Mouse , Keyboard etc ;
SOFTWARE - SOFTWARE --> API - Application Programming Interface
An API is a set of programming code that enables data transmission between one software product and another. It also contains the terms of this data exchange.

Application programming interfaces consist of two components:
  --> Technical specification describing the data exchange options between solutions with the specification done in the form of a request for processing and data delivery protocols.
  --> Software interface written to the specification that represents it

Example : A Hotel room booking app must communicate with RATES API to fetch current rate for each room.
          It must talk to the MAP API to provide the user the route to the ROOM from his location .

TYPES OF API's :
-----------------
DATABASE API         : Database APIs enable communication between an application and a database management system.
                       Developers work with databases by writing queries to access data, change tables, etc.
OPERATING SYSTEM API : This group of APIs defines how applications use the resources and services of operating systems.
                       Every OS has its set of APIs, for instance, Windows API or Linux API (kernel–user space API and kernel internal API).
REMOTE API           : Remote APIs define standards of interaction for applications running on different machines.
                       In other words, one software product accesses resources located outside the device that requests them, which explains the name.
                       Since two remotely located applications are connected over a communications network, particularly the internet, most remote APIs are written based on web standards.
                       Java Database Connectivity API and Java Remote Method Invocation API are two examples of remote application programming interfaces.
WEB API              : This API class is the most common. Web APIs provide machine-readable data and functionality transfer between web-based systems which represent client-server architecture.
                       These APIs mainly deliver requests from web applications and responses from servers using Hypertext Transfer Protocol (HTTP).
                       Developers can use web APIs to extend the functionality of their apps or sites.
                       Google Maps API enables the addition of a map with an organization’s location.


======================================
STATEFUL vs STATELESS :
======================================
The state of an application (or anything else, really) is its condition or quality of being at a given moment in time--its state of being.
Whether something is stateful or stateless depends on how long the state of interaction with it is being recorded and how that information needs to be stored.

    STATELESS :
    ------------
    A stateless process or application can be understood in isolation.
    There is no stored knowledge of or reference to past transactions.
    Each transaction is made as if from scratch for the first time.
    Stateless applications provide one service or function and use content delivery network (CDN), web, or print servers to process these short-term requests.

    An example of a stateless transaction would be doing a search online to answer a question you’ve thought of.
    You type your question into a search engine and hit enter.
    If your transaction is interrupted or closed accidentally, you just start a new one.
    Think of stateless transactions as a vending machine: a single request and a response.

    STATEFUL :
    --------------
    Stateful applications and processes, however, are those that can be returned to again and again, like online banking or email.
    They’re performed with the context of previous transactions and the current transaction may be affected by what happened during previous transactions.
    For these reasons, stateful apps use the same servers each time they process a request from a user.

    If a stateful transaction is interrupted, the context and history have been stored so you can more or less pick up where you left off.
    Stateful apps track things like window location, setting preferences, and recent activity.
    You can think of stateful transactions as an ongoing periodic conversation with the same person.
    The majority of applications we use day to day are stateful, but as technology advances, microservices and containers make it easier to build and deploy applications in the cloud.

    DIFFERENCE :
    -----------------
    The difference between stateful vs. stateless is essentially whether or not an application or process stores data over time.
    Stateful applications store data, while stateless applications do not.
    These devices in stateful connections  track source and destination IP addresses, as well as protocol or port information in an active connections table, which handles statistics of a network's active connections.
    Stateful devices also inspect the packet payload to verify that the device contains the appropriate data.
    Payload inspection might monitor a TCP handshake between devices.
    Because stateful devices save the connection information, the devices can reference that data when subsequent packets pass through the same connection.
    Thus, the firewall can recognize packets that are part of existing and permitted connections, while also easily differentiating between legitimate and nonlegitimate connections.
    The saved data in the connections table continuously updates as connections form, age and expire.
    If a stateful firewall no longer sees packets passing over an established connection, after a while, that connection will time out and drop from the established connections state table.
    Additionally, if communications restarted after the connection dropped from the table, the connection would need to go through the setup process over again.


COMMUNICATION MODELS :
===========================
** Complete Info with protocols in Miscellaneous.txt in the main directory.
NOTE  : We have two Models : OSI ( Open System interconnection model ) & TCP-IP ( Transmission Control Protocol - Internet Protocol )

        OSI MODEL                  TCP/IP MODEL                              PROTOCOL
  --------------------------------------------------------------------------------------------------------------------------
        Application    |    |      Application                               HTTP - FTP - TELENET - EMAIL - PRINTING
        Presentation   v    ^          "                                     MIME - SSL - TLS
        Session        |    |          "                                     RP / RTCP
        Transport      v    ^      Transport                                 TCP / UDP / SCTP /
        Network        |    |      Internet                                  IP / ICMP / BGP / RARP / ARP
        Data Link      v    ^      Link / Network Interface                  PPP / HDLC
        Physical       |    |      Physical / Network Interface              ETHERNET
  ---------------------------------------------------------------------------------------------------------------------------

        ** CHECK REFERENE PIC - OSI Model and OSI_*

        ** The sender sends data to Application layer . This adds some header to the data and sends the package down .
           The data + Headers from the a layer is sent down to the below layer in the sender side .
           The below layer then adds extra header and sends the data to the layer still below it .
           This happens until the Physical layer . The physical layer then converts data into signals and sends the data to receiver.
           The Physical layer in receiver receives the signals and sends the data to above layer.
           The layers than deletes  the headers added in the same layer in the sender side and sends data to top layer .
           The top layer then deletes the headers added in the same layer in the sender side and sends the data to layer above it .
           This happens until data is sent until Application layer again and the receiver interprets the data .

        ** TCP - IP -> Transmission Control Protocol  - Internet Protocol  --> As a MODEL
           TCP - IP -> Transport layer protocol - Internet layer protocol  --> As a PROTOCOL
