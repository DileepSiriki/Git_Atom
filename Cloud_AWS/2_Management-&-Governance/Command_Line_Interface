AWS - COMMAND LINE INTERFACE :  https://docs.aws.amazon.com/cli/latest/reference/ --> LIST OF COMMANDS
===================================
To generate KEYS , login to that IAM / ROOT -> select account name -> select MY security credentials -> Access keys .
Access keys : A combination of an access key ID and a secret access key. You can assign two to a user at a time.
              we can generate new ones by deleting old ones.

Install the AWS-CLI - Version : 2.0
Once done open WIN -> cmd -> execute aws commands in the Windows Command Line .

$ aws configure
AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name [None]: us-west-2
Default output format [None]: json

$ aws configure list --> list configuration details from (C:\Users\DileepKumar\.aws)
The AWS CLI stores this information in a profile (a collection of settings) named default in the credentials file
~/.aws/credentials
~/.aws/config

  ACCESS KEY-ID & SECRET ACCESS KEY :
            Generated while creating a user or afterwards using SECURITY CREDENTIALS tab in USERS.

  REGIONS : US East (Ohio) 	us-east-2
            US East (N. Virginia) 	us-east-1
            US West (N. California) 	us-west-1
            US West (Oregon) 	us-west-2

  OUTPUT : json  – The output is formatted as a JSON
           yaml  – The output is formatted as a YAML
           text  – The output is formatted as multiple lines of tab-separated string values.
                   This can be useful to pass the output to a text processor, like grep, sed, or awk.
           table – The output is formatted as a table using the characters +|- to form the cell borders.
                   It typically presents the information in a "human-friendly" format that is much easier to read than the others, but not as programmatically useful.

  PROFILE : A collection of settings is called a profile. By default, the AWS CLI uses the default profile.
            You can create and use additional named profiles with varying credentials and settings by specifying the --profile option and assigning a name.

          $ aws configure --profile produser
          AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE
          AWS Secret Access Key [None]: je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY
          Default region name [None]: us-east-1
          Default output format [None]: text

          When you create using profile , the files in C:\Users\DileepKumar\.aws change as :
            cred file :     [default]
                            aws_access_key_id = AKIAXK7QGYUTLRNF7QGK
                            aws_secret_access_key = <secret-access-key> #deleted to push this page into github
                            [admin]
                            aws_access_key_id = AKIAXK7QGYUTLRNF7QGK
                            aws_secret_access_key = <secret-access-key>  #deleted to push this page into github

            config file : [default]
                          region = us-east-1
                          output = table
                          [profile admin]
                          region = us-east-1
                          output = table

            This file keeps on updating upon providing profiles and we can use the profile name as alias for a particular user  in future.
            To use a named profile, add the --profile profile-name option to your command .
            EX: $ aws ec2 describe-instances --profile user1 (to list ec2 instances for user1)
            To make a profile as default : WINDOWS : setx AWS_PROFILE  user1  (set for that particular shell & setx if for all shells)
                                           LINUX   : export AWS_PROFILE=user1

           aws configure get/set <> --profile <> --> get/set values
           aws configure import --csv file://credentials.csv
           aws configure list
           aws configure list-profiles
           aws iam list-users -> list all IAM users.
           aws --version
           aws sts get-caller-Identity -> Details about the User - ID , keys and URL to login


  HELP : aws help
         aws command help
         aws command subcommand help --> aws ec2 describe-instances help | more

         If any command returns errors , then use the --debug flag to see logs
         Use --debug option to see the debug logs for each step in a AWS command.

        Do "setx aws_cli_auto_prompt on (WINDOWS)" or "export aws_cli_auto_prompt=on (LINUX)"
          --> Press the <Enter> key to start autocomplete mode .
          --> Use <Space Bar> to move from command to subcommand and then to options etc;
          --> use <Arrow Keys> to navigate up and down
          --> Once done , use <Enter> key to execute the command .

  RETURN CODE :
      A hidden code sent after running a AWS Command Line Interface (AWS CLI) command which describes the status of the command.
      C:\> echo %errorlevel% --> WINDOWS
      $ echo $? -> LINUX
      0

      CODE 0 : The command completed successfully. There were no errors generated by the AWS CLI and AWS service the request was sent to.
      CODE 1 : (Only for S3) One or more Amazon S3 transfer operations failed.
      CODE 2 : Applicable to all CLI commands – the command entered couldn't be parsed. Parsing failures can be caused by, but aren't limited to, missing required subcommands or arguments, or using unknown commands or arguments.
               Limited to S3 commands – One or more files marked for transfer were skipped during the transfer process. However, all other files marked for transfer were successfully transferred. Files that are skipped during the transfer process include: files that don't exist; files that are character special devices, block special device, FIFO queues, or sockets; and files that the user doesn't have read permissions to.
