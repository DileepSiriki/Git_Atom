SQL vs NO-SQL :
-----------------
Structured Query language (SQL) pronounced as "S-Q-L" or sometimes as "See-Quel" is the standard language for dealing with Relational Databases.
A relational database defines relationships in the form of tables.
Ex : MySQL Database, Oracle, Ms SQL Server, Sybase, PostgreSQL etc.
ACID --> Atomicity - Consistency - Isolation - Durability

Atomicity   − This property states that a transaction must be treated as an atomic unit, that is, either all of its operations are executed or none.
              There must be no state in a database where a transaction is left partially completed.
              States should be defined either before the execution of the transaction or after the execution/abortion/failure of the transaction.
Consistency − The database must remain in a consistent state after any transaction.
              No transaction should have any adverse effect on the data residing in the database.
              If the database was in a consistent state before the execution of a transaction, it must remain consistent after the execution of the transaction as well.
Isolation   − In a database system where more than one transaction are being executed simultaneously and in parallel, the property of isolation states that all the transactions will be carried out and executed as if it is the only transaction in the system.
              No transaction will affect the existence of any other transaction.
Durability  − The database should be durable enough to hold all its latest updates even if the system fails or restarts.
              If a transaction updates a chunk of data in a database and commits, then the database will hold the modified data.
              If a transaction commits but the system fails before the data could be written on to the disk, then that data will be updated once the system springs back into action.


Not only Structured Query language (NO-SQL) pronounced as "Not only SQL" or sometimes as "Not SQL" is the standard language for dealing with Non-Relational/Distributed  Databases.
NoSQL is a non-relational DMS, that does not require a fixed schema, avoids joins, and is easy to scale.
NoSQL database is used for distributed data stores with humongous data storage needs. NoSQL is used for Big data and real-time web apps
For example companies like Twitter, Facebook, Google that collect terabytes of user data every single day.
Ex : MongoDB, Redis, , Neo4j, Cassandra, Hbase.
BASE : Basically Available - Soft State - Eventually Consistent

Basically Available   – Guarantees the availability of the data . There will be a response to any request (can be failure too).
                        Rather than enforcing immediate consistency, BASE-modelled NoSQL databases will ensure availability of data by spreading and replicating it across the nodes of the database cluster.
Soft State            – The state of the system could change over time.
                        Due to the lack of immediate consistency, data values may change over time.
                        The BASE model breaks off with the concept of a database which enforces its own consistency, delegating that responsibility to developers.
Eventually Consistent – The system will eventually become consistent once it stops receiving input.
                        The fact that BASE does not enforce immediate consistency does not mean that it never achieves it.
                        However, until it does, data reads are still possible (even though they might not reflect the reality).

--> SQL databases are table based databases whereas NoSQL databases can be document based, key-value pairs, graph databases.
--> SQL databases have a predefined schema whereas NoSQL databases use dynamic schema for unstructured data.
--> SQL should be used when data validity is super important NoSQL is used when it's more important to have fast data than correct data.
--> SQL databases are vertically scalable. This means that you can increase the load on a single server by increasing things like RAM, CPU or SSD.
    NoSQL databases are horizontally scalable. This means that you handle more traffic by sharing, or adding more servers in your NoSQL database.
    It is similar to adding more floors to the same building versus adding more buildings to the neighbourhood.


Postgre SQL is an object-relational database management system (ORDBMS).
It offers support for SQL and some support for NoSQL as well.
PostgreSQL support modern applications feature like JSON, XML etc. while MySQL only supports JSON.
SQL server is a database management system which is mainly used for e-commerce and providing different data warehousing solutions.
PostgreSQL is an advanced version of SQL which provides support to different functions of SQL like foreign keys, subqueries, triggers, and different user-defined types and functions.


#########################################################################################################################
#########################################################################################################################

AVAILABLE DATABASE SERVICES AND USE-CASES  :
-----------------------------------------------

DATABASE TYPE     USE CASE                                                      AWS SERVICE
================================================================================================================================================
Relational        Traditional applications, ERP, CRM, e-commerce                Amazon Aurora - Amazon RDS -  Amazon Redshift
================================================================================================================================================
Key-value         High-traffic web apps, e-commerce systems,                    Amazon DynamoDB
(JSON-like)       gaming applications
================================================================================================================================================
In-memory         Caching, session management, gaming leader boards,            Amazon ElastiCache for Memcached -  Amazon ElastiCache for Redis
                  geospatial applications
================================================================================================================================================
Document          Content management, catalogs, user profiles                   Amazon DocumentDB (with MongoDB compatibility)
================================================================================================================================================
Wide column       High scale industrial apps for equipment maintenance,         Amazon Keyspaces (for Apache Cassandra)
                  fleet management, and route optimization
================================================================================================================================================
Graph             Fraud detection, social networking, recommendation engines    Amazon Neptune
================================================================================================================================================
Time series       IoT applications, DevOps, industrial telemetry                Amazon Timestream
================================================================================================================================================
Ledger            Systems of record, supply chain, registrations,               Amazon QLDB
                  banking transactions
================================================================================================================================================


#########################################################################################################################
#########################################################################################################################

RDS - Relational Database Service :
-------------------------------------
It is a web service that makes it easier to set up, operate, and scale a relational database in the cloud.
It provides cost-efficient, resizable capacity for an industry-standard relational database and manages common database administration tasks.
DB instances for Amazon RDS for MySQL, MariaDB, PostgreSQL, Oracle, and Microsoft SQL Server use Amazon Elastic Block Store (Amazon EBS) volumes for database and log storage.

  • When you buy a server, you get CPU, memory, storage, and IOPS, all bundled together. With AmazonRDS, these are split apart so that you can scale them independently.
    If you need more CPU, less IOPS, or more storage, you can easily allocate them.
  • Amazon RDS manages backups, software patching, automatic failure detection, and recovery.
  • To deliver a managed service experience, Amazon RDS doesn't provide shell access to DB instances.
    It also restricts access to certain system procedures and tables that require advanced privileges.
  • You can have automated backups performed when you need them, or manually create your own backup snapshot.
    You can use these backups to restore a database. The Amazon RDS restore process works reliably and efficiently.
  • You can use the database products you are already familiar with: MySQL, MariaDB, PostgreSQL, Oracle, Microsoft SQL Server.
  • In addition to the security in your database package, you can help control who can access your RDS databases by using AWS Identity and Access Management (IAM) to define users and permissions.

DB INSTANCE : [  Isolated database environment running in the cloud ]
-------------------------------------------------------------------------
The basic building block of Amazon RDS is the DB instance. Each DB instance runs a DB engine.
Amazon RDS currently supports the MySQL, MariaDB, PostgreSQL, Oracle, and Microsoft SQL Server DB engines.
A DB instance is an isolated database environment in the AWS Cloud. Your DB instance can contain multiple user-created databases.
The computation and memory capacity of a DB instance is determined by its DB instance class.
You can select the DB instance that best meets your needs. If your needs change over time, you can change DB instances.
DB instance storage comes in three types:
    --> Magnetic,
    --> General Purpose (SSD), and
    --> Provisioned IOPS(PIOPS).
You can run your DB instance in several Availability Zones.
Your primary DB instance is synchronously replicated across Availability Zones to the secondary instance.
A security group controls the access to a DB instance. It does so by allowing access to IP address ranges or Amazon EC2 instances that you specify.
When you use Amazon RDS, you can choose to use on-demand DB instances or reserved DB instances.

You can have up to 40 Amazon RDS DB instances, with the following limitations:
    • 10 for each SQL Server edition (Enterprise, Standard, Web, and Express) under the "license-included" model
    • 10 for Oracle under the "license-included" model
    • 40 for MySQL, MariaDB, or PostgreSQL
    • 40 for Oracle under the "bring-your-own-license" (BYOL) licensing model

Each DB instance has a DB instance identifier.
The identifier is used as part of the DNS hostname allocated to your instance by RDS.
For example, if you specify db1 as the DB instance identifier, then RDS will automatically allocate a DNS endpoint for your instance, such as db1.123456789012.us-east-1.rds.amazonaws.com

Amazon RDS creates a master user account for your DB instance as part of the creation process.
This master user has permissions to create databases and to perform create, delete, select, update, and insert operations on tables the master user creates.
You must set the master user password when you create a DB instance

DB INSTANCE CLASSES :
----------------------
Amazon RDS supports three types of instance classes:
    --> Standard [db.m1 , db.m3 ... ],
    --> Memory Optimized [ db.m2, db.r3, db.r4, db.r5 ... ], and
    --> Burstable Performance [ db.t2, db.t3 ]
You can change the CPU and memory available to a DB instance by changing its DB instance class.

RDS STORAGE TYPES :
----------------------
Amazon RDS provides three storage types:
  --> General Purpose SSD (also known as gp2),
  --> Provisioned IOPS SSD (also known as io1), and
  --> magnetic (also known as standard).
You can create MySQL, MariaDB, Oracle, and PostgreSQL RDS DB instances with up to 64 tebibytes (TiB) of storage.
You can create SQL Server RDS DB instances with up to 16 TiB of storage.
For this amount of storage, use the Provisioned IOPS SSD and General Purpose SSD storage types.

  • General Purpose SSD :
    General Purpose SSD volumes offer cost-effective storage that is ideal for a broad range of workloads.
    These volumes deliver single-digit millisecond latencies and the ability to burst to 3,000 IOPS for extended periods of time.
    Baseline performance for these volumes is determined by the volume's size.

  • Provisioned IOPS :
    Provisioned IOPS storage is designed to meet the needs of I/O-intensive workloads,
    particularly database workloads, that require low I/O latency and consistent I/O throughput.

  • Magnetic :
    Amazon RDS also supports magnetic storage for backward compatibility.
    We recommend that you use General Purpose SSD or Provisioned IOPS for any new storage needs.
    The maximum amount of storage allowed for DB instances on magnetic storage is less than that of the other storage types.

BILLING :
-----------
    • On-Demand Instances :
      Pay by the hour for the DB instance hours that you use.
      Pricing is listed on a per-hour basis, but bills are calculated down to the second and show times in decimal form.
      RDS usage is now billed in one second increments, with a minimum of 10 minutes.

    • Reserved Instances :
      Reserve a DB instance for a one-year or three-year term and get a significant discount compared to the on-demand DB instance pricing.
      With Reserved Instance usage, you can launch, delete, start, or stop multiple instances within an hour and get the Reserved Instance benefit for all of the instances.

CONNECTING :
---------------
AWS -> RDS -> create a DB instance [ chose any type you want ]-> Easy create -> generate credentials -> save endpoint URl and ports
Open CLI -> mysql -h <endpoint> -P 3306 -u <mymasteruser>  -p


#########################################################################################################################
#########################################################################################################################

AWS AURORA : // AWS OWNED --> operates on clusters rather than a single instance. // Tables-Items-Attributes
====================
Amazon Aurora (Aurora) is a fully managed relational database engine that's compatible with MySQL and PostgreSQL.
With some workloads, Aurora can deliver up to five times the throughput of MySQL and up to three times the throughput of PostgreSQL without requiring changes to most of your existing applications.
Aurora is part of the managed database service Amazon Relational Database Service (Amazon RDS).
Aurora management operations typically involve entire clusters of database servers that are synchronized through replication, instead of individual database instances.
The automatic clustering, replication, and storage allocation make it simple and cost-effective to set up, operate, and scale your largest MySQL and PostgreSQL deployments.

An Amazon Aurora DB cluster consists of one or more DB instances and a cluster volume that manages the data for those DB instances.
An Aurora cluster volume is a virtual database storage volume that spans multiple Availability Zones, with each Availability Zone having a copy of the DB cluster data.
 --> Primary DB Instance and Aurora Replica

AWS DYNAMO DB :
=====================
Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.
Amazon DynamoDB is a fast and flexible NoSQL database service for all applications that need consistent, single-digit millisecond latency at any scale.
It is a fully managed cloud database and supports both document and key-value store models.
Its flexible data model, reliable performance, and automatic scaling of throughput capacity, makes it a great fit for mobile, web, gaming, ad tech, IoT, and many other applications.
You can use Amazon DynamoDB to create a database table that can store and retrieve any amount of data, and serve any level of request traffic.
Amazon DynamoDB automatically spreads the data and traffic for the table over a sufficient number of servers to handle the request capacity specified by the customer and the amount of data stored, while maintaining consistent and fast performance.
DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.
You can create on-demand backups and enable point-in-time recovery for your Amazon DynamoDB tables.
Point-in-time recovery helps protect your tables from accidental write or delete operations.
With point-in-time recovery, you can restore a table to any point in time during the last 35 days
Allows you to delete expired items from tables automatically to help you reduce storage usage and the cost of storing data that is no longer relevant.

In DynamoDB, tables, items, and attributes are the core components that you work with.
  --> A table is a collection of items, and each item is a collection of attributes.
  --> DynamoDB uses primary keys to uniquely identify each item in a table and secondary indexes to provide more querying flexibility.
  --> You can use DynamoDB Streams to capture data modification events in DynamoDB tables

COMPONENTS IN DYNAMO-DB :
------------------------
• Tables – Similar to other database systems, DynamoDB stores data in tables. A table is a collection of data.
  For example, see the example table called People that you could use to store personal contact information about friends, family, or anyone else of interest.
  You could also have a Cars table to store information about vehicles that people drive.

• Items – Each table contains zero or more items. An item is a group of attributes that is uniquely identifiable among all of the other items.
  In a People table, each item represents a person. For a Cars table, each item represents one vehicle.
  Items in DynamoDB are similar in many ways to rows, records, or tuples in other database systems.
  In DynamoDB, there is no limit to the number of items you can store in a table.

• Attributes – Each item is composed of one or more attributes.
  An attribute is a fundamental data element, something that does not need to be broken down any further.
  For example, an item in a People table contains attributes called PersonID, LastName, FirstName, and so on.
  For a Departmenttable, an item might have attributes such as DepartmentID, Name, Manager, and so on.
  Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.

PRIMARY KEY :
---------------
When you create a table, in addition to the table name, you must specify the primary key of the table.
The primary key uniquely identifies each item in the table, so that no two items can have the same key.
DynamoDB supports two different kinds of primary keys:
    • Partition key – A simple primary key, composed of one attribute known as the partition key.
    • Partition key and sort key – Referred to as a composite primary key, this type of key is composed of two attributes.
      The first attribute is the partition key, and the second attribute is the sort key.

SECONDARY KEY :
-----------------
You can create one or more secondary indexes on a table.
A secondary index lets you query the data in the table using an alternate key, in addition to queries against the primary key.
DynamoDB doesn't require that you use indexes, but they give your applications more flexibility when querying your data.
After you create a secondary index on a table, you can read data from the index in much the same way as you do from the table.
DynamoDB supports two kinds of indexes:
    • Global secondary index – An index with a partition key and sort key that can be different from those on the table.
    • Local secondary index – An index that has the same partition key as the table, but a different sort key.

Each table in DynamoDB has a quota of 20 global secondary indexes (default quota) and 5 local secondary indexes per table.

STREAMS :
---------------
DynamoDB Streams is an optional feature that captures data modification events in DynamoDB tables.
The data about these events appear in the stream in near-real time, and in the order that the events occurred.
Each event is represented by a stream record.
If you enable a stream on a table, DynamoDB Streams writes a stream record whenever one of the following events occurs:
    • A new item is added to the table: The stream captures an image of the entire item, including all of its attributes.
    • An item is updated: The stream captures the "before" and "after" image of any attributes that were modified in the item.
    • An item is deleted from the table: The stream captures an image of the entire item before it was deleted.

Each stream record also contains the name of the table, the event timestamp, and other metadata.
Stream records have a lifetime of 24 hours; after that, they are automatically removed from the stream.
You can use DynamoDB Streams together with AWS Lambda to create a trigger—code that runs automatically whenever an event of interest appears in a stream.
For example, consider a Customers table that contains customer information for a company.
Suppose that you want to send a "welcome" email to each new customer.
You could enable a stream on that table, and then associate the stream with a Lambda function.

DATA TYPES :
------------
DynamoDB supports many different data types for attributes within a table.
They can be categorized as follows:
    • Scalar Types – A scalar type can represent exactly one value. The scalar types are number, string, binary, Boolean, and null.
    • Document Types – A document type can represent a complex structure with nested attributes, such as you would find in a JSON document. The document types are list and map.
    • Set Types – A set type can represent multiple scalar values. The set types are string set, number set, and binary set.

When you create a table or a secondary index, you must specify the names and data types of each primary key attribute (partition key and sort key).
Furthermore, each primary key attribute must be defined as type string, number, or binary.
DynamoDB is a NoSQL database and is schema less.
This means that, other than the primary key attributes, you don't have to define any attributes or data types when you create tables.
By comparison, relational databases require you to define the names and data types of each column when you create a table.


SQL vs NOSQL :
==================

1. CREATE A TABLE :
--------------------
SQL :
``````

CREATE TABLE Music (
    Artist VARCHAR(20) NOT NULL,
    SongTitle VARCHAR(30) NOT NULL,
    AlbumTitle VARCHAR(25),
    Year INT,
    Price FLOAT,
    Genre VARCHAR(10),
    Tags TEXT,
    PRIMARY KEY(Artist, SongTitle)
);

DynamoDB:
```````````

{
    TableName : "Music",
    KeySchema: [
        {
            AttributeName: "Artist",
            KeyType: "HASH", //Partition key
        },
        {
            AttributeName: "SongTitle",
            KeyType: "RANGE" //Sort key
        }
   ],
   AttributeDefinitions: [
        {
            AttributeName: "Artist",
            AttributeType: "S"
        },
        {
            AttributeName: "SongTitle",
            AttributeType: "S"
        }
  ],
  ProvisionedThroughput: {       // Only specified if using provisioned mode
      ReadCapacityUnits: 1,
      WriteCapacityUnits: 1
  }
}


GET TABLE INFO :
-----------------
SQL :
``````
DESCRIBE Music; --> Return a Table

DynamoDb:
``````````
{
  TableName : "Music" --> Return a Json
}


SCANNING A TABLE :
---------------------
SQL :
`````
/* Return all of the data in the table */
SELECT * FROM Music;

/* Return all of the values for Artist and Title */
SELECT Artist, Title FROM Music;

DynamoDB :
````````````
// Return all of the data in the table
{
    TableName:  "Music"
}

// Return all of the values for Artist and Title
{
    TableName:  "Music",
    ProjectionExpression: "Artist, Title"
}


DELETE A TABLE :
-------------------
SQL :
```````
DROP TABLE Music;

DynamoDB:
``````````
{
    TableName: "Music"
}

=====================================================================================================
=====================================================================================================
=====================================================================================================

--> Amazon Redshift vs. Amazon RDS :
-----------------------------------------
Both Amazon Redshift and Amazon RDS enable you to run traditional relational databases in the cloud while offloading database administration.
Customers use Amazon RDS databases primarily for online-transaction processing (OLTP) workload while Redshift is used primarily for reporting and analytics.
OLTP workloads require quickly querying specific information and support for transactions like insert, update, and delete and are best handled by Amazon RDS.
Amazon Redshift harnesses the scale and resources of multiple nodes and uses a variety of optimizations to provide order of magnitude improvements over traditional databases for analytic and reporting workloads against very large data sets.

--> Amazon Redshift or Redshift Spectrum vs. Amazon EMR :
-----------------------------------------------------------
You should use Amazon EMR if you use custom code to process and analyze extremely large datasets with big data processing frameworks such as Apache Spark, Hadoop, Presto, or Hbase. Amazon EMR gives you full control over the configuration of your clusters and the software you install on them.
Data warehouses like Amazon Redshift are designed for a different type of analytics altogether.
Data warehouses are designed to pull together data from lots of different sources, like inventory, financial, and retail sales systems.
In order to ensure that reporting is consistently accurate across the entire company, data warehouses store data in a highly structured fashion.
structure builds data consistency rules directly into the tables of the database.
Amazon Redshift is the best service to use when you need to perform complex queries on massive collections of structured and semi-structured data and get fast performance.

While the Redshift Spectrum feature is great for running queries against data in Amazon Redshift and S3, it really isn’t a fit for the types of use cases that enterprises typically ask from processing frameworks like Amazon EMR.
Amazon EMR goes far beyond just running SQL queries.
Amazon EMR is a managed service that lets you process and analyze extremely large data sets using the latest versions of popular big data processing frameworks, such as Spark, Hadoop, and Presto, on fully customizable clusters.

--> Amazon Athena vs. Redshift Spectrum:
-----------------------------------------
Amazon Athena is the simplest way to give any employee the ability to run ad-hoc queries on data in Amazon S3.
Athena is serverless, so there is no infrastructure to setup or manage, and you can start analyzing your data immediately.

If you have frequently accessed data that needs to be stored in a consistent, highly structured format, then you should use a data warehouse like Amazon Redshift.
This gives you the flexibility to store your structured, frequently accessed data in Amazon Redshift, and use Redshift Spectrum to extend your Amazon Redshift queries out to data in your Amazon S3 data lake.
This gives you the freedom to store your data where you want, in the format you want, and have it available for processing when you need.
