AWS CLOUD FRONT :
---------------
Amazon Cloud Front is a web service that speeds up distribution of your static and dynamic web content, such as .html, .css, .js, and image files, to your users.
Cloud Front delivers your content through a worldwide network of data centres called edge locations.
When a user requests content that you're serving with  , the request is routed to the edge location that provides the lowest latency (time delay), so that content is delivered with the best possible performance.
  •If the content is already in the edge location with the lowest latency, CloudFront delivers it immediately.
  •If the content is not in that edge location, CloudFront retrieves it from an origin that you've defined—such as an Amazon S3 bucket, a Media Package channel,
You also get increased reliability and availability because copies of your files (also known as objects) are now held (or cached) in multiple edge locations around the world.
Keeps your objects in CloudFront edge locations for the default duration of 24 hours (the minimum duration is 0 seconds)
    •Accelerate static website content delivery
    •Serve video on demand or live streaming video
    •Encrypt specific fields throughout system processing
    •Customize at the edge

Way of Working :
--------------------
1. You specify origin servers, like an Amazon S3 bucket or your own HTTP server, from which CloudFront gets your files which will then be distributed from CloudFront edge locations all over the world.
   The origin server can be an S3 if you are serving content over HTTP such as a webserver .
2.You upload your files to your origin servers. Your files, also known as objects, typically include webpages, images, and media files .
   If you're using an Amazon S3 bucket as an origin server, you can make the objects in your bucket publicly readable, so that anyone who knows the CloudFront URLs for your objects can access them.
3. You create a CloudFront distribution, which tells CloudFront which origin servers to get your files from when users request the files through your web site or application.
4. CloudFront assigns a domain name to your new distribution that you can see in the CloudFront console, or that is returned in the response to a programmatic request
5. CloudFront sends your distribution's configuration (but not your content) to all of its edge locations or points of presence (POPs)— collections of servers in geographically-dispersed data centres where CloudFront caches copies of your files.

  --> Say you have an object with a domain name http://www.example.com/logo.jpg.
  --> Cloud Front assigns a domain name for the distribution say http://d111111abcdef8.cloudfront.net/logo.jpg.
  --> You can use domain from cloudfront or you can set up CloudFront to use your own domain name with your distribution.
  --> Optionally, you can configure your origin server to add headers to the files, to indicate how long you want the files to stay in the cache in CloudFront edge locations.

                -----------                                                       -----------
               |            |                         --                         |           |
               |    AWS     | <--------------------> |  | <--------------------> |   USER    |  POP = Point of presence
               |            |                         --                         |           |
                -----------                           POP                         -----------

REGIONAL EDGE CACHE:
---------------------

                -----------                                                          -----------
               |            |        --                  --                         |           |
               |    AWS     | <-----|  |--------------->|  | <--------------------> |   USER    |  POP = Point of presence
               |            |        --                  --                         |           |
                -----------           |                  POP                         -----------
                                      V
                              Regional Edge cache

  --> Initially there used to be only POP's where data is cached . But now there are also Regional edge caches .
  --> Regional edge caches are CloudFront locations that are deployed globally, close to your viewers.
  --> They're located between your origin server and the POPs—global edge locations that serve content directly to viewers.
  --> As objects become less popular, individual POPs might remove those objects to make room for more popular content.
  --> Regional edge caches have a larger cache than an individual POP, so objects remain in the cache longer at the nearest regional edge cache location.
  --> This helps keep more of your content closer to your viewers, reducing the need for CloudFront to go back to your origin server
  *** So if POP does not have some content , instead of going to ORIGIN SERVER , it first checks the REGIONAL EDGE CACHE .

  CloudFront also has regional edge caches that bring more of your content closer to your viewers, even when the content is not popular enough to stay at a POP, to help improve performance for that content.
  Regional edge caches are CloudFront locations that are deployed globally, close to your viewers.
  They'relocated between your origin server and the POPs—global edge locations that serve content directly to viewers. As objects become less popular, individual POPs might remove those objects to make roomfor more popular content.
  Regional edge caches have a larger cache than an individual POP, so objects remain in the cache longer at the nearest regional edge cache location.
  This helps keep more of your content closer to your viewers, reducing the need for CloudFront to go back to your origin server, and improving overall performance for viewers.
  When a viewer makes a request on your website or through your application, DNS routes the request to the POP that can best serve the user’s request.
  This location is typically the nearest CloudFront edge location in terms of latency. In the POP, CloudFront checks its cache for the requested files. If the files are in the cache, CloudFront returns them to the user.
  If the files are not in the cache, the POPs go to the nearest regional edge cache to fetch the object. In the regional edge cache location, CloudFront again checks its cache for the requested files.
  If the files are in the cache, CloudFront forwards the files to the POP that requested them. As soon as the first byte arrives from regional edge cache location, CloudFront begins to forward the files to the user.
  CloudFront also adds the files to the cache in the POP for the next time someone requests those files.


LAMBDA@EGDE :
-------------------
Lambda@Edge is an extension of AWS Lambda, a compute service that lets you execute functions that customize the content that CloudFront delivers.
You can author Node.js or Python functions in one Region, US-East-1 (N. Virginia), and then execute them in AWS locations globally that are closer to the viewer, without provisioning or managing servers.
Lambda@Edge scales automatically, from a few requests per day to thousands per second.
Processing requests at AWS locations closer to the viewer instead of on origin servers significantly reduces latency and improves the user experience.

 You can execute Lambda functions when the following CloudFront events occur:
    •When CloudFront receives a request from a viewer (viewer request)
    •Before CloudFront forwards a request to the origin (origin request)
    •When CloudFront receives a response from the origin (origin response)
    •Before CloudFront returns the response to the viewer (viewer response)

There are many uses for Lambda@Edge processing. For example:
    •A Lambda function can inspect cookies and rewrite URLs so that users see different versions of a site for A/B testing.
    •CloudFront can return different objects to viewers based on the device they're using by checking the User-Agent header, which includes information about the devices. For example, CloudFront can return different images based on the screen size of their device. Similarly, the function could consider the value of the Referer header and cause CloudFront to return the images to bots that have the lowest available resolution.
    •Or you could check cookies for other criteria. For example, on a retail website that sells clothing, if you use cookies to indicate which color a user chose for a jacket, a Lambda function can change the request so that CloudFront returns the image of a jacket in the selected color.
    •A Lambda function can generate HTTP responses when CloudFront viewer request or origin request events occur.
    •A function can inspect headers or authorization tokens, and insert a header to control access to your content before CloudFront forwards the request to your origin.
    •A Lambda function can also make network calls to external resources to confirm user credentials, or fetch additional content to customize a response


DDOS ATTCK :
----------------
CloudFront allows you to cache content at edge locations.
When a request is made for that content, the request is sent to an edge location (not your applications hardware), so the edge locations will absorb any DDoS attack and protect your underlining hardware.
A distributed denial-of-service (DDoS) attack is a malicious attempt to disrupt the normal traffic of a targeted server, service or network by overwhelming the target or its surrounding infrastructure with a flood of Internet traffic.
DDoS attacks achieve effectiveness by utilizing multiple compromised computer systems as sources of attack traffic. Exploited machines can include computers and other networked resources such as IoT devices.
DDoS attacks are carried out with networks of Internet-connected machines.
These networks consist of computers and other devices (such as IoT devices)which have been infected with malware, allowing them to be controlled remotely by an attacker. These individual devices are referred to as bots (or zombies), and a group of bots is called a botnet.
Once a botnet has been established, the attacker is able to direct an attack by sending remote instructions to each bot.
When a victim’s server or network is targeted by the botnet, each bot sends requests to the target’s IP address, potentially causing the server or network to become overwhelmed, resulting in a denial-of-service to normal traffic.
Because each bot is a legitimate Internet device, separating the attack traffic from normal traffic can be difficult.
