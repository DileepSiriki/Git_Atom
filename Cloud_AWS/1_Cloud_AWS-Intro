CLOUD INTRO :
===============
  # CLOUD
    It provides us means by which we can access the applications as utilities over the internet.
    It allows us to create, configure, and customize the business applications online
    It provides services over public and private networks/Internet, i.e., WAN, LAN or VPN.

  # CLOUD COMPUTING
    Refers to manipulating, configuring, and accessing the hardware and software resources remotely.
    It offers online data storage, infrastructure, and application.
    It offers platform independency, as the software is not required to be installed locally on the PC.
    Hence, the Cloud Computing is making our business applications mobile and collaborative.
    It can be classified to two types :

      --> DEPLOYMENT MODELS
        Deployment models define the type of access to the cloud, i.e., how the cloud is located?
        Cloud can have any of the four types of access: PUBLIC, PRIVATE, HYBRID, COMMUNITY.

      --> SERVICE MODELS
        Cloud computing is based on service models : IAAS , PAAS , SAAS.

PUBLIC CLOUD    : Allows systems and services to be easily accessible to the general public.
  (BUS)           Public cloud may be less secure because of its openness. -> CHEAP & LESS SECURE & LOCATION INDEPENDENCE

PRIVATE CLOUD   : Allows systems and services to be accessible within an organization.
  (BIKE)          It is more secured because of its private nature. -> RELIABLE & MORE EFFICIENT & HIGHLY SECURE

HYBRID CLOUD    : Is a mixture of public and private cloud.
  (CAB)           critical activities are performed using private cloud while the non-critical activities are performed using public cloud.

COMMUNITY CLOUD : Allows systems and services to be accessible by a group of organizations.

XAAS : Anything-as-a-Service is yet another service model, which includes :
       Network-as-a-Service, Business-as-a-Service, Identity-as-a-Service, Database-as-a-Service or Strategy-as-a-Service.

IaaS : Infrastructure-as-a-service provides access to fundamental resources such as:
       physical machines, virtual machines, virtual storage, VLAN's, Load balancers, Ip addresses  etc.

PaaS : Platform-as-a-Service provides the runtime environment for applications, development and deployment tools, etc
       It also offers development and deployment tools required to develop applications.
       PaaS provides built-in security, scalability, and web service interfaces.

SaaS : Software-as-a-Service model allows to use software applications as a service to end-users.
       It refers to a software that is deployed on a host service and is accessible via Internet
       Advamtage -> maintained by vendor & upgrades done automatically also not needed to install apps (drive/maps etc)
       Ex : Billing systems , HR Solutions , Help Desk applications.

Identity-as-a-Service -> Single Sign On Server to give users unique credentials and delete when he resigns.
        To solve the problem of using different username and password combinations for different servers, companies now employ Single Sign-On software, which allows the user to login only one time and manage the access to other systems.
        SSO has single authentication server, managing multiple accesses to other systems,

    ### Each of the service models inherit the security and management mechanism from the underlying model ###
                                      ----------------------------------               ==
                                      |       CLOUD CLIENTS            |                 | --> FRONT END
                                      |   Web-Browser    Mobile etc;   |                 |
                                      ----------------------------------               ==
                                                    ^   ^
                                          INTERNET  |   |  INTERNET
                                                    v   v
                            -------------------------------------------------------    ==
      (Applications)        |   SAAS : CRM - Email - Games - Virtual Desktop etc; |      |
                            -------------------------------------------------------      |
                                                      ||                                 |
                            -------------------------------------------------------      |
      (Security , Mngmnt)   |   PAAS : Database - Web Server - Deployment Tools ; |      | --> BACK END
                            -------------------------------------------------------      |
                                                      ||                                 |
                            -------------------------------------------------------      |
      (Services)            |   IAAS : Virtual Machines - Servers - Storage - N/W |      |
      (Most Basic Service)  -------------------------------------------------------    ==

IAAS = H/W ( CPU - RAM - ROM ) + OS (LINUX - WINDOWS)        -----> ADMINISTARTORS
PAAS = IAAS + APP:ICATIONS (Apache - Python - Node JS)       -----> DEVELOPERS
SAAS = PAAS + USER APPS (Gmail  - Drive - O365 - Maps)       -----> EVERYONE
BAAS = SAAS + Buiseness Processing (Accounting - Auditing)

 ----  ----------- ------- ---------- ---------------- --------------  ------- ------- -----------
|DATA  APPLICATION RUNTIME MIDDLEWARE OPERATING_SYSTEM VIRTUALIZATION  SERVERS STORAGE NETWORKING |
 ----  ----------- ------- ---------- ---------------- --------------  ------- ------- -----------
 |___| |_________________________________________________________________________________________|
   1                                     SAAS                                       2
 |_______________| |_____________________________________________________________________________|
   1                                     PAAS                                       2
 |____________________________________________________| |________________________________________|
   1                                     IAAS                                       2

1 = client has to manage
2 = vendor manages

ADVANTAGES OF CLOUD :
=======================
One can access applications as utilities, over the Internet.
One can manipulate and configure the applications online at any time.
It does not require to install a software to access or manipulate cloud application.
Cloud Computing offers online development and deployment tools, programming runtime environment through PaaS model.
Cloud resources are available over the network in a manner that provide platform independent access to any type of clients.
Cloud Computing offers on-demand self-service. The resources can be used without interaction with cloud service provider.
Cloud Computing is highly cost effective because it operates at high efficiency with optimum utilization. It just requires an Internet connection
Cloud Computing offers load balancing that makes it more reliable.

Pay for what we use , cost efficient and load balancing
No server space required
No need of experts to maintain h/w and s/w
better security and disaster recovery
automatic software updates
team collaboration across globe

VIRTUALIZATION :
==================
A technique, which allows to share single physical instance of an application or resource among multiple organizations or tenants (customers).
It does this by assigning a logical name to a physical resource and providing a pointer to that physical resource when demanded.

    APPLICATION virtualization : A single m/c hosts one or more applications delivered to one or more users via internet.
    HARDWARE virtualization    : A physical m/c hosting multiple virtual machines .
    SERVER virtualization      : Used by IAAS .
                                               Virtual Machine -1 = (Applications + OS)
N/W  &  storage --> Virtual Infrastructure --> Virtual Machine -2 = (Applications + OS)
(MAIN MACHINE)                                 Virtual Machine -3 = (Applications + OS)

HOST MACHINE :
===============
The host machine is the physical hardware upon which the virtualization takes place.
This machine runs the virtualization software that allows virtual machines to exist.
Its physical components such as memory, storage, and processor ultimately handle the needs of the virtual machines.
Its physical components such as memory, storage, and processor ultimately handle the needs of the virtual machines.
These resources are typically hidden or masked from the guest machines.

GUEST MACHINE (virtual machine):
================
Virtual machines created from a host machine are called guest machines.
These are supervised by HYPERVISORS .
It emulates, or simulates, a single piece of physical hardware such as a desktop computer or server.
However, everything is passed through the hypervisor, which makes the actual requests to the real hardware.

HYPERVISOR : (Type-1 and Type-2)
==============
It's a software that exists to run, create and manage the virtual machines. It acts as a Virtual Machine Manager (VMM)
VMM, is software that creates and runs virtual machines (VMs).
A hypervisor allows one host computer to support multiple guest VMs by virtually sharing its resources, such as memory and processing.

    Type-1, or bare-metal hypervisors, are installed directly onto the physical hardware.
    As such, they must contain their own operating systems for booting, running the hardware, and connecting to the network.
    Popular Type-1 hypervisors include Microsoft Hyper-V and VMware ESXi.
    Because bare-metal hypervisors are isolated from the attack-prone operating system, they are extremely secure

    Type-2, or hosted hypervisors, run on an operating system that is directly installed on the hardware.
    In this case, a copy of Windows, or a Unix-based system must be installed to boot the system and access the hardware.
    Once the operating system is running, the hosted hypervisor can launch. Type-2 hypervisors are often used to run multiple operating systems on a single machine, rather than to emulate numerous running systems on the hardware.
    Popular Type-2 hypervisors include VMware Workstation, VirtualBox


============================================================================================================
############################################################################################################
============================================================================================================

AWS CERTIFICATIONS : --> [ view the user guide AWS_Certifications.pdf ]
----------------------

There are 4 levels of proficiency in AWS :
  --> FOUNDATIONAL
  --> ASSOCIATE
  --> PROFESSIONAL
  --> SPECIALITY

There are 5 roles in AWS :
  --> CLOUD PRACTIONER
  --> SOLUTIONS ARCHITECT
  --> SYSOPS ADMINISTRATOR
  --> DEVELOPER
  --> DEVOPS ENGINNER

LEVELS & ROLES MAPPING :
-------------------------------------------------------------------------------------------------------------------------------------
                                    FOUNDATIONAL                ASSOCIATE             PROFESSIONAL           SPECIALITY**
-------------------------------------------------------------------------------------------------------------------------------------
  --> CLOUD PRACTIONER                  Yes                         No                    No                      No
  --> SOLUTIONS ARCHITECT               No                          Yes                   Yes                     No
  --> SYSOPS ADMINISTRATOR              No                          Yes                   No                      No
  --> DEVELOPER                         No                          Yes                   No                      No
  --> DEVOPS ENGINNER                   No                          No                    Yes                     No

--------------------------------------------------------------------------------------------------------------------------------------

**SPECIALITY --> Advanced Networking - Security - Machine Learning - Alexa Skill Builder - Data Analytics - Database
                 The above speciality certifications can be taken based on your experience .


============================================================================================================
############################################################################################################
============================================================================================================

CLOUD COMPUTING :
------------------
Cloud computing is the on-demand delivery of compute power, database, storage, applications, and other IT resources through a cloud services platform via the Internet with pay-as-you-go pricing.
With cloud computing, you don’t need to make large upfront investments in hardware and spend a lot of time on the heavy lifting of managing that hardware.
Instead, you can provision exactly the right type and size of computing resources you need to power your newest bright idea or operate your IT department.
You can access as many resources as you need, almost instantly, and only pay for what you use.
With cloud computing you avoid undifferentiated work such as procurement, maintenance, and capacity planning.

cloud computing provides means by which we can access applications as utilities over the internet.
It allows us to create/configure/customize the Business online.
Since we need not install any software locally , it is platform independent.

A cloud services platform such as Amazon Web Services or Azure owns and maintains the network-connected hardware required for these application services.
while you provision and use what you need via a web application.

• Trade capital expense for variable expense
• Stop guessing capacity
• Increase speed and agility
• Stop spending money running and maintaining data centers
• Go global in minutes

EX : Netflix in Aws

AMAZON WEB SERVICES  : Since 2006 -
--------------------------
Amazon Web Services is a secure cloud service offering a broad set of global cloud-based products including compute, storage, databases, analytics, networking, mobile, developer tools, management tools, IoT, security, and enterprise applications: on-demand, available in seconds, with pay-as-you-go pricing.
From data warehousing to deployment tools, directories to content delivery, over 175 AWS services are available around 190 countries .
This allows enterprises, start-ups, small and medium-sized businesses, and customers in the public sector to access the building blocks they need to respond quickly to changing business requirements.
One of the key benefits of cloud computing is the opportunity to replace upfront capital infrastructure expenses with low variable costs that scale with your business.
With the cloud, businesses no longer need to plan for and procure servers and other IT infrastructure weeks or months in advance.
Instead, they can instantly spin up hundreds or thousands of servers in minutes and deliver results faster.



FIVE PILLARS OF AWS :
=======================
1. OPERATIONAL EXCELLENCE : -> Automation
  Focuses on how you can continuously improve your ability to run systems, create better procedures, and gain insights.
  Human error is the primary cause of defects and operational incidents. The more operations that can be automated, the less chance there is for human error.
    Infrastructure as Code -> process of managing your infrastructure through machine-readable configuration files to automate your infrastructure -> CLOUD FORMATION

    Observability -> Observability is the process of measuring the internal state of your system. This is usually done to optimize it to some desired end state.

2. SECURITY : -> Policies (IAM) , Network Security (VPC) , Encryption (KMS)
  Focuses on how to secure your infrastructure on the cloud. Security and compliance is a shared responsibility between AWS and the customer.
    AWS -> responsible for physical infrastructure, software, and networking capabilities.
    CUSTOMER -> configuration of specific cloud services, the application software, and the management of sensitive data.

3. RELIABILITY :
  Focuses on how you can build services that are resilient to both service and infrastructure disruptions.
    Fault Isolation -> Resource and Request , Availability Zone , Region
    Limits -> Limits are constraints that can be applied to protect your services from excessive load. (SERVICE QUOTAS)

4. PERFORMANCE EFFICIENCY :
  Focuses on how you can run services efficiently and scalably in the cloud to handle any amount of traffic.
    Selection -> Ability to choose the service that most closely aligns with your workload. AWS has the broadest selection of services. (COMPUTE, STORAGE , DB ,N/W)
    Scaling -> VERTICAL : say micro instance to a macro instance (increasing capacity of an instance)
               HORIZONTAL : say 10 instances to 40 instances ( increasing number of instances)

5. COST OPTIMIZATION : -> AWS Cost Explorer ,  AWS Cost & Usage Report
  Focuses on achieving business outcomes while minimizing costs.
  OpEx is an ongoing pay-as-you-go model whereas CapEx is a one-time purchase model.


WAYS TO COMMUNICATE WITH AWS :
-------------------------------

  WEB CONSOLE                     ----
  CLI                                 |------- API --------------- AWS
  SDK for java,python etc ;           |------- API --------------- SERVICES
  Blue-Prints                     ----

  WEB CONSOLE is the actual AWS Page
  CLI is used to automate tasks similar to JENKINS written in python.
  SDK is used to integrate AWS in our Applications --> SDK = API + IDE + Debugger + Tools
  Blue-Prints are used to convert services & dependencies into a real running System in AWS . --> Cloud Formation
  Everything in AWS can be controlled via API by making REST API calls using HTTPS protocols. This is inconvenient hence CLI and SDK's have evolved.


SECURITY IN AWS :
--------------------
It is provided by the below :
  --> IAM & ROLES -- Identity and Management Services
  --> MFA         -- Multi Factor Authentication
  --> KMS         -- Key Master Service
  --> STS         -- Security Token Service
  --> CLOUD TRAIL
  --> CLOUD WATCH ALARMS
  --> SNS Notifications

AWS ACCEPTABLE USE POLICY :
----------------------------
This Acceptable Use Policy (this “Policy”) describes prohibited uses of the web services offered by Amazon Web Services, Inc. and its affiliates (the “Services”) and the website located at http://aws.amazon.com (the “AWS Site”).
The examples described in this Policy are not exhaustive.
We may modify this Policy at any time by posting a revised version on the AWS Site. By using the Services or accessing the AWS Site, you agree to the latest version of this Policy.
If you violate the Policy or authorize or help others to do so, we may suspend or terminate your use of the Services.

    No Illegal, Harmful, or Offensive Use or Content
    No Security Violations
    No Network Abuse
    No E-Mail or Other Message Abuse

AWS SHARED RESPONSIBILITY MODEL :
----------------------------------
Security and Compliance is a shared responsibility between AWS and the customer.
This shared model can help relieve the customer’s operational burden as AWS operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates.
The customer assumes responsibility and management of the guest operating system (including updates and security patches), other associated application software as well as the configuration of the AWS provided security group firewall.
Whereas the host operating system is software installed on a computer to interact with the hardware, the guest operating system is software installed onto and running on the virtual machine.
Customers should carefully consider the services they choose as their responsibilities vary depending on the services used, the integration of those services into their IT environment, and applicable laws and regulations.
The nature of this shared responsibility also provides the flexibility and customer control that permits the deployment.
As shown in the chart below, this differentiation of responsibility is commonly referred to as Security “of” the Cloud versus Security “in” the Cloud.

AWS - Security of the cloud
      operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the AWS  facilities.
      This infrastructure consisting  of the hardware, software, networking, and facilities that run AWS Cloud services.

CUSTOMER - Security in the cloud
           responsibility and management of the guest operating system (including updates and security patches)
           application software and firewall configurations
           Platforms , Applications , IAM , OS , Network and Firewall configuration
           client side and server side data encryption , networking traffic encryption and its integrity

AWS & CUSTOMER or BOTH :
        Inherited Controls : Physical and Environmental controls
        Shared Controls    :
           Patch Management – AWS is responsible for patching and fixing flaws within the infrastructure, but customers are responsible for patching their    guest OS and applications.
           Configuration Management – AWS maintains the configuration of its infrastructure devices, but a customer is responsible for configuring their own guest operating systems, databases, and applications.
           Awareness & Training - AWS trains AWS employees, but a customer must train their own employees.

AWS KNOWLEDGE CENTRE : - Q&A for AWS related queries .
-------------------------
Similar to AWS Documentation, AWS Discussion Forums, AWS Support Center.
All AWS account owners have access to account and billing support free of charge.
You can find answers to your questions quickly by visiting the AWS Knowledge Center.

REZIONS AND ZONES : open EC2 -> move to bottom -> SERVICE HEALTH & ZONE STATUS
----------------------------------------------------------------------------------
Amazon EC2 is hosted in multiple locations world-wide. These locations are composed of Regions, Availability Zones, Local Zones, AWS Outposts, and Wavelength Zones.

REGIONS : --> 24 In Total
-------------------------
    • An AWS Region is a physical location in the world and each Region is a separate geographic area.
      Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions. This achieves the greatest possible fault tolerance and stability.
      When you view your resources, you see only the resources that are tied to the Region that you specified. This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.

#### Regions are completely isolated so this achieves the greatest possible fault tolerance and stability.
#### Availability Zones are connected through low latency links .
#### AWS provides you with the flexibility to place instances and store data within multiple geographic regions as well as across multiple Availability Zones within each AWS Region.

AVAILABILITY ZONES : --> 77 In Total
----------------------------------------
    • Region is divided into availability zones to isolate themselves from a disaster to other zones. These are discrete data centres.
      Availability Zones are multiple, isolated locations within each Region. Each Region has multiple, isolated locations known as Availability Zones.
      Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones.
      By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location
      An Availability Zone is represented by a Region code followed by a letter identifier; for example,us-east-1a --> AZ ID is unique for all accounts but us-east-1a might not be same for all.
      When you launch an instance, you can select an Availability Zone or let us choose one for you.
      If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
      You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone.
      we can also migrate instances to another AZ --> make an AMI --> launch an instance --> configure

      The resources that you create in one Region do not exist in any other Region unless you explicitly use a replication feature offered by an AWS service.
      For example, Amazon S3 and Amazon EC2 support cross-Region replication.
      Some services, such as AWS Identity and Access Management (IAM), do not have Regional resources.

LOCAL ZONES :
----------------
    • Local Zones provide you the ability to place resources, such as compute and storage, in multiple locations closer to your end users.
      Local Zones have their own connections to the internet and support AWS Direct Connect, so that resources created in a Local Zone can serve local users with low-latency communications.
      A Local Zone is represented by a Region code followed by an identifier that indicates the location, for example, us-west-2-lax-1a
      We need to enable them in order to use , then create a subnet .

      A Local Zone is an extension of an AWS Region that is geographically close to your users.
      You can extend any VPC from the parent AWS Region into Local Zones by creating a new subnet and assigning it to the AWS Local Zone.
      When you create a subnet in a Local Zone, your VPC is extended to that Local Zone.
      The subnet in the Local Zone operates the same as other subnets in your VPC

      A Local Zone is represented by an AWS Region code followed by an identifier that indicates the location, for example us-west-2-lax-1a.
      Resources created in a Local Zone canserve local users with very low-latency communications.

OUTPOSTS & WAVELENGTHS :
--------------------------
    • AWS Outposts is a fully managed service that extends AWS infrastructure, services, APIs, and tools to customer premises.
      By providing local access to AWS managed infrastructure, AWS Outposts enables customers to build and run applications on premises using the same programming interfaces as in AWSRegions, while using local compute and storage resources for lower latency and local data processing needs.

    • Wavelength Zones allow developers to build applications that deliver ultra-low latencies to 5G devices and end users. Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks.
      A Wavelength Zone is represented by a Region code followed by an identifier that indicates the Wavelength Zone, for example, us-east-1-wl1-bos-wlz-1.

 ---------------------------------------------------------------------------------------------------------------------------------------------------------
|
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|    |                                                                                          |      |
|    |        ------------------------------     -----------------------------      ------      |      |     -----------------------     -----------------
|    |       |       ----       ----         |  |    ----      ----           |    |            |      |    |    ----               |   |
| A  |   B   |   C  |  D  |    |    | . . .  |  |   |    |    |    | . . . .  |    | . . . .    |      |    |   |     | . . . . .   |   |
|    |       |       -----      ----         |  |    ----      ----           |    |            |      |    |    -----              |   |
|    |        ------------------------------     -----------------------------      -------     |      |     ------------------------    -----------------
|    |                                                                                          |      |
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|
 ---------------------------------------------------------------------------------------------------------------------------------------------------------

          A = TOTAL AWS SPACE
          B = REGIONS
          C = AVAILABILITY ZONE
          D = EDGE LOCATIONS

### List all regions and zones , edge locations , wavelengths , outposts for interview purpose // get a rough sketch

JSON - XML - YAML :-
---------------
AWS uses JSON and XML's extensively for templates and policies .
Both JSON and XML can be used to receive data from a web server.
Comments are not allowed in JSON.
JSON - Java Script Object Notation
XML - Extensible Markup Language

      Json Example :
      ----------------

          {"employees":[
            { "firstName":"John", "lastName":"Doe" },
            { "firstName":"Anna", "lastName":"Smith" },
            { "firstName":"Peter", "lastName":"Jones" }
          ]}

      XML Example :
      ----------------

          <employees>
            <employee>
              <firstName>John</firstName> <lastName>Doe</lastName>
            </employee>
            <employee>
              <firstName>Anna</firstName> <lastName>Smith</lastName>
            </employee>
            <employee>
              <firstName>Peter</firstName> <lastName>Jones</lastName>
            </employee>
          </employees>

JSON is Like XML Because :
  Both JSON and XML are "self describing" (human readable)
  Both JSON and XML are hierarchical (values within values)
  Both JSON and XML can be parsed and used by lots of programming languages
  Both JSON and XML can be fetched with an XMLHttpRequest

JSON is Unlike XML Because :
  JSON doesn't use end tag
  JSON is shorter
  JSON is quicker to read and write
  JSON can use arrays

The biggest difference is:
 XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function.

JavaScript Object Notation, more commonly known by the acronym JSON, is an open data interchange format that is both human and machine-readable.
Despite the name JavaScript Object Notation, JSON is independent of any programming language and is a common API output in a wide variety of applications.
JSON represents data in two ways:

    Object : A collection of name-value (or key-value) pairs. An object is defined within left ({) and right (}) braces.
             Each name-value pair begins with the name, followed by a colon, followed by the value. Name-value pairs are comma separated.
    Array  : An ordered collection of values. An array is defined within left ([) and right (]) brackets.
             Items in the array are comma separated.

             {                                                                                                              -----
              creationDate : 25-10-2020,         <- Name-Value pairs & Comma seperated                                           |
              modifieddate : 01-12-2021,                                                                                         |
              name : Dileep ,                                                                                                    |
              employees:[                                             ---                                                        | <-- OBJECT
                         { "firstName":"John", "lastName":"Doe" },       |                                                       |
                         { "firstName":"Anna", "lastName":"Smith" },     |<- ARRAY - Containing objects with a name-value pair   |
                         { "firstName":"Peter", "lastName":"Jones" }     |                                                       |
                       ]                                              ---                                                        |
            }                                                                                                                ----


    Administrator  IAM Policy :
    ------------------------------
            {
              "Version": "2012-10-17",
              "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "*",
                                "Resource": "*"
                            }
                          ]
            }



WHAT IS SERVERLESS APPLICATION : <Add some more data>
-----------------------------------
Now don’t be fooled by the name. You can’t run a compute function without a computer environment (a “server”) somewhere that’ll host it.
What “serverless” does allow is for individual developers to run their code for seconds or minutes at a time on some else’s cloud servers.
The serverless model—as provided by services like AWS Lambda—makes it possible to design code that reacts to external events.
When, for instance, a video file is uploaded to a repository (like an AWS S3 bucket or even an on-premises FTP site), it can trigger a Lambda function that will convert the file to a new video format.
There’s no need to maintain and pay for an actual instance running 24/7, just for the moments your code is actually running.
And there’s no administration overhead to worry about.

SCALABILITY :
-------------------
A scalable service will automatically grow in capacity to seamlessly meet any changes in demand.
A well-designed cloud-based operation will constantly monitor the health of its application stack and respond whenever preset performance metrics might soon go unmet.
The response might include automatically launching new server instances to add extra compute power to your existing cluster.
But it will probably also involve prepopulating those instances with the application data and configuration settings they’ll need to actually serve your application to your clients.
A large cloud provider like AWS will, for all practical purposes, have endless available capacity so the only practical limit to the maximum size of your application is your organization’s budget

ELASTICITY :
----------------
You can stretch an elastic band far beyond its resting state.
But part of what makes it truly elastic is the fact that, when you let go of it, it immediately returns to its original size.
The reason the word elastic is used in the names of so many AWS services (Elastic Compute Cloud, Elastic Load Balancing, Elastic Beanstalk, and so on) is because those services are built to be easily and automatically resized.
Generally, you set the maximum and minimum performance levels you want for your application, and the AWS service(s) you’re using will automatically add or remove resources to meet changing usage demands.
By way of illustration, a scalable ecommerce website could be configured to function using just a single server during low-demand periods, but any number of additional servers could be automatically brought online as demand spikes.
When demand drops back down, unused servers will be shut down automatically.
