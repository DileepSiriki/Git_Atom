AWS IDENTITY AND ACCESS MANAGEMENT : (IAM) //To control who is authenticated (signed in) and authorized (has permissions)to use resources.
==========================================
Tasks that require root user credentials:
  1. To change account details - email , name , root user password , root user access keys .
  2. View Tax info (unless billing IAM is created)
  3. Close your AWS ACCOUNT
  4. Change AWS support plans

AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources.
You use IAM to control who is authenticated (signed in) and authorized (has permissions)to use resources.
  -> Share access to your account without sharing your credentials
  -> Provide granular permissions to either an ec2 or S3 (to both users and tools)
  -> Also use MFA along with credential-
  -> Temporary creds to users using federations and Cross Account access

         -------------------------------------------------------------------------
        |                    |--> Group ADMINISTARTORS  --> user1, user2          |
        | ROOT ACCOUNT --->  |--> Group DEVELOPERS      --> user3                 |
        |                    |--> Group TESTERS         --> user4, user5, user6   |
         -------------------------------------------------------------------------

       PASSWORD POLICIES :
          Go to IAM -> Left section -> Account Settings -> Password Policies (edit / create / delete)
          First we need to attach password policy to IAM Admin to give him access to update password Policies.

GROUP :
--------
  Group is a collection of users who have similar responsibilities.
  Each group has multiple users. Each user can be in more than one group,
  You can't put groups inside other groups. You use policies to grant permissions to groups.

USERS :
----------
  An IAM user is an entity that you create in AWS.
  The IAM user represents the person or service who uses the IAM user to interact with AWS.
  A primary use for IAM users is to give people the ability to sign in to the AWS Management Console for interactive tasks and to make programmatic requests to AWS services using the API or CLI
  A user in AWS consists of a name, a password to sign into the AWS Management Console, and up to two access keys that can be used with the API or CLI
  To rename a user we can use only CLI . But we can delete from console and CLI as well.
  If the user has a permissions boundary, then you cannot add more permissions/policies to a user than are allowed by the permissions boundary.

POLICIES :
-----------
  IDENTITY-BASED Policies are permissions policies that you attach to an IAM identity, such as an IAM user, group, or role.

      MANAGED POLICIES : Control what actions the identity can perform, on which resources, and under what conditions.
                AWS MANAGED      --> Default policies in AWS
                CUSTOMER MANAGED --> Customer Created by editing fields in Aws Policies.

      INLINE POLICIES  : Policies that you create and manage and that are embedded directly into a single user, group, or role.
                         Used when you want to assign a policy directly to a single user.

  RESOURCE-BASED Policies are permissions policies that you attach to a resource such as an  Amazon S3 bucket or an IAM role trust policy.

  A policy once created , can be attached to either a USER or a GROUP or a ROLE!!
  Go to -> policies -> select the policy (click the circle on left) -> policy actions (on top) -> attach -> Select User/group to add .
  OR -> Select user/group -> Permissions -> Attach Policy .
  We use ARN of roles in policies to have effect to that particular role.

      POLICIES  >---> Identity Based  >-----> Managed  >--------> AWS Managed
               |                     |                |
               |                     |                 >--------> Customer Managed
               |                      >-----> Inline
                >---> Resource Based

ROLES : // Instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.
        // Delegation - Federation
-----------
  An IAM role is very similar to a user, in that it is an identity with permission policies that determine what the identity can and cannot do in AWS.
  However, a role does not have any credentials (password or access keys) associated with it.
  Instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.
  An IAM role is an AWS Identity and Access Management (IAM) entity with permissions to make AWS service requests.
  IAM roles cannot make direct requests to AWS services;
  They are meant to be assumed by authorized entities, such as IAM users, applications, or AWS services such as EC2.

  Roles can be used by the following:
      • An IAM user in the same AWS account as the role
      • An IAM user in a different AWS account than the role
      • A web service offered by AWS such as Amazon Elastic Compute Cloud (Amazon EC2)
      • An external user authenticated by an external identity provider (IdP) service that is compatible with SAML 2.0 or OpenID Connect, or a custom-built identity broker.

  DELEGATION involves setting up a trust between two accounts.
  The first is the account that owns the resource (the trusting account).
  The second is the account that contains the users that need to access the resource(the trusted account).
  The trusted and trusting accounts can be any of the following:
      • The same account.
      • Separate accounts that are both under your organization's control.
      • Two accounts owned by different organizations.

  FEDERATION involves Creation of a trust relationship between an external identity provider and AWS.
  Users can sign in to a web identity provider, such as Login with Amazon, Facebook, Google, or any IdP that is compatible with OpenID Connect (OIDC).

SWITCHING ROLES : (click on account name and at the bottom , find "CHANGE ROLE")
------------------------------------------------------------------------------------
      You cannot switch to a role when you are signed in as the AWS account root user.
      We need to SWITCH ROLES to get those permissions defined in the role.
      Switching roles using the AWS Management Console works only with accounts that do not require an ExternalId.
      For example, assume that you grant access to your account to a third party and require an ExternalId in a Condition element in your permissions policy. In thatcase, the third party can access your account only by using the AWS API or a command line tool.The third party cannot use the console because it cannot supply a value for ExternalId
        There are two ways that David can use to enter the Switch Role page:
            • David receives a link from his administrator that points to a pre-defined Switch Role configuration.
              The link is provided to the administrator on the final page of the Create role wizard or on the Role Summary page for a cross-account role.
              Choosing this link takes David to the Switch Role page with the Account ID and Role name fields already filled in.
              All David needs to do is choose Switch Role and he's done.
            • The administrator does not send the link in email, but instead sends the Account ID number and Role Name values.
              David must manually type them to switch roles.
     ASSUME ROLE : (AWS API)When David needs to make an update to the Production account from code, he makes an AssumeRolecall to assume the UpdateApp role.
     The call returns temporary credentials that he can use to access the productionapp bucket in the Production account.
     With those credentials, David can make API calls to update the production app bucket.

TEMPORARY CREDENTIALS IN IAM :
--------------------------
  Temporary credentials are primarily used with IAM roles, but there are also other uses.
  You can request temporary credentials that have a more restricted set of permissions than your standard IAM user.
  This prevents you from accidentally performing tasks that are not permitted by the more restricted credentials.
  A benefit of temporary credentials is that they expire automatically after a set period of time.
  You have control over the duration that the credentials are valid.

   When to create an IAM user (instead of a role):
     You created an AWS account and you're the only person who works in your account.
     Other people in your group need to work in your AWS account, and your group is using no other identity mechanism.

  When to create an IAM role (instead of a user):
     You're creating an application that runs on an Amazon Elastic Compute Cloud (Amazon EC2) instance and that application makes requests to AWS.
     You're creating an app that runs on a mobile phone and that makes requests to AWS.

  AWS SECURITY TOKEN SERVICE [ STS ] : -> Temporary Creds Using ROLES
  ---------------------------------------
  It is a web service that enables you to request temporary, limited-privilege credentials for AWS Identity and Access Management (IAM) users or for users that you authenticate (federated users).
  You can use the STS to create and provide trusted users (Federated Users) with temporary security credentials that can control access to your AWS resources.
  By default, it is available as a global service, and all AWS STS requests go to a single endpoint at https://sts.amazonaws.com.
  Temporary security credentials work almost identically to the long-term access key credentials that your IAM users can use, with the following differences:

  1. Temporary security credentials are short-term, as the name implies. They can be configured to last for anywhere from a few minutes to several hours.
     After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them

  2. Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when requested.
     When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has permissions to do so.

  These differences lead to the following advantages for using temporary credentials:

  1. You do not have to distribute or embed long-term AWS security credentials with an application.

  2. You can provide access to your AWS resources to users without having to define an AWS identity for them.
     Temporary credentials are the basis for roles and identity federation.

  3. The temporary security credentials have a limited lifetime, so you do not have to rotate them or explicitly revoke them when they're no longer needed.
     After temporary security credentials expire, they cannot be reused. You can specify how long the credentials are valid, up to a maximum limit.

  You can manage your user identities in an external system outside of AWS and grant users who sign in from those systems access to perform AWS tasks and access your AWS resources.
  IAM supports two types of identity federation. In both cases, the identities are stored outside of AWS. The distinction is where the external system resides—in your data center or an external third party on the web.

  --> Enterprise identity federation :
      You can authenticate users in your organization's network, and then provide those users access to AWS without creating new AWS identities for them and requiring them to sign in with a separate user name and password.
      This is known as the single sign-on (SSO) approach to temporary access.

  --> Web identity federation :
      You can let users sign in using a well-known third party identity provider such as Login with Amazon, Facebook, Google, or any OpenID Connect (OIDC) 2.0 compatible provider.
      You can exchange the credentials from that provider for temporary permissions to use resources in your AWS account.
      AWS STS web identity federation supports Login with Amazon, Facebook, Google, and any OpenID Connect (OIDC)-compatible identity provider.


TAGS : --> USED IN RESOURCE GROUPS [ grouping resources ] // 12_Resource_groups //metadata for organizing your AWS resources.
-------
    IAM tags are key-value pairs you can add to your user. Tags are words or phrases that act as metadata that you can use to identify and organize your AWS resources.
    Tags can include user information, such as an email address, or can be descriptive, such as a job title.
    You can use the tags to organize, track, or control access for this user
    Tag key–value pairs are not case sensitive, but case is preserved. This means that you cannot have separate Department and department tag keys.
    If you have tagged a user with the Department=foo tag and you add the department=bar tag, it replaces the first tag. A second tag is not added.
     • You cannot create a tag key or value that begins with the text aws:. This tag prefix is reserved for AWS internal use.
     • You can create a tag with an empty value such as phone Number = . You cannot create an empty tag key.

    Tags are key and value pairs that act as metadata for organizing your AWS resources.
    With most AWS resources, you have the option of adding tags when you create the resource, whether it's an Amazon EC2 instance, an Amazon S3 bucket, or other resource.
    However, you can also add tags to multiple, supported resources at once by using Tag Editor.
    TAG EDITOR : AWS -> RSOURCE GRPOUPS -> TAG EDITOR

ARN : AMAZOAN RESOURCE NAMES
------------------------------
    Amazon Resource Names (ARNs) uniquely identify AWS resources.
    We require an ARN when you need to specify a resource unambiguously across all of AWS, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls.
    Click on users/groups/roles -> click on the particular entry you want ARN -> we find ARN in the summery (TOP)

    arn:partition:service:region:account-id:resource-id
    arn:partition:service:region:account-id:resource-type/resource-id
    arn:partition:service:region:account-id:resource-type:resource-id

    PARTITION   == The partition in which the resource is located -> aws , aws-cn (china), aws-Govcloud USA
    SERVICE     == The service namespace that identifies the AWS product. For example, s3 for Amazon S3 resources.
    PARTITION   == The Region. For example, us-east-2 for US East (Ohio).
    ACCOUNT-ID  == The ID of the AWS account that owns the resource, without the hyphens. For example, 123456789012.
    RESOURCE-ID == The resource identifier. This part of the ARN can be the name or ID of the resource or a resource path.
                   For example, user/Bob for an IAM user or instance/i-1234567890abcdef0 for an EC2 instance.
                   Some resource identifiers include a parent resource (sub-resource-type/parent-resource/sub-resource) or a qualifier such as a version (resource-type:resource-name:qualifier).
    PATHS-IN-ARN : Resource ARNs can include a path. For example, in Amazon S3, the resource identifier is an object name that can include slashes (/) to form a path. Similarly, IAM user names and group names can include paths.
          If you are writing an IAM policy, you can specify all IAM users that have the path product_1234 using a wildcard as follows:
          arn:aws:iam::123456789012:user/Development/product_1234/*

          You can specify user/* to mean all users or group/* to mean all groups, as in the following examples:
          "Resource":"arn:aws:iam::123456789012:user/*"
          "Resource":"arn:aws:iam::123456789012:group/*"
 ALIASES :
 -----------
    Your AWS account can have only one alias. If you create a new alias for your AWS account, the new alias overwrites the previous alias, and the URL containing the previous alias stops working.•
    The account alias must be unique across all Amazon Web Services products. It must contain only digits, lowercase letters, and hyphens.

    FROM : https://Your_Account_ID.signin.aws.amazon.com/console TO : https://Your_Account_Alias.signin.aws.amazon.com/consol


MFA : MULTI FACTOR AUTHENTICATION
---------------------------------
    Go to -> account name -> My security credential -> MFA -> Assign MFA -> [Virtual app - Token - U2F Device]
    Download Google Authenticator -> scan -> enter OTP twice -> Authenticate


JSON - XML - YAML :-
--------------------
AWS uses JSON extensively for templates and policies .
Both JSON , YAML and XML can be used to receive data from a web server.
Comments are not allowed in JSON. JSON is a user-friendly substitute to XML as it is light weight and easy to read.
JSON - Java Script Object Notation
XML - Extensible Markup Language
YAML - Ain't Markup Language

      Json Example :
      ----------------

          {"employees":[
            { "firstName":"John", "lastName":"Doe" },
            { "firstName":"Anna", "lastName":"Smith" },
            { "firstName":"Peter", "lastName":"Jones" }
          ]}

      XML Example :
      ----------------

          <employees>
            <employee>
              <firstName>John</firstName> <lastName>Doe</lastName>
            </employee>
            <employee>
              <firstName>Anna</firstName> <lastName>Smith</lastName>
            </employee>
            <employee>
              <firstName>Peter</firstName> <lastName>Jones</lastName>
            </employee>
          </employees>

JSON is Like XML Because :
  Both JSON and XML are "self describing" (human readable)
  Both JSON and XML are hierarchical (values within values)
  Both JSON and XML can be parsed and used by lots of programming languages
  Both JSON and XML can be fetched with an XMLHttpRequest

JSON is Unlike XML Because :
  JSON doesn't use end tag
  JSON is shorter
  JSON is quicker to read and write
  JSON can use arrays

The biggest difference is:
 XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function.

JavaScript Object Notation, more commonly known by the acronym JSON, is an open data interchange format that is both human and machine-readable.
Despite the name JavaScript Object Notation, JSON is independent of any programming language and is a common API output in a wide variety of applications.
JSON represents data in two ways:

    Object : A collection of name-value (or key-value) pairs. An object is defined within left ({) and right (}) braces.
             Each name-value pair begins with the name, followed by a colon, followed by the value. Name-value pairs are comma separated.
    Array  : An ordered collection of values. An array is defined within left ([) and right (]) brackets.
             Items in the array are comma separated.

             {                                                                                                              -----
              creationDate : 25-10-2020,         <- Name-Value pairs & Comma seperated                                           |
              modifieddate : 01-12-2021,                                                                                         |
              name : Dileep ,                                                                                                    |
              employees:[                                             ---                                                        | <-- OBJECT
                         { "firstName":"John", "lastName":"Doe" },       |                                                       |
                         { "firstName":"Anna", "lastName":"Smith" },     |<- ARRAY - Containing objects with a name-value pair   |
                         { "firstName":"Peter", "lastName":"Jones" }     |                                                       |
                       ]                                              ---                                                        |
            }                                                                                                                ----


    Administrator  IAM Policy :
    ------------------------------
            {
              "Version": "2012-10-17",
              "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "*",
                                "Resource": "*"
                            }
                          ]
            }


YAML: It is a light-weight, human-readable data-representation language.
It is primarily designed to make the format easy to read while including complex features.
Since YAML is a superset of JSON, it can parse JSON with a YAML parser.
The extensions in YAML are .yaml or .yml.
Comments are denoted with a hash/number sign.

UNDERSTANDING JSON POLICY IN AWS :
-------------------------------------
http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-grammar.html
https://aws.amazon.com/blogs/security/back-to-school-understanding-the-iam-policy-grammar/

IAM policies use JSON syntax and a policy must use correct JSON syntax.

  --> Data is represented by a name-value pair separated by a colon.
      For example, “Effect”: “Allow” – in this example “Effect” is the name and “Allow” is the value.
  --> When data is made up of multiple name-value pairs, the name-value pairs are separated by commas.
  --> Braces, better known as “curly brackets” ({ }), denote an object. Objects can hold multiple name-value pairs.
  --> Square brackets ([ ]) denote an array that holds one or multiple values, with values separated by commas.


JSON policy documents are made up of elements. The elements are listed here in the general order you use them in a policy.
The order of the elements doesn't matter—for example, the Resource element can come before the Action element.



  USING ARRAYS IN POLICIES:
  ----------------------------
    JSON arrays are a powerful way to specify multiple values in a policy.
    For example, you can grant users access to multiple resources using an array.
    An array is denoted with square brackets ([ ]) and the items in the array are separated by commas.
    Remember, there is no comma after the last item in the array.
    For example, instead of writing two separate policies to grant access to different S3 buckets, you can write one policy and specify both S3 buckets in an array.
        {
         "Version": "2012-10-17",
         "Statement": [
           {
             "Effect": "Allow",
             "Action": [
               "s3:PutObject",
               "s3:GetObject",
               "s3:DeleteObject"
             ],
             "Resource": [
               "arn:aws:s3:::dev-bucket/*",
               "arn:aws:s3:::qa-bucket/*"
             ]
           }
         ]
       }

   POLICY BLOCKS AND STSTEMENTS :
   ----------------------------------
     If you dissect any policy, you will see they always start and end with a curly brace.
     These curly braces denote a policy block. Each policy must have exactly one policy block.
     Within the policy block, a single statement block is required. The statement block is where you specify your desired access.
     A statement block can be an array of statements to hold one or more statements.

     The curly braces on lines 1 and 14 express the policy block.
     Lines 3 through 13 specify the statement block.
     Note that the statement block  is shown as an array (with [ ]) even though it contains only one statement.
      1. {
      2.  "Version": "2012-10-17",
      3.  "Statement": [
      4.    {
      5.      "Effect": "Allow",
      6.      "Action": [
      7.        "s3:PutObject",
      8.        "s3:GetObject",
      9.        "s3:DeleteObject"
      10.      ],
      11.      "Resource": "arn:aws:s3:::dev-bucket/*"
      12.    }
      13.  ]
      14. }

    COMMON ERORS IN POLICY BLOCKS :
    ---------------------------------
    1. Multiple Policy blocks in one policy : The following policy is not valid because it contains more than one policy block.
                                               There should be only one top level pair of curly braces ({ }).
          {
           "Statement": [
             {
               "Effect":"Allow",
               "Action":"ec2:Describe*",
               "Resource":"*"
             }
           ]
          }
          {
           "Statement": [
             {
               "Effect": "Allow",
               "Action": "s3:*",
               "Resource": ["arn:aws:s3:::my-bucket/*"]
             }
           ]
         }

         To fix this policy, you can merge all the policy blocks together into a single array of statements, as in this example:

         {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "ec2:Describe*",
              "Resource":"*"
            },
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::my-bucket/*"
              ]
            }
          ]
        }

     2. Multiple statement blocks in one policy – This policy includes multiple statements blocks as separate items.
     {
      "Statement":[
       {
        "Effect":"Allow",
        "Action":["s3:ListBucket"],
        "Resource":["arn:aws:s3:::my-bucket"]
       }
      ],
      "Statement":[
       {
         "Effect":"Allow",
         "Action":["*"],
         "Resource":["arn:aws:s3:::my-bucket/*"]
       }
      ]
     }

    To fix the policy above, you can merge the statement blocks into an array, as shown in the following example:

      {
        "Statement": [
        {
         "Effect": "Allow",
         "Action": ["s3:ListBucket"],
         "Resource": ["arn:aws:s3:::my-bucket"]
        },
        {
         "Effect": "Allow",
         "Action": ["*"],
         "Resource": ["arn:aws:s3:::my-bucket/*"]
        }
        ]
      }

  ELEMENTS INCLDED IN A STATEMENT BLOCK :
  -----------------------------------------
  We refer to the data (i.e., name-value pairs) included inside the statement block as elements.
  It is important to note that only one element of each type can be specified in a statement block.
  However, you can use an array to specify multiple values in an element.
  There are five core types of elements that you can use in your policy. Some are required and some are optional.

  --> Effect     (Required) – Specifies whether the statement will explicitly allow (“Allow”) or deny (“Deny”) access.
                              These are the only two values that are valid in this element.
  --> Action*    (Required) – Describes the type of access that should be allowed or denied.
  --> Resource*  (Required) – Specifies the object or objects that the statement covers.
  --> Principal* (Optional) – Specifies the user, account, service, or other entity that is allowed or denied access to a resource.
                              Principals can only be used for resource-based policies.
                              For policies within IAM, the policy is attached to the Principal it applies to.
  --> Condition  (Optional) – Lets you specify conditions for when a policy is in effect.

  *NOTE : For ACTION , RESOURCE & PRINCIPAL ,
          You can also append a “Not” to this element type – which enables you to specify an exception to a list for the element.
          For example, “NotAction” will evaluate to all actions except those that you list.

      COMMON ERRORS IN STATEMENT BLOCKS :
      -------------------------------------
      1. Repeated elements in one statement block :
         This policy is incorrect because an element (in this case, Resource) appears multiple times in a statement.

        {
         "Statement": [
            {
             "Effect": "Allow",
             "Action": "s3:*",
             "Resource": "arn:aws:s3:::my-bucket",
             "Resource": "arn:aws:s3:::my-bucket/*"
           }
         ]
        }

      This is a perfect place to use an array to denote multiple resource values.
      The following example shows how to use an array to update this policy to comply with JSON syntax:

      {
       "Statement": [
          {
           "Effect": "Allow",
           "Action": "s3:*",
           "Resource": ["arn:aws:s3:::my-bucket",
            "arn:aws:s3:::my-bucket/*"
           ]
         }
       ]
      }

     2. Multiple conflicting elements in one statement block :
        This issue is a variation of the preceding one (multiple repeated elements), but with the added complication that the repeated elements are contradictory.
        The policy is invalid because there are multiple Effect elements in one statement block.
        Right now, this policy would be evaluated using the last Effect in the policy, which in this case would be “Allow”. However, you might want to “Deny” access.

         {
          "Statement": [
             {
              "Effect": "Deny",
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::my-bucket"
            }
          ]
         }

   In order to fix this policy, include only one Effect element, as in the following example:

         {
          "Statement": [
             {
              "Effect": "Deny",
              "Action": "s3:*",
              "Resource": "arn:aws:s3:::my-bucket"
            }
          ]
         }

   you cannot use both Action and NotAction in the same policy statement.
   Other pairs that are mutually exclusive include Principal/NotPrincipal and Resource/NotResource.

  VERSIONS IN POLICIES :
  ------------------------
  You may have noticed a version number in most policies. Here is what you need to know about the Version element in policies:
  --> The version specifies the policy language version used. It is not a version you create.
      Versions allow IAM to enhance the policy language while continuing to support existing policies.
  --> It is best practice to always specify the current version in your policies.
      At the time of publishing, this version is “2012-10-17”.
      This will enable you to use the most recent features in the policy language.
  --> If you have an older policy that uses version “2008-10-17,” it will continue to work.
      However, you will not be able to use newer features like policy variables in this policy.
      If you do not specify a version then it defaults to “2008-10-17.”

  IAM supports the following Version element values:
  --> 2012-10-17. This is the current version of the policy language, and you should always include a Version element and set it to 2012-10-17.
      Otherwise, you cannot use features such as policy variables that were introduced with this version.
  --> 2008-10-17. This was an earlier version of the policy language. You might see this version on older existing policies.
      Do not use this version for any new policies or when you update any existing policies.

  EX : ${aws:username} --> Policy variables

      COMMON ERRORS IN VERSIONING :
      -------------------------------
      1. Missing version number :
         The policy below is incorrect because there is no version specified and therefore the policy defaults to version “2008-10-17,” which does not support policy variables.

        {
          "Statement": [
            {
              "Action": [
                "iam:*AccessKey*"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:iam::accountid:user/${aws:username}"
              ]
            }
          ]
        }

        To enable policy variables, add the latest version, “2012-10-17”, to the policy.

        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "iam:*AccessKey*"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:iam::accountid:user/${aws:username}"
              ]
            }
          ]
        }

 OTHER EXAMPLES OF ELEMENTS IN JSON POLICY :
 --------------------------------------------
 1. NotPrincipal:
     {
        "Version": "2012-10-17",
        "Statement": [{
            "Effect": "Deny",
            "NotPrincipal": {"AWS": [
                "arn:aws:iam::444455556666:user/Bob",
                "arn:aws:iam::444455556666:root"
            ]},
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::BUCKETNAME",
                "arn:aws:s3:::BUCKETNAME/*"
            ]
        }]
    }

 2. Action : The Action element describes the specific action or actions that will be allowed or denied.
    "Action": "sqs:SendMessage"
    "Action": "ec2:StartInstances"
    "Action": "iam:ChangePassword"
    "Action": [ "sqs:SendMessage", "sqs:ReceiveMessage", "ec2:StartInstances", "iam:ChangePassword", "s3:GetObject" ]
    "Action": "s3:*"
    "Action": "iam:*AccessKey*" --> CreateAccessKey, DeleteAccessKey, ListAccessKeys, and UpdateAccessKey.

    NotAction is an advanced policy element that explicitly matches everything except the specified list of actions.
    Using NotAction can result in a shorter policy by listing only a few actions that should not match, rather than including a long list of actions that will match.
    When using NotAction, you should keep in mind that actions specified in this element are the only actions in that are limited.
    This, in turn, means that all of the applicable actions or services that are not listed are allowed if you use the Allow effect
