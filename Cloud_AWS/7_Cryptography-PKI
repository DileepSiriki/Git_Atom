
INTRODUCTION :
-----------------
AWS provides CRYPTOGRAPHIC and PKI Services listed below .
At the end of the topic , a detailed description of how AWS KMS [key management service ] is used with CMK [ customer master key ] is presented .

CRYPTOGRAPHY SERVICES :
----------------------------
AWS provides multiple services that you can use to help protect your data at rest or in transit.
Cryptography is the practice of protecting information through the use of coded algorithms, hashes, and signatures.

ENCRYPTION     is the process of converting plaintext readable data to an unreadable form, known as ciphertext, to protect it. Encryption algorithms are either symmetric or asymmetric.
CIPHER TEXT    is the encrypted text generated by an encryption algorithm . It is unreadable.
DECRYPTION     is the process of turning ciphertext back into plaintext .
BLOCK CYPHER   is an algorithm that operates on fixed-length blocks of data, one block at a time. It is slower .
STREAM CYPHER  is an algorithm that operates on one bit at a time. It is quicker.

SYMMETRIC ENCRYPTION    uses the same secret key to perform both the encryption and decryption processes.
ASYMMETRIC ENCRYPTION   also known as public-key encryption, uses two keys, a public key for encryption and a corresponding private key for decryption.
CLIENT SIDE ENCRYPTION  is encrypting data at or close to its source, such as encrypting data in the application or service that generates it.
SERVER SIDE ENCRYPTION  is encrypting data at its destination, that is, the application or service that receives it.

  -->  Most AWS services that store or manage customer data offer a server-side encryption option or perform server-side encryption of your data by default.
       These services transparently encrypt your data before writing it to disk and transparently decrypt it when you access it.
       Most AWS services that support server-side encryption are integrated with AWS Key Management Service (AWS KMS) to protect the encryption keys that protect your data.
  -->  AWS also supports client-side encryption libraries, such as the AWS Encryption SDK ,the DynamoDB Encryption Client , and Amazon S3 client-side encryption.


CRYPTOGRAPHIC ALGORITHM :
It is a formula or procedure that converts a plaintext message into a ciphertext.
Modern algorithms use advanced mathematics and one or more encryption keys to make it relatively easy to encrypt a message but virtually impossible to decrypt it without knowing the keys.
Algorithms generally require a source of randomness. They may also involve multiple layers of encryption, repeated permutation, and insertion of sequential one-time values to prevent attacks.
   --> SYMMETRIC ALGORTHM  -> also called shared key, shared secret, and secret key encryption.
   --> ASYMMETRIC ALGORTHM -> also called public key encryption which centers around the idea of a private key and a corresponding (but different) public key.

SYMMETRIC ALGORTHM : // Shared Key algorithm
An encryption scheme is called symmetric if it uses the same key to both encrypt and decrypt a message.
Technically, the encryption key e and decryption key d don't have to be exactly the same.
All that's required is that it's computationally trivial to determine d when you know e and e when you know d.
However, in most practical symmetric encryption schemes, e and d are the same.
Symmetric key encryption requires that all intended message recipients have access to the shared key.
Therefore, a secure communication channel must be established among the participants so that the key can be transmitted to each along with the ciphertext.
This presents practical problems and limits the use of direct symmetric key exchange.
AWS cryptographic tools and services support two widely used symmetric algorithms. Both are block ciphers.

   • AES        – Advanced Encryption Standard (AES) with 128-, 192-, or 256-bit keys.
                  AES is often combined with Galois/Counter Mode (GCM) and known as AES-GCM.
   • TRIPLE DES – Triple DES (3DES) uses three 56-bit keys. The scheme works on a block of data by splitting it in two and iteratively applying arbitrary round functions derived from an initial function.
                  Triple DES uses 48 rounds to encrypt a block of data.

ASYMMETRIC ALGORTHM : // Public Key algorithm
AWS services typically support RSA and Elliptic Curve Cryptography (ECC) asymmetric algorithms.
An encryption scheme is called asymmetric if it uses one key — the public key — to encrypt and a different, but mathematically related, key — the private key — to decrypt.
It must be computationally infeasible to determine the private key if the only thing one knows is the public key.
Therefore, the public key can be distributed publicly while the private key is kept secret and secure.
Together the keys are referred to as a key pair.
PUBLIC AND PRIVATE KEYS  are used to protect data in an asymmetric encryption scheme.

    • RSA        – Rivest-Shamir-Adleman encryption
    • ECC        – Elliptic Curve Cryptography

  --> Public and private keys are algorithmically generated in tandem :
      The public key is distributed to multiple trusted entities, and one of its paired private keys is distributed to a single entity.
      This way, a message can be authenticated because the public key signature proves that a trusted entity encrypted and sent it.
      The message contents can also be secured so that only a private key holder can decrypt it.


1. AWS CLOUD-HSM :
HARDWARE SECURITY MODULE is a computing device that performs cryptographic operations and provides secure storage for cryptographic keys.
AWS CloudHSM organizes HSMs in clusters, which are automatically synchronized collections of HSMs within a given Availability Zone (AZ).
If you want a managed service for creating and controlling encryption keys, but do not want or need to operate your own HSM, consider using AWS Key Management Service.
When you use an HSM from AWS CloudHSM, you can perform a variety of cryptographic tasks:
    • Generate, store, import, export, and manage cryptographic keys, including symmetric keys and asymmetric key pairs.
    • Use symmetric and asymmetric algorithms to encrypt and decrypt data.
    • Use cryptographic hash functions to compute message digests and hash-based message authentication codes (HMACs).
    • Cryptographically sign data (including code signing) and verify signatures.
    • Generate cryptographically secure random data.

    WHEN TO USE AWS-CLOUD HSM AND WHEN TO USE KMS :
    -----------------------------------------------
    Use AWS CloudHSM when you need to manage the HSMs that generate and store your encryption keys.
    In AWS CloudHSM, you create and manage HSMs, including creating users and setting their permissions.
    You also create the symmetric keys and asymmetric key pairs that the HSM stores.
    If you need to secure your encryption keys in a service backed by FIPS-validated HSMs, but you do not need to manage the HSM, try AWS Key Management Service.

2. AWS KEY MANAGEMENT SERVICE :
It provides tools for generating master keys and other data keys.
AWS KMS also interacts with many other AWS services to encrypt their service-specific data.
It is an AWS service that makes it easy for you to create and control the encryption keys that are used to encrypt your data.
The customer master keys (CMKs) that you create in AWS KMS are protected by FIPS 140-2 validated cryptographic modules.
They never leave AWS KMS unencrypted. To use or manage your CMKs, you interact with AWS KMS.
AWS KMS is also integrated with AWS CloudTrail to deliver detailed logs of all cryptographic operations that use your CMKs and management operations that change their configuration.

  ****VIMP :
  AWS KMS protects the customer master keys that protect your data.
  In the classic scenario, you encrypt your data using data key A. But you need to protect data key A, so you encrypt data key A by using data key B.
  Now data key B is vulnerable, so you encrypt it by using data key C. And, so on.
  This encryption technique, which is called envelope encryption, always leaves one last encryption key unencrypted so you can decrypt your encryption keys and data.
  That last unencrypted (or plaintext) key is called a master key.

AWS KMS customer master keys (CMKs) are 256-bit Advanced Encryption Standard (AES) symmetric keys that are not exportable. They spend their entire lifecycle entirely within AWS KMS.
You can also create asymmetric RSA or elliptic curve (ECC) CMKs backed by asymmetric key pairs. The public key in each asymmetric CMK is exportable, but the private key remains within AWS KMS.
You can use your CMKs to encrypt small amounts of data (up to 4096 bytes). However, CMKs are typically used to generate, encrypt, and decrypt the data keys that encrypt your data.
Unlike CMKs, data keys can encrypt data of any size and format, including streamed data.

AWS KMS does not store or manage data keys, and you cannot use KMS to encrypt or decrypt with data keys. To use data keys to encrypt and decrypt, use the AWS Encryption SDK.
AWS KMS CMKs are backed by FIPS-validated hardware service modules (HSMs) that KMS manages. To manage your own HSMs, use AWS CloudHSM.


3. AWS ENCRYPTION SDK :
The AWS Encryption SDK is a client-side encryption library to help you implement best-practice encryption and decryption in any application even if you're not a cryptography expert.
The AWS Encryption SDK works on all types of data. Every successful call to encrypt returns a single portable, formatted encrypted message that contains metadata and the message ciphertext.
The AWS Encryption SDK is developed as an open source project.
It is available in multiple programming languages, including a command line interface that is supported on Linux, macOS, and Windows.
All implementations are interoperable. For example, you can encrypt your data with the Java library and decrypt it with the Python library. Or you can encrypt data with the C library and decrypt it with the CLI.

4. AMAZON DYNAMO-DB ENCRYPTION CLIENT :
The Amazon DynamoDB Encryption Client is a client-side encryption library that helps you to protect your table data before you send it to Amazon DynamoDB.
Encrypting your sensitive data in transit and at rest helps ensure that your plaintext data isn’t available to any third party, including AWS.
It encrypts the attribute values in each table item using a unique encryption key.
It then signs the item to protect it against unauthorized changes, such as adding or deleting attributes or swapping encrypted values.
It also verifies and decrypts them when you retrieve them.
It is an open source project and is available in JAVA and python and is interoperable.

5. AMAZON S3 CLIENT SIDE ENCRYPTION :
  OPTION-1 : Using a CMK stored in AWS KMS :
        When uploading an object —
            Using the CMK ID, the client first sends a request to AWS KMS for a CMK that it can use to encrypt your object data.
            The client obtains a unique data key for each object that it uploads.
            AWS KMS returns two versions of a randomly generated data key:
              --> A plaintext version of the data key that the client uses to encrypt the object data.
              --> A cipher blob of the same data key that the client uploads to Amazon S3 as object metadata.

        When downloading an object —
        The client downloads the encrypted object from Amazon S3 along with the cipher blob version of the data key stored as object metadata.
        The client then sends the cipher blob to AWS KMS to get the plaintext version of the data key so that it can decrypt the object data

  OPTION-2 : Using a master key stored within your application
        When uploading an object —
            You provide a client-side master key to the Amazon S3 encryption client.
            The client uses the master key only to encrypt the data encryption key that it generates randomly.
              --> The Amazon S3 encryption client generates a one-time-use symmetric key (also known as a data encryption key or data key) locally.
                  It uses the data key to encrypt the data of a single Amazon S3 object. The client generates a separate data key for each object.
              --> The client encrypts the data encryption key using the master key that you provide.
                  The client uploads the encrypted data key and its material description as part of the object metadata.
                  The client uses the material description to determine which client-side master key to use for decryption.
              --> The client uploads the encrypted data to Amazon S3 and saves the encrypted data key as object metadata (x-amz-meta-x-amz-key) in Amazon S3.

        When downloading an object —
        The client downloads the encrypted object from Amazon S3.
        Using the material description from the object's metadata, the client determines which master key to use to decrypt the data key.
        The client uses that master key to decrypt the data key and then uses the data key to decrypt the object.

NOTE :
Your client-side master keys and your unencrypted data are never sent to AWS. It's important that you safely manage your encryption keys. If you lose them, you can't decrypt your data.
The client-side master key that you provide can be either a symmetric key or a public/private key pair.

5. AWS SECRET MANAGER : Documented in SECURITY-IDENTITY-COMPLIANCE
provides encryption and rotation of encrypted secrets used with AWS-supported databases.

To protect DynamoDB table items before you send them to DynamoDB, use the DynamoDB Encryption Client.
To protect Amazon S3 objects before you send them to an Amazon S3 bucket, use Amazon S3 client-side encryption. Amazon S3 also offers server-side encryption.
To protect all other types of data at their source, use the AWS Encryption SDK.



PKI SERVICES :
-----------------
It is a system of hardware, software, people, policies, documents, and procedures.
It includes the creation, issuance, management, distribution, usage, storage, and revocation of digital certificates.

These certificates are then used to authenticate the identities of various actors across the data transfer process.
They also assure that the data being moved between these actors is secured and encrypted in a way that both parties can decrypt.
This way, information is only being sent to and received from known and trusted sources, and both parties are assured of the information's integrity.
PKI trust is established by a certificate authority, which is an organization or governing body that can issue certificates and verify the identity of the certificate requestor.

AWS offers multiple PKI services to help you easily and securely manage your certificate infrastructure.
    --> AWS Certificate Manager (ACM) is used to generate, issue, and manage public SSL/TLSA certificates for use with your AWS based websites and applications.
    --> AWS Certificate Manager Private Certificate Authority (ACM PCA) is a managed private certificate authority (CA) service for managing your CA infrastructure and your private certificates.

CERTIFICATE AUTHORITY :  // Public - Universally valid // Private - inside an organization
-------------------------
A trusted third party that issues (and, if necessary, revokes) digital certificates.
The most common type of certificate is based on the ISO X.509 standard.
An X.509 certificate affirms the identity of the certificate subject and binds that identity to a public key.
The subject can be a user, an application, a computer, or other device.
The CA signs a certificate  by hashing its contents and then encrypting the hash with the private key corresponding to the public key in the certificate.
A client application such as a web browser that needs to affirm the identity of a subject uses the public key to decrypt the certificate signature.
It then hashes the certificate contents and compares the hashed value to the decrypted signature to determine whether they match.
A CA can be either public or private:
    • Public CA  — A commercial, non-profit, or government entity that issues certificates that are universally valid.
    • Private CA — An entity within an organization that issues certificate that are valid only inside the organization.

CERTIFICATE AUTHORITY CERTIFICATE :
------------------------------------
A certificate that affirms the identity of the certificate authority (CA) and binds it to the public key that is contained in the certificate.

CERTIFICATE SIGNATURE : // Digital Signature
-------------------------
An encrypted hash over a certificate that affirms the integrity of the certificate data. The encrypted hash is known as a digital signature.
Your private CA creates a signature by using a hash function(such as SHA256) over the variable-sized certificate content to produce an irreversible fixed-size data string.
The fixed data is called a hash. The CA then encrypts the hash value with its private key and concatenates the encrypted hash with the certificate.
To validate a signed certificate, a client application uses the CA public key to decrypt the signature.
The client then uses the same signing algorithm that the CA used to compute a hash over the rest of the certificate.

PRIVATE CERTIFICATE is an SSL/TLS certificate that authenticates the identity of a resource in a private PKI. Trust in a private certificate rests on the integrity of the private certificate authority (CA)that issued it.
PUBLIC CERTIFICATE  is an SSL/TLS certificate that authenticates the identity of a resource in a public PKI. Trust in a public certificate rests on the integrity of the public certificate authority (CA)that issued it

SECURE SOCKET LAYER [ SSL ] & TRANSPORT LAYER SECURITY [ TLS ] :
-------------------------------------------------------------------
Cryptographic protocols that provide communication security over a computer network.
TLS is the successor of SSL. They both use X.509 certificates to authenticate the server.
Both protocols negotiate a symmetric key between the client and the server that is used to encrypt data flowing between the two entities.

SSL/TLS SERVER CERTIFICATE :
-----------------------------
An X.509 version 3 data structure that binds the public key in the certificate to the subject of the certificate and is signed by a certificate authority (CA).
An SSL/TLS certificate contains the name of the server, the validity period, the public key, the signature algorithm, and more.
Server certificates are required for HTTPS transactions to authenticate a server.

TRUST :
---------
The reliability of a website's identity as established by verifying the website's certificate.
Browsers trust only a small number of certificates known as CA root certificates.
A trusted third party, known as a certificate authority (CA), validates the identity of the website and issues a signed digital certificate to the website's operator.
The browser can then check the digital signature to validate the identity of the website.
If validation is successful, the browser displays a lock icon in the address bar.

6. AWS CERTIFICATE MANAGER - ACM :  --> OUTSIDE AWS
It is used to generate, issue, and manage public and private SSL/TLS certificates for use with your AWS based websites and applications.
These public certificates verify the identity and authenticity of your web server and the ownership of your public keys.
In doing so, public certificates initiate a trusted, encrypted connection between you and your users.

6. AWS CERTIFICATE MANAGER PRIVATE CERTIFICATE AUTHORITY - ACM PCA:  --> INSIDE AWS
It is for enterprise customers building a public key infrastructure (PKI)inside the AWS cloud and intended for private use within an organization.
It is a managed private certificate authority (CA) service with which you can manage your CA infrastructure and your private certificates.
With private certificates you can authenticate resources inside an organization.
Private certificates allow entities like users, web servers, VPN users, internal API endpoints, and IoT devices to prove their identity and establish encrypted communications channels.

7. AWS SIGNER : --> CODE SIGNING
AWS Signer is a fully managed code-signing service to ensure the trust and integrity of your code.
Organizations validate code against a digital signature to confirm that the code is unaltered and from a trusted publisher.
With AWS Signer, your security administrators have a single place to define your signing environment, including what AWS Identity and Access Management (IAM) role can sign code and in what regions.
AWS Signer manages the code-signing certificate public and private keys and enables central management of the code-signing lifecycle.
  --> With Code Signing for AWS Lambda, you can ensure that only trusted code runs in your Lambda functions.
  --> With Code Signing for AWS IoT, you can sign code that you create for IoT devices supported by Amazon Free RTOS and AWS IoT device management.

8. AWS CRYPTO TOOLS :
Cryptography is hard to do safely and correctly.
The AWS Crypto Tools libraries are designed to help everyone do cryptography right, even without special expertise.
Our client-side encryption libraries help you to protect your sensitive data at its source using secure cryptographic algorithms, envelope encryption, and signing.
It is a part of AWS ENCRYPTION SDK .


##################################################################################################################
##################################################################################################################
AWS KEY MANAGEMENT SERVICE  & CUSTOMER MASTER KEYS  :
##################################################################################################################
##################################################################################################################

KEY MANAGEMENT SERVICE : KMS <--> CUSTOMER MASTER KEYS [ CMK ]
---------------------------
It is a managed service that makes it easy for you to create and control customer master keys (CMKs), the encryption keys used to encrypt your data.
AWS KMS CMKs are protected by hardware security modules (HSMs).
AWS KMS is integrated with most other AWS services that encrypt your data.
AWS KMS is also integrated with AWS CloudTrail to log use of your CMKs for auditing, regulatory, and compliance needs.
You can use your CMKs in cryptographic operations .
KMS enables you to maintain control over who can use your customer master keys and gain access to your encrypted data.

      • Encrypt, decrypt, and re-encrypt data with symmetric or asymmetric CMKs
      • Sign and verify messages with asymmetric CMKs
      • Generate exportable symmetric data keys and asymmetric data key pairs
      • Generate random numbers suitable for cryptographic applications

AWS KMS is integrated with AWS CloudTrail, a service that delivers log files to an Amazon S3 bucket that you designate.
By using CloudTrail you can monitor and investigate how and when your CMKs have been used and by whom.

CUSTOMER MASTER KEYS CMK's:
-------------------------
#### AWS OWNED CMK _ AWS MANAGED CMK _ CUSTOMER MANAGED CMK
A customer master key (CMK) is a logical representation of a master key.
The CMK includes metadata, such as the key ID, creation date, description, and key state.
The CMK also contains the key material used to encrypt and decrypt data.
AWS KMS supports symmetric and asymmetric CMKs.

  SYMMETRIC KEYS :
  --> A symmetric CMK represents a 256-bit key that is used for encryption and decryption.
  --> both encryption and decryption is done by same key .

  ASYMMETRIC KEYS :
  --> An asymmetric CMK represents an RSA key pair that is used for encryption and decryption or signing and verification (but not both).
  --> This has a Public and a private key pair.

CMKs are created in AWS KMS. Symmetric CMKs and the private keys of asymmetric CMKs never leave AWS KMS unencrypted.
Some AWS services encrypt your data by default with an AWS owned CMK or an AWS managed CMK.
Other AWS services offer to encrypt your data under a customer managed CMK that you choose.

CUSTOMER MANAGED CMK :
-----------------------
Customer managed CMKs are CMKs in your AWS account that you create, own, and manage.
You have full control over these CMKs, including establishing and maintaining.
Customer managed CMKs appear on the Customer managed keys page of the AWS Management Console for AWS KMS.
For customer managed CMKs, the value of the KeyManager field of the DescribeKey response is CUSTOMER

AWS MANAGED CMK :
-----------------
AWS managed CMKs are CMKs in your account that are created, managed, and used on your behalf by an AWS service that is integrated with AWS KMS.
Some AWS services support only an AWS managed CMK. Others use an AWS owned CMK or offer you a choice of CMKs.
you cannot manage these CMKs, rotate them, or change their key policies.
And, you cannot use AWS managed CMKs in cryptographic operations directly; the service that creates them uses them on your behalf.

AWS OWNED CMK :
-----------------
AWS owned CMKs are a collection of CMKs that an AWS service owns and manages for use in multiple AWS accounts.
Although AWS owned CMKs are not in your AWS account, an AWS service can use its AWS owned CMKs to protect the resources in your account.
You cannot view, use, track, or audit them. You are not charged a monthly fee or usage fee for AWS owned CMKs

##### For internal use , AWS uses the CUSTOMER MANAGED CMK , AWS MANAGED CMK and AWS OWNED CMK
##### AWS KMS also provides SYMMETRIC DATA KEYS  and ASYMETRIC DATA KEY PAIRS that are designed to be used for client-side cryptography outside of AWS KMS.

AWS KMS - customer master keys (CMKs) are 256-bit Advanced Encryption Standard (AES) symmetric keys that are not exportable. They spend their entire lifecycle entirely within AWS KMS.
You can also create asymmetric RSA or elliptic curve (ECC) CMKs backed by asymmetric key pairs. The public key in each asymmetric CMK is exportable, but the private key remains within AWS KMS.
You can use your CMKs to encrypt small amounts of data (up to 4096 bytes). However, CMKs are typically used to generate, encrypt, and decrypt the data keys that encrypt your data.
Unlike CMKs, data keys can encrypt data of any size and format, including streamed data.

SYMMETRIC DATA KEYS : View Reference pics available at cloud_AWS/0_Reference_pics.
----------------------
Data keys are encryption keys that you can use to encrypt data, including large amounts of data and other data encryption keys.
You can use AWS KMS customer master keys (CMKs) to generate, encrypt, and decrypt data keys.
However, AWS KMS does not store, manage, or track your data keys, or perform cryptographic operations with data keys.
You must use and manage data keys outside of AWS KMS.

      CMK --> Encryption Algorithm --> 1. Plain text data key   |
                                       2. Encrypted data key    | --> Called DATA KEYS

      First we generate a data key used for encryption and decryption from the CMK . It gives us both Plain text data key & Encrypted data key

    ENCRYPT :
    -----------
    AWS KMS cannot use a data key to encrypt data.
    But you can use the data key outside of KMS, such as by using OpenSSL or a cryptographic library like the AWS Encryption SDK.
    After using the plaintext data key to encrypt data, remove it from memory as soon as possible.
    You can safely store the encrypted data key with the encrypted data so it is available to decrypt the data.

      Plain text --> [[ Plain text data key + Encryption Algorithm ]] --> Cypher text .
      After we generate a plain text data key from a CMK , we use it to encrypt the plain text.
      Now delete the Plain text data key immediately after encryption. The encrypted data key is stored in KMS .

      Encrypted data key --> [[ CMK + Decryption Algorithm ]] --> Plain text data key
      When we want to decrypt a text , we can then get the Encrypted data key from KMS and generate the plain text data key that can decrypt the data.

    DECRYPT :
    ----------
    To decrypt your data, pass the encrypted data key to the Decrypt operation.
    AWS KMS uses your CMK to decrypt the data key and then it returns the plaintext data key.
    Use the plaintext data key to decrypt your data and then remove the plaintext data key from memory as soon as possible.

    Cypher text --> [[ Plain text data key + decryption Algorithm ]] --> Plain text
    Now the plain text data key obtained from the above CMK , can be used to decrypt the cypher text.
    Now we can delete the plain text data key and generate it again from the encrypted data key when ever we want from the CMK.

ASYMETRIC DATA KEY PAIRS :
--------------------------
Data key pairs are asymmetric data keys that consist of a mathematically-related public key and private key.
They are designed to be used for client-side encryption and decryption or signing and verification outside of AWS KMS.
Unlike the data key pairs that tools like OpenSSL generate, AWS KMS protects the private key in each data key pair under a symmetric CMK in AWS KMS that you specify.
However, AWS KMS does not store, manage, or track your data key pairs, or perform cryptographic operations with data key pairs.
You must use and manage data key pairs outside of AWS KMS.

 AWS KMS supports the following types of data key pairs:
    • RSA key pairs: RSA_2048, RSA_3072, and RSA_4096   --> encrypt , decrypt & verify and sign
    • Elliptic curve key pairs, ECC_NIST_P256, ECC_NIST_P384, ECC_NIST_P521, and ECC_SECG_P256K1 --> Only verify and sign

    CMK --> Encryption Algorithm --> 1. Public key              |
                                     2. Encrypted private key   |  --> Called DATA KEY PAIRS
                                     3. Plain text private key  |
    First we generate public, encrypted private & plain text private keys used for encryption and decryption from the CMK .

    ENCRYPT :
    -----------
    When you encrypt with a data key pair, you use the public key of the pair to encrypt the data and the private key of the same pair to decrypt the data.
    Typically, data key pairs are used when many parties need to encrypt data that only the party that holds the private key can decrypt.

    Plain text --> [[ Public key + Encryption Algorithm ]] --> Cypher text .
    After we generate a public key from a CMK , we use it to encrypt the plain text.

    DECRYPT :
    ------------
    To decrypt your data, use the private key in the data key pair.
    For the operation to succeed, the public and private keys must be from the same data key pair, and you must use the same encryption algorithm.

    Cypher text --> [[ Plain text private key + decryption Algorithm ]] --> Plain text
    We can decrypt the cypher text from a plain text private key . we immediately delete the plain text private key after decryption.
    If we want to decrypt again, we can generate it from the encrypted private key using CMK.

    Encrypted private key --> [[ CMK + Decryption Algorithm ]] --> Plain text private key
    When we want to decrypt a text , we can then get the Encrypted private key from KMS and generate the plain text private key that can decrypt the data using CMK.


SIGN MESSAGES WITH DATA-KEY-PAIR :
----------------------------------
To generate a cryptographic signature for a message, use the private key in the data key pair.
Anyone with the public key can use it to verify that the message was signed with your private key and that it has not changed since it was signed.

If your private key is encrypted, pass the encrypted private key to the Decrypt operation.
AWS KMS uses your CMK to decrypt the encrypted private key and then it returns the plaintext private key.
Use the plaintext private key to generate the signature. Then remove the plaintext private key from memory as soon as possible

To sign a message, create a message digest using a cryptographic hash function, such as the "dgst" command in OpenSSL.
Then, pass your plaintext private key to the signing algorithm. The result is a signature that represents the contents of the message.
A message digest is a cryptographic hash function containing a string of digits created by a one-way hashing formula.
Message digests are designed to protect the integrity of a piece of data or media to detect changes and alterations to any part of a message.
The message digest is computed by a hash function and can be encrypted, forming a digital signature.

The message digest is sent with the message itself.
The sender can also generate a message digest and then encrypt the digest using the private key of an asymmetric key pair, forming a digital signature.
The signature must then be decrypted by the receiver, before comparing it with a locally generated digest.

SHA Algorithm - SHA is the acronym for Secure Hash Algorithm, used for hashing data and certificate files.
                Every piece of data produces a unique hash that is thoroughly non-duplicable by any other piece of data.
                The resulting digital signature is unique too as it depends on the hash that's generated out of the data.

              Plain text     --> [[ cryptographic hash function - SHA ]]           --> Original Message Digest also called a HASH
              Message Digest --> [[ Plain text private key + Signing Algorithm ]]  --> Signature also called DIGITAL SIGNATURE also called a CERTIFICATE

              ** We need to send both the Original Message Digest also called a HASH and the signature along with the message to the client .


VERIFY MESSAGES WITH DATA-KEY PAIR :
-------------------------------------
Anyone who has the public key in your data key pair can use it to verify the signature that you generated with your private key.
Verification confirms that an authorized user signed the message with the specified private key and signing algorithm, and the message hasn't changed since it was signed.
To be successful, the party verifying the signature must generate the same type of digest, use the same algorithm, and use the public key that corresponds to the private key used to sign the message.
Verification algorithm decrypts the signature to the message digest using public key and then compares the locally generated message digest to the generated message digest.

              Signature   --> [[ Public key  + Decryption Algorithm ]]    --> Generated Message Digest also called a generated HASH
              We generate the message digest from the signature using the public key.
              We then send the generated digest and the original digest to the VERIFICATION algorithm which verifies the integrity.

              Generated Message Digest + Original Message Digest --> [[ Verification Algorithm ]] --> TRUE or FALSE


ALIASES :
----------
An alias is a friendly name for a CMK. For example, you can refer to a CMK as test-key instead of1234abcd-12ab-34cd-56ef-1234567890ab.
Aliases make it easier to identify a CMK in the AWS Management Console. You can use an alias to identify a CMK in some AWS KMS operations.

CRYPTOGRAPHIC OPERATIONS :
--------------------------
In AWS KMS, cryptographic operations are API operations that use CMKs to protect data.
Because CMKs remain within AWS KMS, you must call AWS KMS to use a CMK in a cryptographic operation.
You cannot perform cryptographic operations in the AWS KMS console. Can only be done in CLI / SDK / POWERSHELL.

    Operation                                CMK_key_type           CMK_key_usage
    ---------------------------------------------------------------------------------------------------------
    ---------------------------------------------------------------------------------------------------------
    Decrypt                                  Any                    ENCRYPT_DECRYPT
    Encrypt                                  Any                    ENCRYPT_DECRYPT
    GenerateDataKey                          Symmetric              ENCRYPT_DECRYPT
    GenerateDataKeyPair                      Symmetric [1]          ENCRYPT_DECRYPT
    GenerateDataKeyPairWithoutPlaintext      Symmetric [1]          ENCRYPT_DECRYPT
    GenerateDataKeyWithoutPlaintext          Symmetric              ENCRYPT_DECRYPT
    GenerateRandom                           N/A                    N/A  --> This operation doesn't use a CMK
    ReEncrypt                                Any                    ENCRYPT_DECRYPT
    Sign                                     Asymmetric             SIGN_VERIFY
    Verify                                   Asymmetric             SIGN_VERIFY

[1] GenerateDataKeyPair and GenerateDataKeyPairWithoutPlaintext generate an asymmetricdata key pair that is protected by a symmetric CMK.

In the AWS KMS console, you can view and filter CMKs by their key ARN, key ID, or alias name, and sort by key ID and alias name.


==============================

AWS SECURITY TOKEN SERVICE [ STS ] : -> Temporary Creds Using ROLES // Also documented in IAM
---------------------------------------
AWS Security Token Service (AWS STS) is a web service that enables you to request temporary, limited-privilege credentials for AWS Identity and Access Management (IAM) users or for users that you authenticate (federated users).
You can use the AWS Security Token Service (AWS STS) to create and provide trusted users with temporary security credentials that can control access to your AWS resources.
Temporary security credentials work almost identically to the long-term access key credentials that your IAM users can use, with the following differences:

1. Temporary security credentials are short-term, as the name implies. They can be configured to last for anywhere from a few minutes to several hours.
   After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them

2. Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when requested.
   When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has permissions to do so.

--> These differences lead to the following advantages for using temporary credentials:

1. You do not have to distribute or embed long-term AWS security credentials with an application.

2. You can provide access to your AWS resources to users without having to define an AWS identity for them.
   Temporary credentials are the basis for roles and identity federation.

3. The temporary security credentials have a limited lifetime, so you do not have to rotate them or explicitly revoke them when they're no longer needed.
   After temporary security credentials expire, they cannot be reused. You can specify how long the credentials are valid, up to a maximum limit.

You can manage your user identities in an external system outside of AWS and grant users who sign in from those systems access to perform AWS tasks and access your AWS resources.
IAM supports two types of identity federation. In both cases, the identities are stored outside of AWS. The distinction is where the external system resides—in your data center or an external third party on the web.

  --> Enterprise identity federation :
      You can authenticate users in your organization's network, and then provide those users access to AWS without creating new AWS identities for them and requiring them to sign in with a separate user name and password.
      This is known as the single sign-on (SSO) approach to temporary access.

  --> Web identity federation :
      You can let users sign in using a well-known third party identity provider such as Login with Amazon, Facebook, Google, or any OpenID Connect (OIDC) 2.0 compatible provider.
      You can exchange the credentials from that provider for temporary permissions to use resources in your AWS account.
      AWS STS web identity federation supports Login with Amazon, Facebook, Google, and any OpenID Connect (OIDC)-compatible identity provider.
