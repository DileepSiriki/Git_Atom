AWS - EC2 (AMAZON ELASTIC COMPUTE CLOUD)
==========================================
It provides scalable computing capacity in the Amazon Web Services (AWS) Cloud.
Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster.
You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage.

  • Virtual computing environments, known as instances.
  • Preconfigured templates for your instances, known as Amazon Machine Images (AMIs), that package the bits you need for your server (including the operating system and additional software)
    // An AMI includes the following:
       A template for the root volume for the instance (for example, an operating system, an application server, and applications)
       Launch permissions that control which AWS accounts can use the AMI to launch instances.
       A block device mapping that specifies the volumes to attach to the instance when it's launched.

  • Various configurations of CPU, memory, storage, and networking capacity for your instances, known as instance types
  • Secure login information for your instances using key pairs (AWS stores the public key, and you store the private key in a secure place)
  • Storage volumes for temporary data that's deleted when you stop, hibernate, or terminate your instance, known as instance store volumes
  • Persistent storage volumes for your data using Amazon Elastic Block Store (Amazon EBS), known as Amazon EBS volumes
  • Multiple physical locations for your resources, such as instances and Amazon EBS volumes, known as Regions and Availability Zones
  • A firewall that enables you to specify the protocols, ports, and source IP ranges that can reach your instances using security groups
  • Static IPv4 addresses for dynamic cloud computing, known as Elastic IP addresses
  • Metadata, known as tags, that you can create and assign to your Amazon EC2 resources
  • Virtual networks you can create that are logically isolated from the rest of the AWS Cloud, and that you can optionally connect to your own network, known as virtual private clouds (VPCs)

To automatically distribute incoming application traffic across multiple instances, use Elastic Load Balancing.
To get a managed relational database in the cloud, use Amazon Relational Database Service.
To make it easier to manage Docker containers on a cluster of EC2 instances, use Amazon Elastic Container Service (Amazon ECS).
To monitor basic statistics for your instances and Amazon EBS volumes, use Amazon CloudWatch.
Amazon EC2 supports creating resources using AWS CloudFormation.
You create a template, in JSON or YAML, that describes your AWS resources, and AWS CloudFormation provisions and configures those resources for you.

--> To create an exact EC2 instance -> Click on the required instance and -> Click actions -> Launch more like this .
--> To replicate an EC2 instance into another region -> create an image of instance -> copy image to another region -> launch instance from image.

TYPES OF INSTANCES :
---------------------
  ONDEMAND  : Pay for the instances that you use by the hour / second, with no long-term commitments or upfront payments.
  SAVINGS   : You can reduce your Amazon EC2 costs by making a commitment to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years.
  RESERVED  : You can reduce your Amazon EC2 costs by making a commitment to a specific instance configuration, including instance type and Region, for a term of 1 or 3 years.
  SPOT      : Request unused EC2 instances, which can reduce your Amazon EC2 costs significantly.

INSTANCE LIFECYCLE :
------------------------
Instance is a virtual server in the cloud. Its configuration at launch is a copy of the AMI that you specified when you launched the instance.
An instance type essentially determines the hardware of the host computer used for your instance.
Each instance type offers different compute and memory capabilities.
Select an instance type based on the amount of memory and computing power that you need for the application or software that you plan to run on the instance.
Your AWS account has a limit on the number of instances that you can have running.

    STORAGE :
    ----------
    --> The root device for your instance contains the image used to boot the instance.

    --> Your instance may include local storage volumes, known as instance store volumes, which you can configure at launch time with block device mapping.
        One these are mapped to our instance , we can use them to mount and use . The data is lost if the instance fails (stopped or terminated).
        So this is used for temporary data . We can overcome this by REPLICATION or using AMAZON S3 or EBS Volumes.

    --> STOP & START :
        ---------------
        You can stop and start your instance if it has an Amazon EBS volume as its root device. The instance retains its instance ID.
        When you stop an instance, we shut it down. AWS don't charge usage for a stopped instance, or data transfer fees, but we do charge for the storage for any Amazon EBS volumes.
        Each time you start a stopped instance we charge a minimum of one minute for usage. After one minute, we charge only for the seconds you use.
        For example, if you run an instance for 20 seconds and then stop it, we charge for a full one minute.
        If you run an instance for 3 minutes and 40 seconds, we charge for exactly 3 minutes and 40 seconds of usage.

        While the instance is stopped, you can treat its root volume like any other volume, and modify it (for example, repair file system problems or update software).
        You just detach the volume from the stopped instance, attach it to a running instance, make your changes, detach it from the running instance, and then reattach it to the stopped instance.
        Make sure that you reattach it using the storage device name that's specified as the root device in the block device mapping for the instance.
        If you decide that you no longer need an instance, you can terminate it.
        As soon as the state of an instance changes to shutting-down or terminate, we stop charging for that instance.

        When an instance is stopped, the instance performs a normal shutdown, and then transitions to a stopped state.
        All of its Amazon EBS volumes remain attached, and you can start the instance again at a later time.
        When an instance is in a stopped state, you can attach or detach Amazon EBS volumes.
        You can also create an AMI from the instance, and you can change the kernel, RAM disk, and instance type.
        The Public IPV4 address is released and a new public IPv4 address is assigned after restarting again.
        An IPv6 address persists when you stop and start your instance, and is released when you terminate your instance.
        This is because there is no concept of public and private IPV6 addresses.

    --> TERMINATE :
        -------------
        When an instance is terminated, the instance performs a normal shutdown.
        The root device volume is deleted by default, but any attached Amazon EBS volumes are preserved by default.
        The instance itself is also deleted, and you can't start the instance again at a later time.
        To prevent accidental termination  ensure that the disableApiTermination attribute is set to true for the instance.

    --> HIBERNATE : To use hibernation, the root volume must be an encrypted EBS volume.
        -------------
        When you hibernate an instance, Amazon EC2 signals the operating system to perform hibernation (suspend-to-disk).
        The hibernation freezes all of the processes, saves the contents of the RAM to the EBS root volume, and then performs a regular shutdown.
        After the shutdown is complete, the instance moves to the stopped state.
        Any EBS volumes remain attached to the instance, and their data persists, including the saved contents of the RAM.
        Any Amazon EC2 instance store volumes remain attached to the instance, but the data on the instance store volumes is lost.

        Hibernation saves the contents from the instance memory (RAM) to your Amazon Elastic Block Store (Amazon EBS) root volume.
        Amazon EC2 persists the instance's EBS root volume and any attached EBS data volumes.
        RAM data is always encrypted when it is moved to the EBS root volume. Encryption on the EBS root volume is enforced at instance launch time.

        You can hibernate an instance to get your instance and applications up and running quickly, if they take long time to bootstrap (e.g. load memory caches).
        You can start instances, bring them to a desired state and hibernate them. These “pre-warmed” instances can then be resumed to reduce the time it takes for an instance to return to service.
        Hibernation retains memory state across Stop/Start cycles.

        When you start your instance:
        --> The EBS root volume is restored to its previous state
        --> The RAM contents are reloaded
        --> The processes that were previously running on the instance are resumed
        --> Previously attached data volumes are reattached and the instance retains its instance ID
        --> You can hibernate an instance only if it's enabled for hibernation and it meets the hibernation prerequisites.

        You're not charged for instance usage for a hibernated instance when it is in the stopped state.
        You are charged for instance usage while the instance is in the stopping state, when the contents of the RAM are transferred to the EBS root volume.
        (This is different from when you stop an instance without hibernating it.) You're not charged for data transfer.
        However, you are charged for storage of any EBS volumes, including storage for the RAM contents.

   --> REBOOT :
       ----------
       An instance reboot is equivalent to an operating system reboot. In most cases, it takes only a few minutes to reboot your instance.
       When you reboot an instance, it keeps its public DNS name (IPv4), private IPv4 address, IPv6 address (if applicable), and any data on its instance store volumes.
       Rebooting an instance doesn't start a new instance billing period (with a minimum one-minute charge), unlike stopping and starting your instance.
       We might schedule your instance for a reboot for necessary maintenance, such as to apply updates that require a reboot.
       No action is required on your part; we recommend that you wait for the reboot to occur within its scheduled window.

   --> RETIRE :
       -----------
       An instance is scheduled to be retired when AWS detects irreparable failure of the underlying hardware that hosts the instance.
       When an instance reaches its scheduled retirement date, it is stopped or terminated by AWS.
       If your instance root device is an Amazon EBS volume, the instance is stopped, and you can start it again at any time.
       Starting the stopped instance migrates it to new hardware.
       If your instance root device is an instance store volume, the instance is terminated, and cannot be used again.
       You get a notification / SES about the retirement of an instance if you are using it . You need to move to another instance.

   --> RECOVER :
       -----------
       You can create an Amazon CloudWatch alarm that monitors an Amazon EC2 instance and automatically recovers the instance if it becomes impaired due to an underlying hardware failure or a problem that requires AWS involvement to repair.
       Terminated instances cannot be recovered.
       A recovered instance is identical to the original instance, including the instance ID, private IP addresses, Elastic IP addresses, and all instance metadata.
       If the impaired instance is in a placement group, the recovered instance runs in the placement group.

       When the StatusCheckFailed_System alarm is triggered, and the recover action is initiated, you will be notified by the Amazon SNS topic that you selected when you created the alarm and associated the recover action.
       During instance recovery, the instance is migrated during an instance reboot, and any data that is in-memory is lost.
       When the process is complete, information is published to the SNS topic you've configured for the alarm.
       Anyone who is subscribed to this SNS topic will receive an email notification that includes the status of the recovery attempt and any further instructions.
       You will notice an instance reboot on the recovered instance.

       Examples of problems that cause system status checks to fail include:
          - Loss of network connectivity
          - Loss of system power
          - Software issues on the physical host
          - Hardware issues on the physical host that impact network reachability

       If your instance has a public IPv4 address, it retains the public IPv4 address after recovery.

REGIONS AND ZONES : open EC2 -> move to bottom -> SERVICE HEALTH & ZONE STATUS
----------------------------------------------------------------------------------
Amazon EC2 is hosted in multiple locations world-wide.
These locations are composed of Regions, Availability Zones, Local Zones, AWS Outposts, and Wavelength Zones.

REGIONS : --> 24 In Total
-------------------------
    • An AWS Region is a physical location in the world and each Region is a separate geographic area.
      Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions.
      This achieves the greatest possible fault tolerance and stability.
      When you view your resources, you see only the resources that are tied to the Region that you specified.
      This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.

    • The resources that you create in one Region do not exist in any other Region unless you explicitly use a replication feature offered by an AWS service.
      For example, Amazon S3 and Amazon EC2 support cross-Region replication.
      Some services, such as AWS Identity and Access Management (IAM), do not have Regional resources.
      You can use policy conditions to control access to AWS services in an AWS Region.

    • If a Region is disabled by default, you must enable it before you can create and manage resources. The following Regions are disabled by default:
      --> Africa (Cape Town)
      --> Asia Pacific (Hong Kong)
      --> Europe (Milan)
      --> Middle East (Bahrain)

   • After you disable a Region, the resources in this Region are immediately unavailable.
     However, they are not deleted. You cannot disable a Region that is enabled by default.

When you enable a Region, AWS performs actions to prepare your account in that Region, such as distributing your IAM resources to the Region.
This process takes a few minutes for most accounts, but this can take several hours. You cannot use the Region until this process is complete.

--> A partition is a grouping of Regions. AWS currently has three partitions.
    •   aws         (Standard Regions)
    •   aws-cn      (China Regions)
    •   aws-us-gov  (AWS GovCloud [US] Regions).

#### Regions are completely isolated so this achieves the greatest possible fault tolerance and stability.
#### Availability Zones are connected through low latency links .
#### AWS provides you with the flexibility to place instances and store data within multiple geographic regions as well as across multiple Availability Zones within each AWS Region.

AVAILABILITY ZONES : --> 77 In Total
----------------------------------------
    • Region is divided into availability zones to isolate themselves from a disaster to other zones. These are discrete data centres.
      Availability Zones are multiple, isolated locations within each Region. Each Region has multiple, isolated locations known as Availability Zones.
      Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones.
      By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location
      An Availability Zone is represented by a Region code followed by a letter identifier; for example, us-east-1a --> AZ ID is unique for all accounts but us-east-1a might not be same for all.
      When you launch an instance, you can select an Availability Zone or let us choose one for you.
      If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
      You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone.
      we can also migrate instances to another AZ --> make an AMI --> launch an instance --> configure

      The resources that you create in one Region do not exist in any other Region unless you explicitly use a replication feature offered by an AWS service.
      For example, Amazon S3 and Amazon EC2 support cross-Region replication.
      Some services, such as AWS Identity and Access Management (IAM), do not have Regional resources.

LOCAL ZONES :
----------------
// AWS Local Zones are only available in Los Angeles and also available in preview in Boston, Houston, and Miami.
    • AWS Local Zones are a type of AWS infrastructure deployment that places AWS compute, storage, database, and other select services close to large population, industry, and IT centers.
      With AWS Local Zones, you can easily run applications that need single-digit millisecond latency closer to end-users in a specific geography.
      AWS Local Zones are ideal for use cases such as media & entertainment content creation, real-time gaming, live video streaming, and machine learning inference.

      Local Zones provide you the ability to place resources, such as compute and storage, in multiple locations closer to your end users.
      Local Zones have their own connections to the internet and support AWS Direct Connect, so that resources created in a Local Zone can serve local users with low-latency communications.
      A Local Zone is represented by a Region code followed by an identifier that indicates the location, for example, us-west-2-lax-1a
      We need to enable them in order to use , then create a subnet .

      A Local Zone is an extension of an AWS Region that is geographically close to your users.
      You can extend any VPC from the parent AWS Region into Local Zones by creating a new subnet and assigning it to the AWS Local Zone.
      When you create a subnet in a Local Zone, your VPC is extended to that Local Zone.
      The subnet in the Local Zone operates the same as other subnets in your VPC

      A Local Zone is represented by an AWS Region code followed by an identifier that indicates the location, for example us-west-2-lax-1a.
      Resources created in a Local Zone can serve local users with very low-latency communications.

OUTPOSTS :
-------------
--> To start running AWS services on premises.
--> Instead of creating 2 different applications and API to handle on premises and Cloud environments , outposts were created.
    So bring the cloud to on premises and job done . Now use same apps and API's for both on premises and cloud.
    We need to order from a fully integrated and pre validated outpost configurations specific for your use case.
    Tell the required compute and memory and network and they are bundled and brought to your location.
    Now we connect the outpost to the nearest REGION using a DIRECT CONNECT or VPN or use a local GW to connect to on premises resources.
    Also create a VPC and enable communication between your instances.
    Now launch EC2 in the outposts and other resources.
--> Even though we can use cloud , some applications still need to be on premises for latency issues . Hence OUTPOSTS.
    So instead of changing applications to meet both cloud and on premises apps , we can use same API's to access resources in both.
    AWS Technician comes and set up all the resources needed to connect resources in cloud and resources in on-premises.
An Outpost is a pool of AWS compute and storage capacity deployed at a customer site.
AWS Outposts brings native AWS services, infrastructure, and operating models to virtually any data centre, co-location space, or on-premises facility.
You can use the same services, tools, and partner solutions to develop for the cloud and on premises .

OUTPOSTS & WAVELENGTHS :
--------------------------
    • AWS Outposts is a fully managed service that extends AWS infrastructure, services, APIs, and tools to customer premises.
      By providing local access to AWS managed infrastructure, AWS Outposts enables customers to build and run applications on premises using the same programming interfaces as in AWSRegions, while using local compute and storage resources for lower latency and local data processing needs.

    • Wavelength Zones allow developers to build applications that deliver ultra-low latencies to 5G devices and end users.
      Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks.
      A Wavelength Zone is represented by a Region code followed by an identifier that indicates the Wavelength Zone, for example, us-east-1-wl1-bos-wlz-1.
      To help 5G --> Gaming experience - smart cities - robotics - autonomous driving cars

EDGE LOCATIONS : - Content Delivery Network
------------------
A site that CloudFront uses to cache copies of your content for faster delivery to users at any location.
Amazon CloudFront, Amazon Route 53, AWS Firewall Manager, AWS Shield, and AWS WAF services are offered at AWS Edge Locations.

 ---------------------------------------------------------------------------------------------------------------------------------------------------------
|
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|    |                                                                                          |      |
|    |        ------------------------------     -----------------------------      ------      |      |     -----------------------     -----------------
|    |       |       ----       ----         |  |    ----      ----           |    |            |      |    |    ----               |   |
| A  |   B   |   C  |  D  |    |    | . . .  |  |   |    |    |    | . . . .  |    | . . . .    |      |    |   |     | . . . . .   |   |
|    |       |       -----      ----         |  |    ----      ----           |    |            |      |    |    -----              |   |
|    |        ------------------------------     -----------------------------      -------     |      |     ------------------------    -----------------
|    |                                                                                          |      |
|     ------------------------------------------------------------------------------------------        --------------------------------------------------
|
 ---------------------------------------------------------------------------------------------------------------------------------------------------------

          A = TOTAL AWS SPACE
          B = REGIONS
          C = AVAILABILITY ZONE
          D = EDGE LOCATIONS

EC2 ROOT DEVICE VOLUME : [ AMIs backed by Amazon EC2 instance store (OLDER) <===> AMIs backed by Amazon EBS (LATEST) ]
-------------------------
    INSTANCE STRORE BACKED INSTANCES : (Do not support the Stop action)  --> Template stored in Amazon S3
        Instances that use instance stores for the root device automatically have one or more instance store volumes available, with one volume serving as the root device volume.
        When an instance is launched, the image that is used to boot the instance is copied to the root volume.
        Any data on the instance store volumes persists as long as the instance is running, but this data is deleted when the instance is terminated

        INSTANCE = [Instance store volume-1] + [Instance store volume-2] + [Instance store volume-3] etc;
          root volume = one of the Instance store volume , which gets a copy of image when instance is booted from S3.

                   [                    HOST - COMPUTER                      ]
          [S3] --> [ [ Instance-store  (vol-1) (vol-2)... ] [Device Mapping] ]  -> No EBS , so a failure will delete everything.
            v                              ^
            |____lOADES AMI ->_____________|

    EBS BACKED INSTANCES :
        An Amazon EBS-backed instance can be stopped and later restarted without affecting data stored in the attached volumes.
        There are various instance– and volume-related tasks you can do when an Amazon EBS-backed instance is in a stopped state.
        For example, you can modify the properties of the instance, change its size, or update the kernel it is using, or you can attach your root volume to a different running instance for debugging
              By default, the root volume for an AMI backed by Amazon EBS is deleted when the instance terminates.
              You can change the default behaviour to ensure that the volume persists after the instance terminates.
              To change the default behaviour, set the DeleteOnTermination attribute to false using a block device mapping.
              --> Deselect DELETE ON TERMINATION option while creating Instance
              --> For an already existing instance this can be done only from CLI.

                                                [                    HOST - COMPUTER                      ]
          [(EBS_vol-1) (EBS_vol-2) .... ] <---> [ [ Instance-store (vol-1) (vol-2) ... ] [Device Mapping] ] -> EBS is independent and hence fail proof.

        RECOVERY UPON FAILURE :
              1.Create a snapshot of the root volume.
              2.Register a new AMI using the snapshot.
              3.Launch a new instance from the new AMI.
              4.Detach the remaining Amazon EBS volumes from the old instance.
              5.Reattach the Amazon EBS volumes to the new instance.

       Instances launched from an Amazon EBS-backed AMI launch faster than instances launched from an instance store-backed AMI.
       When you launch an instance from an instance store-backed AMI, all the parts have to be retrieved from Amazon S3 before the instance is available.
       With an Amazon EBS-backed AMI, only the parts required to boot the instance need to be retrieved from the snapshot before the instance is available.

-->You can convert an instance store-backed Linux AMI that you own to an Amazon EBS-backed Linux AMI.
   You can't convert an instance store-backed Windows AMI to an Amazon EBS-backed Windows AMI and you cannot convert an AMI that you do not own.

AMAZON MACHIENE IMAGE : AMI --> [ My AMI - Market Place - Community AMI ]
-----------------------------
// An AMI includes the following:
   A template for the root volume for the instance (for example, an operating system, an application server, and applications)
   Launch permissions that control which AWS accounts can use the AMI to launch instances.
   A block device mapping that specifies the volumes to attach to the instance when it's launched.

Bundle of an OS and pre installed s/w for your virtual machine .
It has a fixed state , so when you start , stop and start , they have a same data.
An Amazon Machine Image (AMI) provides the information required to launch an instance. You must specify an AMI when you launch an instance.
You can launch multiple instances from a single AMI when you need multiple instances with the same configuration.
You can use different AMIs to launch instances when you need instances with different configurations.

It is a template that contains a software configuration (for example, an operating system, an application server, and applications)
From an AMI, you launch an instance, which is a copy of the AMI running as a virtual server in the cloud. You can also launch multiple instances of an AMI.
Your instances keep running until you stop, hibernate, or terminate them, or until they fail.
You can also create your own custom AMI or AMIs; doing so enables you to quickly and easily start new instances that have everything you need.
      For example, if your application is a website or a web service, your AMI could include a web server, the associated static content, and the code for the dynamic pages.
      As a result, after you launch an instance from this AMI, your web server starts, and your application is ready to accept requests

--> An AMI includes the following:
   • One or more Amazon Elastic Block Store (Amazon EBS) snapshots, or,
     For instance-store-backed AMIs,a template for the root volume of the instance (for example, an operating system, an applicationserver, and applications).
   • Launch permissions that control which AWS accounts can use the AMI to launch instances.
   • A block device mapping that specifies the volumes to attach to the instance when it's launched.

--> CUSTOM AMI :
      You can launch an instance from an existing AMI, customize the instance (for example, install software on the instance), and then save this updated configuration as a custom AMI.
      Instances launched from this new custom AMI include the customizations that you made when you created the AMI.

--> AMIs that are backed by Amazon EBS snapshots can take advantage of Amazon EBS encryption.
    Snapshots of both data and root volumes can be encrypted and attached to an AMI.

INSTANCE TYPES :
====================
1. General Purpose :
   General purpose instances provide a balance of compute, memory and networking resources, and can be used for a variety of diverse workloads.
   These instances are ideal for applications that use these resources in equal proportions such as web servers and code repositories.
    t3.small - t3.medium - t3.micro

2. Compute Optimized
   Compute Optimized instances are ideal for compute bound applications that benefit from high performance processors.
   Instances belonging to this family are well suited for batch processing workloads, media transcoding, high performance web servers, high performance computing (HPC), scientific modeling, dedicated gaming servers and ad server engines, machine learning inference and other compute intensive applications.
    c4.large - c4.xlarge - c4.2xlarge

3. Memory Optimized :
   Memory optimized instances are designed to deliver fast performance for workloads that process large data sets in memory.
    r5.large - r5.xlarge

4. Storage Optimized :
   Storage optimized instances are designed for workloads that require high, sequential read and write access to very large data sets on local storage.
   They are optimized to deliver tens of thousands of low-latency, random I/O operations per second (IOPS) to applications.
    i3.large - i3.xlarge - i3.2xlarge

5. Accelerated Computing :
   Accelerated computing instances use hardware accelerators, or co-processors, to perform functions, such as floating point number calculations, graphics processing, or data pattern matching, more efficiently than is possible in software running on CPUs.
    p3.2xlarge - p3.8xlarge

** Amazon EC2 allows you to choose between Fixed Performance Instances (e.g. M5, C5, and R5) and Burstable Performance Instances (e.g. T3).
   Burstable Performance Instances provide a baseline level of CPU performance with the ability to burst above the baseline.


INSTANCE PURCHASING OPTIONS :
====================================

• ON-DEMAND INSTANCES :
-------------------------
Lets you pay for compute capacity by the hour or second (minimum of 60 seconds) with no long-term commitments.
Pricing is per instance-hour consumed for each instance, from the time an instance is launched until it is terminated or stopped.
Each partial instance-hour consumed will be billed PER-SECOND for Linux Instances and as a full hour for all other instance types.

Pay, by the second, for the instances that you launch.
You pay for compute capacity by the second with no long-term commitments. You have full control over its lifecycle—you decide when to launch, stop, hibernate, start, reboot, or terminate it.
The price per second for a running On-Demand Instance is fixed.
Recommends that you use On-Demand Instances for applications with short-term, irregular workloads that cannot be interrupted.
You can request a limit increase for each On-Demand Instance limit type from the Limits page or the vCPU limits calculator in the Amazon EC2 console
On-Demand Instances would be billed for the number of seconds they are running with a minimum of a minute , so for 20 sec you are billed 1 minute and for 3m 20 sec , you are billed for 3m 20sec.
You can increase or decrease your compute capacity depending on the demands of your application and only pay the specified per hourly rates for the instance you use.

  On-Demand instances are recommended for:
    --> Users that prefer the low cost and flexibility of Amazon EC2 without any up-front payment or long-term commitment
    --> Applications with short-term, spiky, or unpredictable workloads that cannot be interrupted
    --> Applications being developed or tested on Amazon EC2 for the first time

    PER-SECOND BILLING : // Not applicable for windows instances
    --------------------
    When using on-demand Linux instances, you are charged per second based on an hourly rate" .
    With per-second billing, you pay for only what you use.
    It takes cost of unused minutes and seconds in an hour off of the bill, so you can focus on improving your applications instead of maximizing usage to the hour.
    Especially, if you manage instances running for irregular periods of time, such as dev/testing, data processing, analytics, batch processing and gaming applications, can benefit.
    Per-second billing is available for instances launched in:
    - On-Demand, Reserved and Spot forms
    - All regions and Availability Zones
    - Amazon Linux and Ubuntu
    - Not applicable for windows instances .
    - A minimum of 1 minutes is billed always .

• SPOT INSTANCES :
---------------------
Request unused EC2 instances, which can reduce your Amazon EC2 costs significantly.
A Spot Instance is an unused EC2 instance that is available for less than the On-Demand price (Upto 90% off the price of on-demand instances).
Because Spot Instances enable you to request unused EC2 instances at steep discounts, you can lower your Amazon EC2 costs significantly.
The hourly price for a Spot Instance is called a Spot price. The Spot price of each instance type in each Availability Zone is set by Amazon EC2, and is adjusted gradually based on the long-term supply of and demand for Spot Instances.
Your Spot Instance runs whenever capacity is available and the maximum price per hour for your request exceeds the Spot price.
Amazon EC2 terminates, stops, or hibernates your Spot Instance when the Spot price exceeds the maximum price for your request or capacity is no longer available.
Amazon EC2 provides a Spot Instance interruption notice, which gives the instance a two-minute warning before it is interrupted.

Spot Instances with a defined duration (also known as Spot blocks) are designed not to be interrupted and will run continuously for the duration you select.
This makes them ideal for jobs that take a finite time to complete, such as batch processing, encoding and rendering, modeling and analysis, and continuous integration.
You can use a duration of 1, 2, 3, 4, 5, or 6 hour.

While Spot Instances would be the least costly option, they are not suitable for jobs that cannot be interrupted or must complete within a certain time period.
They are terminated by AWS if it costs more than your BID in next 2 minutes .
It gives some time window for you to save your work .

      In nav bar (left) -> find option "SPOT INSTANCES"
      To launch , similar steps -> launch-> select AMI (step-1) -> Type (step-2) -> configure Instance (step-3) -> here tick purchasing options (Request spot instances)

Amazon EC2 Spot instances allow you to request spare Amazon EC2 computing capacity for up to 90% off the On-Demand price.
  Spot instances are recommended for:
    --> Applications that have flexible start and end times
    --> Applications that are only feasible at very low compute prices
    --> Users with urgent computing needs for large amounts of additional capacity

SPOT BLOCKS : you can request a spot instance for a specified time frame - 1 to 6 years.
SPOT REQUEST = maximum price + Desired number of instances + launch specification + Requirement type : one-time / Persistent + Valid from + Valid Until

                                 ---Terminate / Interrupt (Persistent) ---
                                |       (until specified interval)         |
                                V                                          ^
 Create a request -------> Spot Request  ----> Launch Instance ------> [[*****]] ----->Terminate / Interrupt (One-time)
                          (specification)                             (Instances)

SPOT REQUESTS can be of 2 types :
   1. One-time    : Spot request is deleted once an instance is assigned.  So this is a onetime request.
   2. Persistent  : If a spot instance is terminated then the request keeps on requesting for another set of specified spot instance with the max price we defined and until the Valid-from & Valid-to time. This is a consistant request.

You can only cancel spot instance requests that are in OPEN / ACTIVE / DISABLED state.
Cancelling a spot request does not terminate instances.
So to terminate a spot request, you must first cancel a spot request and then terminate the associated spot instances.
Because if we directly terminate and the instance type is persistent, then the instances will be launched again.

// Spot instance, if we know the exact instance or capacity and AZ
// Spot fleet, if we can specify that AWS can chose all these instance types and all the AZ to meet our requirement.

SPOT FLEET : set of spot instances + Optional On-Demand Instances . // we define multiple launch pools , multiple instance types
spot fleets allow us to automatically request spot instances with the lowest price.
Spot fleet will try to meet the target capacity with price constraints.
 --> Define possible launch pools: Instance type, OS , AZ
 --> Can have multiple launch pools, so that the fleet can Choose
 --> spot fleet stops launching instances when reaching capacity or max cost.

STRATEGIES TO ALLOCATE SPOT INSTANCES :
 --> Lowest price : from the pool with the lowest price (cost optimization, short workload)
 --> Diversified  : distributed across all pools        (great for availability, long workloads) // if one pool goes away, then other pools will be active.
 --> Capacity Optimized : pool with the optimal capacity for number of instances

• DEDICATED HOSTS :
---------------------
Pay for a physical host that is fully dedicated to running your instances, and bring your existing per-socket, per-core, or per-VM software licenses to reduce costs.
A Dedicated Host is a physical EC2 server dedicated for your use.
Dedicated Hosts can help you reduce costs by allowing you to use your existing server-bound software licenses, including Windows Server, SQL Server, and SUSE Linux Enterprise Server (subject to your license terms), and can also help you meet compliance requirements.
  --> Can be purchased On-Demand (hourly).
  --> Can be purchased as a Reservation for up to 70% off the On-Demand price.

• Dedicated Instances – Pay, by the hour, for instances that run on single-tenant hardware.
  Dedicated instances can be used if you require your instance be physically isolated at the host hardware level from instances that belong to other AWS accounts.

                              ON-DEMAND           RESERVED            SPOT
            ----------------------------------------------------------------------
            PRICE               HIGH              MEDIUM              LOW
            FLEXIBILITY         HIGH              LOW                 MEDIUM
            RELIABILITY         MEDIUM            HIGH                LOW


                                         Dedicated Host                                                Dedicated Instance
  --------------------------------------------------------------------------------------------------------------------------------------
    Billing                              Per-host billing                                              Per-instance billing

    Visibility of sockets,               Provides visibility of the number of                          No visibility
    cores, and host                      sockets and physical cores

    Host and instance affinity           Allows you to consistently deploy your                        Not supported
                                         instances to the same physical server over time

    Automatic instance recovery          Supported                                                     Supported

    Bring your OWN licenses              Supported                                                     Not Supported
    BYOL
  ---------------------------------------------------------------------------------------------------------------------------------------


• RESERVED INSTANCES :   // For EC2, FARGATE, RDS, REDSHIFT, ELASTICAHE
-------------------------
// The shortest reservation length is one year. So for application to run for a day or month this is not useful .Go for ON_DEMAND instances.
// There is no difference in performance between On-demand and Reserved instances of the same type.
// Reservations in AWS are not an appropriate choice when you need to test your production environment, AWS reservations have a minimum term of one year.

Reduce your Amazon EC2 costs by making a commitment to a consistent instance configuration, including instance type and Region, for a term of 1 or 3 years.
You can purchase a Reserved Instance for a one-year or three-year commitment, with the three-year commitment offering a bigger discount.
Reserved Instances do not renew automatically; when they expire, you can continue using the EC2 instance without interruption, but you are charged On-Demand rates.
In nav bar (left) -> find option "RESERVED INSTANCES"

There are three payment options available when purchasing reserved instances:
The general rule is: “the more you spend upfront, the more discounts you get." With the All Upfront option, you pay for the entire Reserved Instance term with one upfront payment.
1- No up-front
2- Partial up-front
3- All up-front.

Reserved Instances provide you with a significant discount (up to 75%) compared to On-Demand instance pricing.
In addition, when Reserved Instances are assigned to a specific Availability Zone, they provide a capacity reservation, giving you additional confidence in your ability to launch instances when you need them.
For applications that have steady state or predictable usage, Reserved Instances can provide significant savings compared to using On-Demand instances.

  Reserved Instances are recommended for:
    --> Applications with steady state usage
    --> Applications that may require reserved capacity
    --> Customers that can commit to using EC2 over a 1 or 3 year term to reduce their total computing costs

    CONVERTIBLE RESERVED INSTANCES :
    ------------------------------------
    When your needs change, you can exchange your Convertible Reserved Instances and continue to benefit from the reservation's pricing discount.
    With Convertible RIs, you can exchange one or more Reserved Instances for another Reserved Instance with a different configuration, including instance family, operating system, and tenancy.
    There are no limits to how many times you perform an exchange, as long as the new Convertible Reserved Instance is of an equal or higher value than the original Convertible Reserved Instances that you are exchanging.
    When you exchange your Convertible Reserved Instance, the number of instances for your current reservation is exchanged for a number of instances that cover the equal or higher value of the configuration of the new Convertible Reserved Instance.
    Amazon EC2 calculates the number of Reserved Instances that you can receive as a result of the exchange.

    The following rules apply:
    --> Convertible Reserved Instances can only be exchanged for other Convertible Reserved Instances currently offered by AWS.
    --> Convertible Reserved Instances are associated with a specific Region, which is fixed for the duration of the reservation's term.
        You cannot exchange a Convertible Reserved Instance for a Convertible Reserved Instance in a different Region.
    --> You can exchange one or more Convertible Reserved Instances at a time for one Convertible Reserved Instance only.
    --> To exchange a portion of a Convertible Reserved Instance, you can modify it into two or more reservations, and then exchange one or more of the reservations for a new Convertible Reserved Instance.
    --> All Upfront Convertible Reserved Instances can be exchanged for Partial Upfront Convertible Reserved Instances, and vice versa.
    --> If the total upfront payment required for the exchange (true-up cost) is less than $0.00, AWS automatically gives you a quantity of instances in the Convertible Reserved Instance that ensures that true-up cost is $0.00 or more.
    --> If the total value (upfront price + hourly price * number of remaining hours) of the new Convertible Reserved Instance is less than the total value of the exchanged Convertible Reserved Instance, AWS automatically gives you a quantity of instances in the Convertible Reserved Instance that ensures that the total value is the same or higher than that of the exchanged Convertible Reserved Instance.
    --> You cannot exchange All Upfront and Partial Upfront Convertible Reserved Instances for No Upfront Convertible Reserved Instances.
    --> You can exchange a No Upfront Convertible Reserved Instance for another No Upfront Convertible Reserved Instance only if the new Convertible Reserved Instance's hourly price is the same or higher than the exchanged Convertible Reserved Instance's hourly price.

    STANDARD RESERVED INSTANCES :
    ------------------------------------
    You can't exchange Standard Reserved Instances, but you can modify them.
    Standard RIs provide the most significant discount (up to 72% off On-Demand) and are best suited for steady-state usage.

    SCHEDULED RESERVED INSTANCES :
    -----------------------------------
    Say when you want an instance for a specific interval of time for a minimum of 1year.
    Say from 3pm-6pm every Thursdaysay for image processing. // Reserve for a DAY - WEEK - MONTH

• SAVINGS PLAN  : // Only for EC2 & FARGATE
--------------------
Savings Plans are a flexible pricing model that offer low prices on EC2 and Fargate usage, in exchange for a commitment to a consistent amount of usage (measured in $/hour) for a 1 or 3 year term.
Savings Plans is a flexible pricing model that provides savings of up to 72% on your AWS compute usage.
This pricing model offers lower prices on Amazon EC2 instances usage, regardless of instance family, size, OS, tenancy or AWS Region, and also applies to AWS Fargate and AWS Lambda usage.
Savings Plans offer significant savings over On Demand, just like EC2 Reserved Instances, in exchange for a commitment to use a specific amount of compute power (measured in $/hour) for a one or three year period.
You can sign up for Savings Plans for a 1- or 3-year term and easily manage your plans by taking advantage of recommendations, performance reporting and budget alerts in the AWS Cost Explorer.

When you sign up for Savings Plans, you will be charged the discounted Savings Plans price for your usage up to your commitment.
For example, if you commit to $10 of compute usage an hour, you will get the Savings Plans prices on that usage up to $10 and any usage beyond the commitment will be charged On Demand rates.

The minimum commitment per purchase is one tenth of a cent ($0.001) per hour,.
Savings Plans is the easiest way to save on compute usage.
You can sign up for Savings Plans in two simple steps using the AWS Cost Explorer:
  first, customize your Savings Plans recommendations based on your requirements and
  then add to the cart to purchase a plan.

Savings Plans is a flexible pricing model that helps you save up to 72% on Amazon EC2, AWS Fargate, and AWS Lambda usage.
Savings Plans provides you lower prices for your Amazon EC2 usage, Fargate, and Lambda in exchange for a commitment to a consistent usage amount (measured in $/hour)for a one or three year term.
Every type of compute usage has an On-Demand rate and a Savings Plans rate.
For example, if you commit to $10/hour of compute usage, your usage is charged at your Savings Plans rate up to $10.
Any usage beyond your Savings Plans commitment is charged at your regular On-Demand rates.

  • Compute Savings Plans : 66% cost reduction
    These plans automatically apply to your EC2 instance usage, regardless of instance family (for example, M5, C5, etc.), instance sizes (for example, c5.large, c5.xlarge, etc.), Region (for example, us-east-1, us-east-2, etc.),
    operating system (for example, Windows, Linux, etc.), or tenancy(for example, Dedicated, default, dedicated host).
    They also apply to your Fargate and Lambda usage.

    With a Compute Savings Plans, you can move a workload from C5 to M5, shift your usage from EU(Ireland) to EU (London), or migrate your application from Amazon EC2 to Amazon ECS using Fargate at any time.
    You can continue to benefit from the low prices provided by Compute Savings Plans as you make these changes.

  • EC2 Instance Savings Plan : 72% cost reduction
    In exchange for a commitment to a specific instance family in a chosen AWS Region (for example, M5 in Virginia) regardless of AZ, size, OS or tenancy.
    EC2 Instance Savings Plans give you the flexibility to change your usage between instances within a family in that region.

    RESERVED vs SAVINGS :
    ----------------------
    Savings Plans are a flexible pricing model that offers low prices, just like Amazon EC2 RIs, but with added flexibility.
    With Savings Plans you can reduce your bill by committing to a consistent amount of compute usage (measured in $/hour), instead of specific instance configurations.

    At present, only EC2 instances and Fargate usage is eligible for AWS Saving Plans.
    If your business is using Reserved Instances to save money on the cost of RDS instances, AWS Redshift, or ElastiCache services, you will have to continue using Reserved Instances until the new discount program is extended to these services.

    The second point to note is that, rather than committing to a specific amount of utilization - as you would with a Reserved Instance - when you purchase a AWS Saving Plans, you are committing to a minimum dollar per hour spend.
    Depending on the type of Savings Plan purchased, you may have to commit to using the Savings Plan for EC2 instances in a specific family and in a specific region.

• ON-DEMAND CAPACITY RESERVATIONS :
------------------------------------
On-Demand Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.
This gives you the ability to create and manage Capacity Reservations independently from the billing discounts offered by Savings Plans or regional Reserved Instances.
By creating Capacity Reservations, you ensure that you always have access to EC2 capacity when you need it, for as long as you need it.
You can create Capacity Reservations at any time, without entering into a one-year or three-year term commitment, and the capacity is available immediately.
When you no longer need it, cancel the Capacity Reservation to stop incurring charges.

When you create a Capacity Reservation, you specify:
--> The Availability Zone in which to reserve the capacity
--> The number of instances for which to reserve capacity
--> The instance attributes, including the instance type, tenancy, and platform/OS

Capacity Reservations can only be used by instances that match their attributes.
By default, they are automatically used by running instances that match the attributes.
If you don't have any running instances that match the attributes of the Capacity Reservation, it remains unused until you launch an instance with matching attributes.
In addition, you can use Savings Plans and regional Reserved Instances with your Capacity Reservations to benefit from billing discounts.
AWS automatically applies your discount when the attributes of a Capacity Reservation match the attributes of a Savings Plan or regional Reserved Instance.

You must create the Capacity Reservation with the correct platform to ensure that it properly matches with your instances.
Capacity Reservations support the following platforms:
    --> Linux/UNIX - Linux with SQL Server Standard - Linux with SQL Server Web - Linux with SQL Server Enterprise - Red Hat Enterprise Linux -SUSE Linux

DIFFERENTAITE RESERVED - SAVINGS - CAPACITY RESERVATIONS  :
------------------------------------------------------------

                	Capacity Reservations 	              Zonal Reserved Instances 	         Regional Reserved Instances 	              Savings Plans
==================================================================================================================================================================================
Term 	            No commitment required.  	           |----------------------- Requires a fixed one-year or three-year commitment -------------------|
                  Can be created and cancelled
                  as needed.

Capacity benefit 	|------Capacity reserved in a specific Availability Zone-------|       |---------------- 	No capacity reserved ---------------------|

Billing discount 	No billing discount                  |-------------------------------	Provides a billing discount ----------------------------------|

Instance Limits 	Your On-Demand Instance limits  	Default is 20 per Availability Zone.  	Default is 20 per Region.  	                   NO limit.
                  per Region apply.                 You can request a limit increase.       You can request a limit increase.



Examples for Linux\Ubuntu based instances:
--------------------------------------------------
1- If you run a Linux instance for 4 seconds or 20 seconds or 59 seconds, you will be charged for one minute. (this is what we mean by minimum of 1 minute)
2- If you run a Linux instance for 1 minute and 3 seconds, you will be charged for 1 minute and 3 seconds.
3- If you run a Linux instance for 3 hours, 25 minutes and 7 seconds, you will be charged for 3 hours, 25 minutes and 7 seconds.

Examples for non-Linux\Ubuntu instances:
---------------------------------------------------
1- If you run an instance for 4 seconds or 20 seconds or 59 seconds, you will be charged for one hour.
2- If you run an instance for 1 minute and 3 seconds, you will be charged for one hour.
3- If you run an instance for 3 hours, 25 minutes and 7 seconds, you will be charged for 4 hours.

Per-second billing is available for instances launched in:
-------------------------------------------------------------
- On-Demand, Reserved and Spot forms
- All regions and Availability Zones
- Amazon Linux and Ubuntu


==================================================================================================================================================================================
==================================================================================================================================================================================
INSTANCE NAMING :
----------------------
  T 2 . MICRO = T - Instance Family
                2 - Generation 2
                Micro - Indicating Instance is very small.
                1 CPU & 1 Gb Memory

  M 3 . LARGE = M - Instance Family
                3 - Generation 3
                Large - Balanced CPU to Memory Ratio .
                2 CPU & 7.5 Gb Memory

 R 3 . LARGE = 2 CPU & 15 Gb Memory   -> Enterprise Servers .
 D2  . *     = For high sequential Read / Write -> Data base operations .


LIFECYCLE :
--------------
An On-Demand Instance runs when you launch it and ends when you terminate it.
A Spot Instance runs as long as capacity is available and your maximum price is higher than the Spot price.
      On the Details tab, under Instance details, find Lifecycle.
          If the value is spot, the instance is a Spot Instance.
          If the value is normal, the instance is either an On-Demand Instance or a Reserved Instance.
      On the Details tab, under Host and placement group, find Tenancy.
          If the value is host, the instance is running on a Dedicated Host.
          If the value is dedicated, the instance is a Dedicated Instance.

CONNECTING TO A LINUX INSTANCE :
---------------------------------
#### We can launch instances from : LAUNCH TEMPLATES , PARAMETERS FROM AN EXISTING INSTANCE , AWS CLI , WINDOWS POWERSHELL , EC2 FLEET as well .
#### An EC2 Fleet contains the configuration information to launch a fleet—or group—of instances.
     In a single API call, a fleet can launch multiple instance types across multiple Availability Zones, using the On-Demand Instance, Reserved Instance, and Spot Instance purchasing options together.

--> In EC2 dashboard --> Instances --> top right Launch Instances -> select free tier eligible --> Security group (pre create a SG and attach - check below steps INBOUND RULES , as by default inbound is not allowed )

--> A Linux instance has no password; you use a key pair to log in to your instance securely.
    You specify the name of the key pair when you launch your instance, then provide the private key when you log in using SSH.
    You can use the same keypair on multiple instances and you can also use multiple keypairs on the same user on an instance.

    NOTE : // Adding extra key-pairs to an instance https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
    --------
    Initially when you launch an instance, you generate or specify an already existing keypair that you want to use to connect to that instance.
    If you will use an SSH client on a macOS or Linux computer to connect to your Linux instance, use the following command to set the permissions of your private key file so that only you can read it.
    --> chmod 400 my-key-pair.pem

    KEYPAIR --> Private half is stored by you in the form of .pem or .ppk file. // .pem for OpenSSH & .ppk for Putty.
                Public half is stored in the path " .ssh/authorized_keys " in that instance .
                We can generate any number of key-pairs and add them to an instance afterwards.

     STEP-1 : ssh -i "Private-Key/path" username@DNS-name
     STEP-2 : open .ssh/authorized_keys
     STEP-3 : You will find the default public key of the key-pair that you specified in the form of " ssh-rsa <publci-key> <keypair-name>
     STEP-4 : In the EC2 console, create a new key-pair that you want to add to that instance.
              In a linux terminal , do " ssh-keygen -y -f /path_to_key_pair/my-key-pair "
              This will generate the public half of the key-pair.
              Copy it.
     STEP-5 : Now in the already connected session, open the file " .ssh/authorized_keys " file and add an entry in the form " <generated-public-key> <keypair-name> " using a text editor.
              Keypair-name is optional and is for reference purpose only, and used incase we want to delete the access to a key pair in future.

              [ ec2-user@ip-172-31-40-203 ]$ cat .ssh/authorized_keys
              ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCTCrYHTl/5It/KrXMLN7BUDKskVE4PpApkCgd6dV12HljvAhXpl66zdPDiN9NHVB+3jmxmF8ZBJN ec2-linux
              ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+twbxxGzNfaghfjny88GFt/EnULmZhRVwpb9Ln0G0A3hbNGPgDt8tjOpACAk1usOwSyN4RJg0Cv ec2-linux_1

     CONNECT TO AN INSTANCE IF PRIVATE KEY IS LOST:
     -----------------------------------------------
      Step 1: Create a new key pair
      Step 2: Get information about the original instance and its root volume
      Step 3: Stop the original instance
      Step 4: Launch a temporary instance
      Step 5: Detach the root volume from the original instance and attach it to the temporary instance
      Step 6: Add the new public key to authorized_keys on the original volume mounted to the temporary instance
      Step 7: Unmount and detach the original volume from the temporary instance, and reattach it to the original instance
      Step 8: Connect to the original instance using the new key pair
      Step 9: Clean ups


--> When you ssh into a Linux instance, you supply a username and the private half of a keypair.
    The Linux system will look in the nominated user's .ssh/authorized_keypairs file and will attempt to find the matching public half of the keypair.
    If found, it will allow you to start the ssh session. Therefore, any keypair can be added to a user's .ssh/authorized_keys file.
    It can include multiple keypairs, all of which would be permitted to login as that user.
    When you launch an instance, its initial state is pending.
    After the instance starts, its state changes to running and it receives a public DNS name.

--> File format
      pem -- For use with OpenSSH
      ppk -- For use with PuTTY
      chmod 400 my-key-pair.pem -> change permissions so that only you can see it .

--> If your local computer operating system is Linux or macOS X // --> i stands for IDENTITY FILE
      • SSH client --> ssh -i "/path/to/Private-Key" username@DNS-name
      • AWS Systems Manager Session Manager
      • EC2 Instance Connect

--> If your local computer operating system is Windows
      • SSH client - ssh -i "Private-Key" username@DNS-name    // WSL or windows command line if SSH is installed or from powershell.
      • AWS Systems Manager Session Manager
      • PuTTY ( free SSH client for Windows)
      • Windows Subsystem for Linux

--> Get information about your instance
    --> Default USER NAMES :
      • For Amazon Linux 2 or the Amazon Linux AMI, the user name is ec2-user.
      • For a CentOS AMI, the user name is centos.
      • For a Debian AMI, the user name is admin.
      • For a Fedora AMI, the user name is ec2-user or fedora.
      • For a RHEL AMI, the user name is ec2-user or root.
      • For a SUSE AMI, the user name is ec2-user or root.
      • For an Ubuntu AMI, the user name is ubuntu.

--> Enable inbound traffic to your instance
    --> Ensure that the security group associated with your instance allows incoming SSH traffic from your IP address.
        The default security group for the VPC does not allow incoming SSH traffic by default.
        Security groups are specific to a Region, so you should select the same Region in which you created your key pair.
        Inbound rules -> http & https --> 0.0.0.0/0 and ::/0
                         ssh -> My-Ip or do a custom and add IP using CIDR notation
   --> In security group selection , select both DEFAULT and the one you have created (check below details for rules before going next.)
       If already created -> EC2 -> select instance -> security -> security groups -> select a group -> edit (add/delete)

--> Locate the private key
    --> chmod 400 my-key-pair.pem -> change permissions so that only you can see it .

--> ONCE EVERYTHING IS SET-UP : Directly click on CONNECT
    -> EC2 Instant Connect : Connecting in web browser directly .
    -> Session Manager (SSM agent)
    -> SSH client

--> CONNECT USING SSH :
        1. check that SSH Client (Openssh) is installed
        2. open WINDOWS+R -> cmd
        3. ssh -i "C:\Users\DileepKumar\Desktop\AWS_keys\linux-ec2.pem" ec2-user@ec2-18-216-19-72.us-east-2.compute.amazonaws.com

--> CONNECT USING PUTTY :
        1. Download Latest putty version -> putty + putty Key Gen
        2. Convert your private key using PuTTYgen : (Skip if you already have key in ppk format)
              PuTTY does not natively support the private key format for SSH keys.
              PuTTY provides a tool named PuTTYgen, which converts keys to the required format for PuTTY.
              You must convert your private key(.pem file) into this format (.ppk file)
        3. STEP A : Type of key to generate : RSA
           STEP B : Chose load , by default it shows only ppk files . change to (.* all files)
           STEP C : click save private key .
                     PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes.
                     A passphrase on a private key is an extra layer of protection.
                     Even if your private key is discovered, it can't be used without the passphrase. T
                     The downside to using a pass phrase is that it makes automation harder because human intervention is needed to log on to an instance.
           STEP D : Save he .ppk file with the same name as of .pem file in a secure location .
        4. Now connect using PUTTY
           STEP A : Start PuTTY (from the Start menu, choose All Programs, PuTTY, PuTTY).
           STEP B : In the Category pane, choose Session and complete the following fields:
                    --> In the Host Name box, do one of the following :
                        •(Public DNS) To connect using your instance's public DNS name, enter my-instance-user-name@my-instance-public-dns-name.
                        •(IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance'sIPv6 address, enter my-instance-user-name@my-instance-IPv6-address.
                    --> DO NOT forget to add "user-name@" before "DNS" name . #ec2-user@ec2-18-188-73-18.us-east-2.compute.amazonaws.com
                    --> Ensure that the Port value is 22.
                    --> Under Connection type, select SSH.
           STEP C : (Optional) You can configure PuTTY to automatically send 'keepalive' data at regular intervals to keep the session active.
                    This is useful to avoid disconnecting from your instance due to session inactivity.
                    In the Category pane, choose Connection, and then enter the required interval in the Seconds between keepalives field.
                    For example, if your session disconnects after 10 minutes of inactivity, enter 180 to configure PuTTY to send keepalive data every 3 minutes.
           STEP D : In the Category pane, expand Connection, expand SSH, and then choose Auth. Complete the following:
                    --> Choose Browser
                    --> Select the .ppk file that you generated for your key pair and choose Open
                    --> (Optional) If you plan to start this session again later, you can save the session information for future use.
                        Under Category, choose Session, enter a name for the session in Saved Sessions, and then choose Save.
                    --> Choose Open.
           STEP E : If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host to which you are connecting.
                    --> (Optional) Verify that the fingerprint in the security alert dialog box matches the fingerprint that you previously obtained .
                        If these fingerprints don't match, someone might be attempting a "man-in-the-middle" attack. If they match, continue to the next step
                    --> Choose Yes. A window opens and you are connected to your instance.

--> CONNECT USING POWERSHELL : // To connect to LINUX instances using SSH instead of PUTTY for WINDOWS_version > 10 .
          Type in SSH in Powershell or cmd in WINDOWS  and if it says SSH is not installed, then you have to use PUTTY.
          chmod 400 <keyfile> does not work in windows . You need to go to file settings and then change settings.
          --> https://tcsglobal.udemy.com/course/aws-certified-solutions-architect-associate-saa-c02/learn/lecture/16560336#overview

--> CONNECT USING SESSION MANAGER :
          Session Manager is a fully managed AWS Systems Manager capability that lets you manage your AmazonEC2 instances through an interactive one-click browser-based shell or through the AWS CLI.
          You can use Session Manager to start a session with an instance in your account.
          After the session is started, you can run bash commands as you would through any other connection type.
          ///ly for WSL -> download , copy private key to WSL , do an ssh command to connect .

--> EC2-Instance-Connect is only available for LINUX based Instances .
    For windows we have RDP & SESSION MANAGER


NOTE :
--------
Question --> I was able to connect yesterday to an Instance , but today I can't ?
This is probably because you have stopped your EC2 instance and then started it again today.
When you do so, the public IP of your EC2 instance will change. Therefore, in your command, or Putty configuration, please make sure to edit and save the new public IP.

CONNECTING TO A WINDOWS INSTANCE :
---------------------------------
Similar to LINUX but we need exta RDP instead of ssh :
  --> Choose HTTP  from the Type list, and make sure that Source is set to Anywhere (0.0.0.0/0).
  --> Choose HTTPS from the Type list, and make sure that Source is set to Anywhere(0.0.0.0/0).
  --> Choose RDP   from the Type list, In the Source box, choose My IP to automatically populate the field with the public IPv4 address of your local computer.

  Alternatively, choose Custom and specify the public IPv4 address of your computer or network in CIDR notation.
  To specify an individual IP address in CIDR notation, add the routing suffix /32, for example,203.0.113.25/32.
  If your company allocates addresses from a range, specify the entire range, such as 203.0.113.0/24.

To connect to a Windows instance, you must retrieve the initial administrator password and then specify this password when you connect to your instance using Remote Desktop.
It takes a few minutes after instance launch before this password is available.
The name of the administrator account depends on the language of the operating system.
For example, for English, it's Administrator, for French it's Administrateur, and for Portuguese it's Administrador.

Once we click CONNECT :
  --> Session Manager
  --> RDP CLIENT
      --> We can see the password here // Below -> CLICK on GET-PASSWORD
      --> This takes us to another page -> BROWSE and provide the key file we have downloaded.
      --> Alternatively we can also copy paste the contents of key file .
      --> Click DECRYPT Password --> Password gets visible
      --> Save the Username & password from that page in a safe place. You need this password to connect to the instance.
      --> Alternatively we can create it every time we want to connect using above steps.
      --> Choose Download remote desktop file. Provide the Password upon opening the RDP.


CLOUD WATCH ALARMS : --> Select the instance --> choose Actions --> Monitor and troubleshoot --> Manage CloudWatch alarms.
------------------------ Alternatively, you can choose the plus sign ( + ) in the Alarm status column.

Using Amazon CloudWatch alarm actions, you can create alarms that automatically stop, terminate, reboot, or recover your instances.
You can use the stop or terminate actions to help you save money when you no longer need an instance to be running.
You can use the reboot and recover actions to automatically reboot those instances or recover them onto new hardware if a system impairment occurs.
You can add the stop, terminate, reboot, or recover actions to any alarm that is set on an Amazon EC2 per-instance metric.
We need to pre create an SNS Topic to receive notification.
--> we can make alarms to do the following : STOP - TERMINATE - REBOOT - RECOVER

============================================================================================================
############################################################################################################
============================================================================================================
###### SKIP THIS SECTION - just for my reference.

[[ Instance - Instance types t2 - AMI market / custom - volumes ebs store - vpc subnet - security group firewall - tags - key pair - replication - ELB  ECS cloud formation - cloud watch for logs ]]
[[ start - hibernate - stop - terminate - retire - reboot - recover ]]
[[ Regions - availability zones - local zones - outposts & Wavelengths - Edge locations ]]
[[ instance store - from s3 - no stopping - conversion || EBS - boot volume from S3 - default terminate , can be changed - recovery upon failure // 5 steps ]]
[[ instance types - general t - compute optimized c // gaming webservers scientific - memory r - storage i // high IO - accelerated computing p // graphics processing ]]
[[ ON-DEMAND short term unpredictable apps & no upfront ]]
[[ SPOT 90% off 2mint wait time ,for interrupted jobs feasible at low price  ]]
[[ DEDICATED 70% off, physical server BYOL, per host billing - DEDICATED instances, per instance billing no-BYOL - ]]
[[ RESERVED 75%off,for all ec2 resources , 1 to 3 years, commitment to configuration type region, apps with steady state & predictable usage , capacity reservation in an AZ, CONVIRTABLE reserved STANDARD reserved, ]]
[[ SAVINGS 72%off,only EC2 Fargate Lambda, $0.001, consistent amount of usage $/hour, 1 to 3 years regardless of instance configuration, COMPUTE savings(flexible ) EC2 instance savings (commit to family) , ]]
[[ EBS - block storage, to run a db, multiple EBS to single instance, persistent, attach detach, screenshots to S3, SSD HDD - similar to opening a closing a laptop  ]]
[[ EBS block level  - EFS block - S3 object level - EFS file level - Root storage for booting - used when data is not stored in root device ]]

============================================================================================================
############################################################################################################
============================================================================================================
EC2-UserData :
----------------
Used to boot-strap an instance. // Launch custom scripts when system starts.
The script is only run once at the instance first start, useful for " Installing updates, download common files from internet etc;"
Runs only with root user so all commands have sudo permissions and more the script, more the start time of instance.
Option available at STEP-3 : CONFIGURE INSTANCE DETAILS.

 EXAMPLE :
 #!/bin/sh
 sudo yum update -y
 sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
 cat /etc/system-release // Should give the output Amazon linux 2
 sudo yum install -y httpd
 sudo systemctl start httpd
 sudo systemctl enable httpd

NETWORKING IN EC2 : IP ADDRESSES ARE ALLOCATED USING DHCP !!
============================================================
Amazon EC2 and Amazon VPC support both the IPv4 and IPv6 addressing protocols. --> Default is IPv4 , you can not disable this behaviour .
When you create a VPC, you must specify an IPv4 CIDR block (a range of private IPv4 addresses).
You can optionally assign an IPv6 CIDR block to your VPC and subnets, and assign IPv6 addresses from that block to instances in your subnet.
All IPv6 addresses are reachable over the Internet. So there is no concept of public and private IPV6.

  PRIVATE IPV4 - INTERNAL DNS : (By default IP is assigned)
        A private IPv4 address is an IP address that's not reachable over the Internet.
        You can use private IPv4 addresses for communication between instances in the same VPC.
        we can't resolve the internal DNS hostname outside of the VPC.
        An instance receives a primary private IP address from the IPv4 address range of the subnet.

        When you launch an instance, we allocate a primary private IPv4 address for the instance.
        Each instance is also given an internal DNS hostname that resolves to the primary private IPv4 address;
         --> for example, ip-10-251-50-12.ec2.internal
        You can use the internal DNS hostname for communication between instances in the same VPC, but we can't resolve the internal DNS hostname outside of the VPC.

        Each instance has a default network interface (eth0) that is assigned the primary privateIPv4 address.
        You can also specify additional private IPv4 addresses, known as secondary private IPv4addresses.
        Unlike primary private IP addresses, secondary private IP addresses can be reassigned from one instance to another.
        A private IPv4 address, regardless of whether it is a primary or secondary address, remains associated with the network interface when the instance is stopped and started, or hibernated and started, and is released when the instance is terminated.

  PUBLIC IPV4 - EXTERNAL DNS : (If Default VPC is used -> Assigned , If Non-Default VPC is used -> Not assigned)
  #### PUBLIC IP addressing is available only during launch and is disassociated when ec2 is stopped, hibernated etc;
  #### So to alter this , we can use ELASTIC IP after launch and associate or disassociate accordingly. only IPV4 , does not support IPV6.

        A public IP address is an IPv4 address that's reachable from the Internet.
        You can use public addresses for communication between your instances and the Internet.
        We resolve an external DNS hostname to the public IP address of the instance from outside its VPC, and to the private IPv4 address of the instance from inside its VPC.
        The public IP address is mapped to the primary private IP address through network address translation (NAT).

        Each instance that receives a public IP address is also given an external DNS hostname; for example, ec2-203-0-113-25.compute-1.amazonaws.com.
        When you launch an instance in a default VPC, we assign it a public IP address by default.
        When you launch an instance into a nondefault VPC, the subnet has an attribute that determines whether instances launched into that subnet receive a public IP address from the public IPv4 address pool.
        By default, we don't assign a public IP address to instances launched in a nondefault subnet.

        You can control whether your instance receives a public IP address as follows:
            • FOR NON-DEFAULT  :
              Modifying the public IP addressing attribute of your subnet.
              ( https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip )
            • FOR DEFAULT/NON-DEFAULT :
              Enabling or disabling the public IP addressing feature during launch, which overrides the subnet's public IP addressing attribute
                --> launch -> select -> in CONFIGURE INSTANCE -> Auto-assign Public IP -> enable/disable

        You cannot manually associate or disassociate a public IP address from your instance after launch. But it is released when :
            --> Instance is stopped, hibernated, or terminated.
                Your stopped or hibernated instance receives a new public IP address when it is started.
            --> Instance is associated with an Elastic IP address with it.
                When you disassociate the Elastic IP address from your instance, it receives a new public IP address.
            --> If the public IP address of your instance in a VPC has been released, it will not receive a new one if there is more than one network interface attached to your instance.
            --> Instance's public IP address is released while it has a secondary private IP address that is associated with an Elastic IP address, the instance does not receive a new public IP address

        So if you require a persistent public IP address that can be associated to and from instances as you require, use an Elastic IP address instead.
        To assign additional public IPv4 addresses to an instance, you must allocate Elastic IP addresses and associate them with the instance or its network interfaces.

        When you add a second network interface, the system can no longer auto-assign a public IPv4 address.
        You will not be able to connect to the instance over IPv4 unless you assign an Elastic IP address to the primary network interface (eth0).
        You can assign the Elastic IPaddress after you complete the Launch.
        The public IPv4 address is displayed as a property of the network interface in the console, but it's mapped to the primary private IPv4 address through NAT.

        CONSIDERATIONS :
        -----------------
        1. You can't manually disassociate the public IP address from your instance after launch.
           Instead, it's automatically released in certain cases, after which you cannot reuse it.
           If you require a persistent public IP address that you can associate or disassociate at will, assign an Elastic IP address to the instance after launch instead.

        2. You cannot auto-assign a public IP address if you specify more than one network interface.
           Additionally, you cannot override the subnet setting using the auto-assign public IP feature if you specify an existing network interface for eth0.

        3. The public IP addressing feature is only available during launch.
           However, whether you assign a public IP address to your instance during launch or not, you can associate an Elastic IP address with your instance after it's launched.
           You can also modify your subnet's public IPv4 addressing behaviour.

  AMAZON DNS SERVER :
        Amazon provides a DNS server that resolves Amazon-provided IPv4 DNS hostnames to IPv4 addresses.
        The Amazon DNS server is located at the base of your VPC network range plus two.

  ELASTIC IP ADDRESS - IPV4: // AWS do not support Elastic IP addresses for IPv6.
        An Elastic IP address is a static public IPv4 address that you can allocate to your account.
        You can associate it to and disassociate it from instances as you require. It's allocated to your account until you choose to release it.
        AWS do not support Elastic IP addresses for IPv6. The public IP addressing feature is only available during launch.
        However, whether you assign a public IP address to your instance during launch or not, you can associate an Elastic IP address with your instance after it's launched

  IPV6 ADDRESSES :
        If your VPC and subnet have IPv6 CIDR blocks associated with them, you can assign an IPv6 address to your instance during or after launch.
        You can optionally associate an IPv6 CIDR block with your VPC, and associate IPv6 CIDR blocks with your subnets.
        The IPv6 CIDR block for your VPC is automatically assigned from Amazon's pool of IPv6addresses. you cannot choose the range yourself.
        AWS  do not support IPv6 DNS hostnames for your instance.
        To  give an instance a public IP6
              --> launch -> select -> in CONFIGURE INSTANCE -> Auto-assign IPV6 -> enable/disable
        IPV6 is assigned to your instance if :
          • Your subnet is configured to automatically assign an IPv6 address to an instance during launch.
          • You assign an IPv6 address to your instance during launch.
          • You assign an IPv6 address to the primary network interface of your instance after launch.
          • You assign an IPv6 address to a network interface in the same subnet, and attach the network interface to your instance after launch
        You can assign additional IPv6 addresses to your instance by assigning them to a network interface attached to your instance.

       An IPv6 address persists when you stop and start, or hibernate and start, your instance, and is released when you terminate your instance.
       You cannot reassign an IPv6 address while it's assigned to another network interface—you must first unassign it.

 MULTIPLE IP ADDRESSES :
 #### You can assign multiple IPV4/IPV6 addresses To a single network interface eth0 or You can add a device [ network interface ] and add IP's
 #### We can do this while launching -> launch -> configure Instance -> below Network Interfaces -> add device
 #### or after launching Instance  -> select ec2 -> instance -> actions -> networking -> manage Ip addresses .

    • Host multiple websites on a single server by using multiple SSL certificates on a single server and associating each certificate with a specific IP address.
    • Operate network appliances, such as firewalls or load balancers, that have multiple IP addresses for each network interface.
    • Redirect internal traffic to a standby instance in case your instance fails, by reassigning the secondary IP address to the standby instance.
    • You can assign a secondary private IPv4 address to any network interface. The network interface need not be attached to the instance .
    • You can assign multiple IPv6 addresses to a network interface that's in a subnet that has an associated IPv6 CIDR block.

    -> launch -> configure Instance -> below Network Interfaces -> add device
    When you add a second network interface, the system can no longer auto-assign a publicIPv4 address.
    You will not be able to connect to the instance over IPv4 unless you assign an Elastic IP address to the primary network interface (eth0).
    You can assign the Elastic IP address after you complete the Launch .

 HOW MULTIPLE IP ADDRESSES WORK :
 --> You can assign a secondary private IPv4 address to any network interface. The network interface need not be attached to the instance.
 --> You can assign multiple IPv6 addresses to a network interface that's in a subnet that has an associated IPv6 CIDR block.
 --> You must choose a secondary IPv4 address from the IPv4 CIDR block range of the subnet for the network interface.
 --> You must choose IPv6 addresses from the IPv6 CIDR block range of the subnet for the network interface.
 --> You associate security groups with network interfaces, not individual IP addresses.
     Therefore, each IP address you specify in a network interface is subject to the security group of its network interface.
 --> Multiple IP addresses can be assigned and unassigned to network interfaces attached to running or stopped instances.
 --> Secondary private IPv4 addresses that are assigned to a network interface can be reassigned to another one if you explicitly allow it.
 --> An IPv6 address cannot be reassigned to another network interface; you must first unassign the IPv6 address from the existing network interface.
 --> When assigning multiple IP addresses to a network interface using the command line tools or API, the entire operation fails if one of the IP addresses can't be assigned.
 --> Primary private IPv4 addresses, secondary private IPv4 addresses, Elastic IP addresses, and IPv6 addresses remain with a secondary network interface when it is detached from an instance or attached to an instance.
 --> Although you can't detach the primary network interface from an instance, you can reassign the secondary private IPv4 address of the primary network interface to another network interface.

              | Primary-eth0  - N/W interface - 1 - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card
              | Secondary     - N/W interface - 2 - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card
  INSTANCE -->|     .
              |     .
              | Secondary     - N/W interface - n - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card

        ****Scenario explained in Reference pic , Multiple-network_interface available at cloud_AWS/0_Reference_pics.

      ** You can assign a secondary private IPv4 address to an instance, associate an Elastic IPv4 address with a secondary private IPv4 address, and unassign a secondary private IPv4 address.
      ** There is no concept of public / private IPV6. They are globally reachable as they are unique.
      ** Secondary private IPv4 addresses that are assigned to a network interface can be reassigned to another one if you explicitly allow it.
      ** An IPv6 address cannot be reassigned to another network interface; you must first unassign the IPv6 address from the existing network interface.
      ** you can't detach the primary network interface from an instance.

  The following list explains how multiple IP addresses work with Elastic IP addresses (IPv4 only):
  --> Each private IPv4 address can be associated with a single Elastic IP address, and vice versa.
  --> When a secondary private IPv4 address is reassigned to another interface, the secondary private IPv4 address retains its association with an Elastic IP address.
  --> When a secondary private IPv4 address is unassigned from an interface, an associated Elastic IP address is automatically disassociated from the secondary private IPv4 address.

 ELASTIC IP ADDRESSES :( public IPv4 address // no IPV6 ) -> EC2 -> navigational panel -> Elastic IP's [-> Actions -> associate/disassociate/Release etc;]
 --> If you require a persistent public IP address that can be associated to and from instances as you require, use an Elastic IP address instead.

 --> An Elastic IP address is a static IPv4 address designed for dynamic cloud computing.
     By using an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account.
     An Elastic IP address is allocated to your AWS account, and is yours until you release it.

 --> An Elastic IP address is a public IPv4 address, which is reachable from the internet.
     If your instance does not have a public IPv4 address, you can associate an Elastic IP address with your instance to enable communication with the internet.
     For example, this allows you to connect to your instance from your local computer.

 --> To ensure efficient use of Elastic IP addresses, we impose a small hourly charge if an Elastic IP address is not associated with a running instance, or if it is associated with a stopped instance or an unattached network interface.
     While your instance is running, you are not charged for one Elastic IP address associated with the instance, but you are charged for any additional Elastic IP addresses associated with the instance.

    --> An Elastic IP address is static; it does not change over time.
    --> To use an Elastic IP address, you first allocate one to your account, and then associate it with your instance or a network interface.
    --> When you associate an Elastic IP address with an instance, it is also associated with the instance's primary network interface.
        When you associate an Elastic IP address with a network interface that is attached to an instance, it is also associated with the instance.
    --> When you associate an Elastic IP address with an instance or its primary network interface, the instance's public IPv4 address (if it had one) is released back into Amazon's pool of public IPv4 addresses.
        You cannot reuse a public IPv4 address, and you cannot convert a public IPv4 address to an Elastic IP address.
    --> You can disassociate an Elastic IP address from a resource, and then associate it with a different resource.
        To avoid unexpected behaviour, ensure that all active connections to the resource named in the existing association are closed before you make the change.
        After you have associated your Elastic IP address to a different resource, you can reopen your connections to the newly associated resource.
    --> A disassociated Elastic IP address remains allocated to your account until you explicitly release it.
    --> When you associate an Elastic IP address with an instance that previously had a public IPv4 address, the public DNS host name of the instance changes to match the Elastic IP address.
    --> We resolve a public DNS host name to the public IPv4 address or the Elastic IP address of the instance outside the network of the instance, and to the private IPv4 address of the instance from within the network of the instance.
    --> An Elastic IP address comes from Amazon's pool of IPv4 addresses, or from a custom IP address pool that you have brought to your AWS account.
    --> When you allocate an Elastic IP address from an IP address pool that you have brought to your AWS account, it does not count toward your Elastic IP address limits.
    --> When you allocate the Elastic IP addresses, you can associate the Elastic IP addresses with a network border group.
        This is the location from which we advertise the CIDR block. Setting the network border group limits the CIDR block to this group.
        If you do not specify the network border group, we set the border group containing all of the Availability Zones in the Region (for example, us-west-2).
    --> An Elastic IP address is for use in a specific network border group only.
    --> An Elastic IP address is for use in a specific Region only, and cannot be moved to a different Region.

    By default, all AWS accounts are limited to five (5) Elastic IP addresses per Region, because public (IPv4)internet addresses are a scarce public resource.
    If you're associating an Elastic IP address with your instance to enable communication with the internet, you must also ensure that your instance is in a public subnet.


  NETWORK INTERFACES / ELASTIC NETWORK INTERFACE :
  --------------------------------------------------
  Each instance has a default network interface, called the primary network interface eth0.
  You cannot detach a primary network interface from an instance. You can create and attach additional network interfaces.
  If you have an Elastic IP address, you can associate it with one of the private IPv4 addresses for the network interface.
  You can associate one Elastic IP address with each private IPv4 address.

  While launching an instance , In the Network Interfaces section, do the following to add an secondary network interface.
   --> To add another network interface, choose Add Device.
       The console enables you to specify up to two network interfaces when you launch an instance.
       After you launch the instance, choose Network Interfaces in the navigation pane to add additional network interfaces.
   --> When you add a second network interface, the system can no longer auto-assign a public IPv4 address.
       You will not be able to connect to the instance over IPv4 unless you assign an Elastic IP address to the primary network interface (eth0).
       You can assign the Elastic IP address after you complete the Launch wizard.
   --> For each network interface, under Secondary IP addresses, choose Add IP, and then enter a private IP address from the subnet range, or accept the default Auto-assign value to let Amazon select an address.
   --> After you assign a secondary private IPv4 address to your instance, you need to configure the operating system on your instance to recognize the secondary private IP address.
       It is not done automatically .

   An elastic network interface is a logical networking component in a VPC that represents a virtual network card.
   It can include the following attributes:
    - A primary private IPv4 address from the IPv4 address range of your VPC
    - One or more secondary private IPv4 addresses from the IPv4 address range of your VPC
    - One Elastic IP address (IPv4) per private IPv4 address
    - One public IPv4 address
    - One or more IPv6 addresses
    - One or more security groups
    - A MAC address
    - A source/destination check flag


              | Primary-eth0  - N/W interface - 1 - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card
              | Secondary     - N/W interface - 2 - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card
  INSTANCE -->|     .
              |     .
              | Secondary     - N/W interface - n - [ Primary private IPV4 - Elastic IP ] , [ Secondary private IPV4 - Elastic IP ] . . . , Public IPV4 , IPV6-1 , IPV6-2... , Security Group-1 , Security Group-2... ,MAC address <===> Attached to a Network card


   If you disassociate an Elastic IP address from a network interface, you can release it back to the address pool.
   This is the only way to associate an Elastic IP address with an instance in a different subnet or VPC, as network interfaces are specific to subnets.
   You can specify whether the network interface should be automatically deleted when you terminate the instance to which it's attached.

   Attaching multiple network interfaces to an instance is useful when you want to:
   ****Scenario explained in Reference pic , Multiple-network_interface available at cloud_AWS/0_Reference_pics.
   --> Create a management network.
   --> Use network and security appliances in your VPC.
   --> Create dual-homed instances with workloads/roles on distinct subnets.
   --> Create a low-budget, high-availability solution.

  REQUEST MANAGED NETWORK INTERFACE :
  -------------------------------------
  A requester-managed network interface is a network interface that an AWS service creates in your VPC.
  This network interface can represent an instance for another service, such as an Amazon RDS instance, or it can enable you to access another service or resource, such as an AWS PrivateLink service, or an Amazon ECS task.
  You cannot modify or detach a requester-managed network interface.
  If you delete the resource that the network interface represents, the AWS service detaches and deletes the network interface for you.
  To change the security groups for a requester-managed network interface, you might have to use the console or command line tools for that service.

 NETWORK CARDS :
 -----------------
   Instances with multiple network cards provide higher network performance, including bandwidth capabilities above 100 Gbps and improved packet rate performance.
   Each network interface is attached to a network card. The primary network interface must be assigned to network card index 0.
   If you enable Elastic Fabric Adapter (EFA) when you launch an instance that supports multiple network cards, all network cards are available.
   You can assign up to one EFA per network card. An EFA counts as a network interface.
   --> Only instance of type P4D supports multiple network cards ( 4 cards). All other instance types support one network card.

   EC2-CLASSIC :
    With EC2-Classic, your instances run in a single, flat network that you share with other customers.
    With Amazon VPC, your instances run in a virtual private cloud (VPC) that's logically isolated to your AWS account.
    The EC2-Classic platform was introduced in the original release of Amazon EC2.
    If you created your AWS account after 2013-12-04, it does not support EC2-Classic, so you must launch your Amazon EC2instances in a VPC

 SECURITY GROUPS :
 ------------------
 A security group is a set of firewall rules that control the traffic for your instance.
 you can add rules to allow specific traffic to reach your instance.
 For example, if you want to set up a web server and allow Internet traffic to reach your instance, add rules that allow unrestricted access to the HTTP and HTTPS ports.
 The rules of a security group control the inbound traffic that's allowed to reach the instances that are associated with the security group.
 The rules also control the outbound traffic that's allowed to leave them.
    • By default, security groups allow all outbound traffic.
    • Security group rules are always permissive. you can't create rules that deny access.
    • Security group rules enable you to filter traffic based on protocols and port numbers.
    • You can add and remove rules at any time and they are automatically applied to the instances that are associated with the security group.

STORAGE EC2 :
---------------
  AMAZON EBS :
    Amazon EBS provides durable, block-level storage volumes that you can attach to a running instance.
    You can use Amazon EBS as a primary storage device for data that requires frequent and granular updates.
    For example, Amazon EBS is the recommended storage option when you run a database on an instance.
    An EBS volume behaves like a raw, unformatted, external block device that you can attach to a single instance but  multiple volumes can be attached to an instance.
    The volume persists independently from the running life of an instance.
    This enables you to stop and restart the instance at a subsequent time, which is similar to shutting down your laptop and restarting it when you need it again.
    You can also detach and attach EBS from one instance to other.
    Regularly back up your EBS volumes using Amazon EBS snapshots , and create an Amazon Machine Image (AMI) from your instance to save the configuration as a template for launching future instances.

    • Solid state drives (SSD)  :
      Optimized for transactional workloads involving frequent read/write operations with small I/O size, where the dominant performance attribute is IOPS.
      Solid state drives use flash memory to deliver superior performance and durability.
      Solid state drives deliver faster load times for games, applications, and movies. Because of the technology they use, SSDs are lighter and better able to withstand movement and droppage.
      Does not have moving parts.

      // If you want to have faster-loading speed, you can choose an SSD.
      // If your computer needs more space to store files, you can choose an HDD

    • Hard disk drives (HDD) :
      Optimized for large streaming workloads where the dominant performance attribute is throughput.
      Throughput is defined as the amount of information or material passed put through or delivered in a specific period of time.
      An example of throughput is twenty screens of copy being printed within a five minute period.
      HDDs rely on spinning disks, or platters, to read and write data.
      Hard disk drives consist of one or more magnetically-sensitive platters, an actuator arm with a read/write head on it for each platter, and a motor to spin the platters and move the arms.
      There is also an I/O controller and firmware that tells the hardware what to do and communicates with the rest of the system.
      Each time you ask your computer to retrieve or update data, the I/O controller tells the actuator arm where that data is located, and the read/write head gathers the data by reading the presence or absence of a charge in each address.
      If the request was to update the data, the read/write head changes the charge on the affected track and sector.
      The time it takes for the platter to spin and the actuator arm to find the correct track and sector is known as latency
      DRAWBACK is the mechanical parts and address searching

                        Cost 	          Speed 	Durability 	  Highest capacity 	Energy efficiency
                  HDD 	Cheaper 	      Slower 	Less durable 	10TB 	            Use more energy
                  SSD 	More expensive 	Faster 	More durable 	4TB 	            Use less energy


    • Previous generation       — Hard disk drives that can be used for workloads with small data sets where data is accessed infrequently and performance is not of primary importance.

 // You can also attach additional EBS volumes after launching an instance, but not instance store volumes.

  AMAZON INSTANCE STORE :
    Many instances can access storage from disks that are physically attached to the host computer.
    This disk storage is referred to as instance store. Instance store provides temporary block-level storage for instances.
    The data on an instance store volume persists only during the life of the associated instance ;if you stop, hibernate, or terminate an instance, any data on instance store volumes is lost
    This is an inexpensive way to launch instances where data is not stored to the root device. For example, some customers use this option to run large web sites where each instance is a clone to handle web traffic.

  AMAZON EFS : (File System)
    Amazon EFS provides scalable file storage for use with Amazon EC2.
    You can create an EFS file system and configure your instances to mount the file system.
    You can use an EFS file system as a common data source for workloads and applications running on multiple instances.
    To access your file system, you mount the file system on an Amazon EC2 Linux-based instance using the standard Linux mount command and the file system’s DNS name.
    Once you’ve mounted, you can work with the files and directories in your file system just like you would with a local file system.
    Amazon EFS is compatible with all Amazon EC2 instance types and is accessible from Linux-based AMIs.

  AMAZON S3 :
    Amazon S3 provides access to reliable and inexpensive data storage infrastructure.
    It is designed to make web-scale computing easier by enabling you to store and retrieve any amount of data, at any time, from within Amazon EC2 or anywhere on the web.
    For example, you can use Amazon S3 to store backup copies of your data and applications.
    Amazon EC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs.

  ROOT STORAGE :
    Every time you launch an instance from an AMI, a root storage device is created for that instance.
    The root storage device contains all the information necessary to boot the instance.
    You can specify storage volumes in addition to the root device volume when you create an AMI or launch an instance using block device mapping

  SNAPSHOTS : EC2 -> EBS -> Snapshots -> create
  Snapshots are incremental backups, which means that only the blocks on the device that have changed after your most recent snapshot are saved.
  This minimizes the time required to create the snapshot and saves on storage costs by not duplicating data.
  you can copy it from one AWS Region to another, or within the same Region. -> Snapshots -> Actions -> copy
  Amazon S3 server-side encryption (256-bit AES) protects a snapshot's data in transit during a copy operation.
  Regularly back up your EBS volumes using Amazon EBS snapshots , and create an Amazon Machine Image (AMI) from your instance to save the configuration as a template forlaunching future instances.


====================

EC2 PRICING :
---------------
There are five ways to pay for Amazon EC2 instances: On-Demand, Savings Plans, Reserved Instances, and Spot Instances.
You can also pay for Dedicated Hosts which provide you with EC2 instance capacity on physical servers dedicated for your use.

ON-DEMAND :
-------------
With On-Demand instances, you pay for compute capacity by the hour or the second depending on which instances you run.
No longer-term commitments or upfront payments are needed.
You can increase or decrease your compute capacity depending on the demands of your application and only pay the specified per hourly rates for the instance you use.
On-Demand instances are recommended for:

   Users that prefer the low cost and flexibility of Amazon EC2 without any up-front payment or long-term commitment
   Applications with short-term, spiky, or unpredictable workloads that cannot be interrupted
   Applications being developed or tested on Amazon EC2 for the first time

SPOT INSTANCES :
-----------------
Amazon EC2 Spot instances allow you to request spare Amazon EC2 computing capacity for up to 90% off the On-Demand price.
Spot instances are recommended for:

      Applications that have flexible start and end times
      Applications that are only feasible at very low compute prices
      Users with urgent computing needs for large amounts of additional capacity

SAVINGS PLAN :
---------------
Savings Plans are a flexible pricing model that offer low prices on EC2 and Fargate usage, in exchange for a commitment to a consistent amount of usage (measured in $/hour) for a 1 or 3 year term.

RESERVED INSTANCES :
--------------------
Reserved Instances provide you with a significant discount (up to 75%) compared to On-Demand instance pricing.
In addition, when Reserved Instances are assigned to a specific Availability Zone, they provide a capacity reservation, giving you additional confidence in your ability to launch instances when you need them.
For applications that have steady state or predictable usage, Reserved Instances can provide significant savings compared to using On-Demand instances.
Reserved Instances are recommended for:

   Applications with steady state usage
   Applications that may require reserved capacity
   Customers that can commit to using EC2 over a 1 or 3 year term to reduce their total computing costs




==============

AWS Fargate :

AWS Fargate is a serverless compute engine for containers that works with both Amazon Elastic Container Service (Amazon ECS) and Amazon Elastic Kubernetes Service (Amazon EKS).
Fargate makes it easy for you to focus on building your applications.
Fargate removes the need to provision and manage servers, lets you specify and pay for resources per application, and improves security through application isolation by design.
