KEY MANAGEMENT SERVICE : KMS <--> CUSTOMER MASTER KEYS [ CMK ]
---------------------------
It is a managed service that makes it easy for you to create and control customer master keys (CMKs), the encryption keys used to encrypt your data.
AWS KMS CMKs are protected by hardware security modules (HSMs).
AWS KMS is integrated with most other AWS services that encrypt your data.
AWS KMS is also integrated with AWS CloudTrail to log use of your CMKs for auditing, regulatory, and compliance needs.
You can use your CMKs in cryptographic operations .
KMS enables you to maintain control over who can use your customer master keys and gain access to your encrypted data.

      • Encrypt, decrypt, and re-encrypt data with symmetric or asymmetric CMKs
      • Sign and verify messages with asymmetric CMKs
      • Generate exportable symmetric data keys and asymmetric data key pairs
      • Generate random numbers suitable for cryptographic applications

AWS KMS is integrated with AWS CloudTrail, a service that delivers log files to an Amazon S3 bucket that you designate.
By using CloudTrail you can monitor and investigate how and when your CMKs have been used and by whom.

CUSTOMER MASTER KEYS CMK's:
-------------------------
#### AWS OWNED CMK _ AWS MANAGED CMK _ CUSTOMER MANAGED CMK
A customer master key (CMK) is a logical representation of a master key.
The CMK includes metadata, such as the key ID, creation date, description, and key state.
The CMK also contains the key material used to encrypt and decrypt data.
AWS KMS supports symmetric and asymmetric CMKs.

  SYMMETRIC KEYS :
  --> A symmetric CMK represents a 256-bit key that is used for encryption and decryption.
  --> both encryption and decryption is done by same key .

  ASYMMETRIC KEYS :
  --> An asymmetric CMK represents an RSA key pair that is used for encryption and decryption or signing and verification (but not both).
  --> This has a Public and a private key pair.

CMKs are created in AWS KMS. Symmetric CMKs and the private keys of asymmetric CMKs never leave AWS KMS unencrypted.
Some AWS services encrypt your data by default with an AWS owned CMK or an AWS managed CMK.
Other AWS services offer to encrypt your data under a customer managed CMK that you choose.

CUSTOMER MANAGED CMK :
-----------------------
Customer managed CMKs are CMKs in your AWS account that you create, own, and manage.
You have full control over these CMKs, including establishing and maintaining.
Customer managed CMKs appear on the Customer managed keys page of the AWS Management Console for AWS KMS.
For customer managed CMKs, the value of the KeyManager field of the DescribeKey response is CUSTOMER

AWS MANAGED CMK :
-----------------
AWS managed CMKs are CMKs in your account that are created, managed, and used on your behalf by an AWS service that is integrated with AWS KMS.
Some AWS services support only an AWS managed CMK. Others use an AWS owned CMK or offer you a choice of CMKs.
you cannot manage these CMKs, rotate them, or change their key policies.
And, you cannot use AWS managed CMKs in cryptographic operations directly; the service that creates them uses them on your behalf.

AWS OWNED CMK :
-----------------
AWS owned CMKs are a collection of CMKs that an AWS service owns and manages for use in multiple AWS accounts.
Although AWS owned CMKs are not in your AWS account, an AWS service can use its AWS owned CMKs to protect the resources in your account.
You cannot view, use, track, or audit them. You are not charged a monthly fee or usage fee for AWS owned CMKs

##### For internal use , AWS uses the CUSTOMER MANAGED CMK , AWS MANAGED CMK and AWS OWNED CMK
##### AWS KMS also provides SYMMETRIC DATA KEYS  and ASYMETRIC DATA KEY PAIRS that are designed to be used for client-side cryptography outside of AWS KMS.


SYMMETRIC DATA KEYS : View Reference pics.
----------------------
Data keys are encryption keys that you can use to encrypt data, including large amounts of data and other data encryption keys.
You can use AWS KMS customer master keys (CMKs) to generate, encrypt, and decrypt data keys.
However, AWS KMS does not store, manage, or track your data keys, or perform cryptographic operations with data keys.
You must use and manage data keys outside of AWS KMS.

    ENCRYPT :
    AWS KMS cannot use a data key to encrypt data.
    But you can use the data key outside of KMS, such as by using OpenSSL or a cryptographic library like the AWS Encryption SDK.
    After using the plaintext data key to encrypt data, remove it from memory as soon as possible.
    You can safely store the encrypted data key with the encrypted data so it is available to decrypt the data.

    DECRYPT :
    To decrypt your data, pass the encrypted data key to the Decrypt operation.
    AWS KMS uses your CMK to decrypt the data key and then it returns the plaintext data key.
    Use the plaintext data key to decrypt your data and then remove the plaintext data key from memory as soon as possible.

ASYMETRIC DATA KEY PAIRS :
--------------------------
Data key pairs are asymmetric data keys that consist of a mathematically-related public key and private key.
They are designed to be used for client-side encryption and decryption or signing and verification outside of AWS KMS.
Unlike the data key pairs that tools like OpenSSL generate, AWS KMS protects the private key in each data key pair under a symmetric CMK in AWS KMS that you specify.
However, AWS KMS does not store, manage, or track your data key pairs, or perform cryptographic operations with data key pairs.
You must use and manage data key pairs outside of AWS KMS.

 AWS KMS supports the following types of data key pairs:
    • RSA key pairs: RSA_2048, RSA_3072, and RSA_4096   --> encrypt , decrypt & verify and sign
    • Elliptic curve key pairs, ECC_NIST_P256, ECC_NIST_P384, ECC_NIST_P521, and ECC_SECG_P256K1 --> Only verify and sign

    ENCRYPT :
    When you encrypt with a data key pair, you use the public key of the pair to encrypt the data and the private key of the same pair to decrypt the data.
    Typically, data key pairs are used when many parties need to encrypt data that only the party that holds the private key can decrypt.

    DECRYPT :
    To decrypt your data, use the private key in the data key pair.
    For the operation to succeed, the public and private keys must be from the same data key pair, and you must use the same encryption algorithm.

SIGN MESSAGES WITH DATA-KEY-PAIR :
----------------------------------
To generate a cryptographic signature for a message, use the private key in the data key pair.
Anyone with the public key can use it to verify that the message was signed with your private key and that it has not changed since it was signed.

If your private key is encrypted, pass the encrypted private key to the Decrypt operation.
AWS KMS uses your CMK to decrypt the data key and then it returns the plaintext private key.
Use the plaintext private key to generate the signature. Then remove the plaintext private key from memory as soon as possible

To sign a message, create a message digest using a cryptographic hash function, such as the dgst command in OpenSSL.
Then, pass your plaintext private key to the signing algorithm. The result is a signature that represents the contents of the message.

VERIFY MESSAGES WITH DATA-KEY PAIR :
-------------------------------------
Anyone who has the public key in your data key pair can use it to verify the signature that you generated with your private key.
Verification confirms that an authorized user signed the message with the specified private key and signing algorithm, and the message hasn't changed since it was signed.

To be successful, the party verifying the signature must generate the same type of digest, use the same algorithm, and use the public key that corresponds to the private key used to sign the message.

ALIASES :
----------
An alias is a friendly name for a CMK. For example, you can refer to a CMK as test-key instead of1234abcd-12ab-34cd-56ef-1234567890ab.
Aliases make it easier to identify a CMK in the AWS Management Console. You can use an alias to identify a CMK in some AWS KMS operations.

CRYPTOGRAPHIC OPERATIONS :
--------------------------
In AWS KMS, cryptographic operations are API operations that use CMKs to protect data.
Because CMKs remain within AWS KMS, you must call AWS KMS to use a CMK in a cryptographic operation.
You cannot perform cryptographic operations in the AWS KMS console. Can only be done in CLI / SDK / POWERSHELL.

    Operation                                CMK_key_type           CMK_key_usage
    ---------------------------------------------------------------------------------------------------------
    ---------------------------------------------------------------------------------------------------------
    Decrypt                                  Any                    ENCRYPT_DECRYPT
    Encrypt                                  Any                    ENCRYPT_DECRYPT
    GenerateDataKey                          Symmetric              ENCRYPT_DECRYPT
    GenerateDataKeyPair                      Symmetric [1]          ENCRYPT_DECRYPT
    GenerateDataKeyPairWithoutPlaintext      Symmetric [1]          ENCRYPT_DECRYPT
    GenerateDataKeyWithoutPlaintext          Symmetric              ENCRYPT_DECRYPT
    GenerateRandom                           N/A                    N/A  --> This operation doesn't use a CMK
    ReEncrypt                                Any                    ENCRYPT_DECRYPT
    Sign                                     Asymmetric             SIGN_VERIFY
    Verify                                   Asymmetric             SIGN_VERIFY

[1] GenerateDataKeyPair and GenerateDataKeyPairWithoutPlaintext generate an asymmetricdata key pair that is protected by a symmetric CMK.

In the AWS KMS console, you can view and filter CMKs by their key ARN, key ID, or alias name, and sort by key ID and alias name.


==============================

AWS SECURITY TOKEN SERVICE [ STS ] : -> Temporary Creds Using ROLES // Also documented in IAM
---------------------------------------
AWS Security Token Service (AWS STS) is a web service that enables you to request temporary, limited-privilege credentials for AWS Identity and Access Management (IAM) users or for users that you authenticate (federated users).
You can use the AWS Security Token Service (AWS STS) to create and provide trusted users with temporary security credentials that can control access to your AWS resources.
Temporary security credentials work almost identically to the long-term access key credentials that your IAM users can use, with the following differences:

1. Temporary security credentials are short-term, as the name implies. They can be configured to last for anywhere from a few minutes to several hours.
   After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them

2. Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when requested.
   When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has permissions to do so.

--> These differences lead to the following advantages for using temporary credentials:

1. You do not have to distribute or embed long-term AWS security credentials with an application.

2. You can provide access to your AWS resources to users without having to define an AWS identity for them.
   Temporary credentials are the basis for roles and identity federation.

3. The temporary security credentials have a limited lifetime, so you do not have to rotate them or explicitly revoke them when they're no longer needed.
   After temporary security credentials expire, they cannot be reused. You can specify how long the credentials are valid, up to a maximum limit.

You can manage your user identities in an external system outside of AWS and grant users who sign in from those systems access to perform AWS tasks and access your AWS resources.
IAM supports two types of identity federation. In both cases, the identities are stored outside of AWS. The distinction is where the external system resides—in your data center or an external third party on the web.

  --> Enterprise identity federation :
      You can authenticate users in your organization's network, and then provide those users access to AWS without creating new AWS identities for them and requiring them to sign in with a separate user name and password.
      This is known as the single sign-on (SSO) approach to temporary access.

  --> Web identity federation :
      You can let users sign in using a well-known third party identity provider such as Login with Amazon, Facebook, Google, or any OpenID Connect (OIDC) 2.0 compatible provider.
      You can exchange the credentials from that provider for temporary permissions to use resources in your AWS account.
      AWS STS web identity federation supports Login with Amazon, Facebook, Google, and any OpenID Connect (OIDC)-compatible identity provider.
