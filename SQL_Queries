RDBMS :
--------
RDBMS stands for Relational Database Management System.
RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.

SQL :
--------
SQL is a standard language for storing, manipulating and retrieving data in databases.
We can use SQL in : MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.
SQL stands for Structured Query Language and it lets you access and manipulate databases
SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987

Primary Key :
Primary key is used to uniquely identify a row in a table. No duplicate values are allowed in a primary key column and they cannot accept NULL values. It is a mandatory field in a table.

Foreign Key :
Foreign keys are used to build a relationship between the tables. A foreign key in a child table is defined as the primary key in the parent table.
A table can have more than one foreign key. It can accept duplicate values and also null values. Foreign keys are optional in a table.


--> SQL keywords are NOT case sensitive: select is the same as SELECT
--> Some database systems require a semicolon at the end of each SQL statement.
--> SELECT           - extracts data from a database
--> UPDATE           - updates data in a database
--> DELETE           - deletes data from a database
--> INSERT INTO      - inserts new data into a database
--> CREATE DATABASE  - creates a new database
--> ALTER DATABASE   - modifies a database
--> CREATE TABLE     - creates a new table
--> ALTER TABLE      - modifies a table
--> DROP TABLE       - deletes a table
--> CREATE INDEX     - creates an index (search key)
--> DROP INDEX       - deletes an index

FIELD  : Every table is broken up into smaller entities called fields. The fields in the Customers table consist of CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country.
         A field is a column in a table that is designed to maintain specific information about every record in the table.

RECORD : A record, also called a row, is each individual entry that exists in a table. For example, there are 91 records in the above Customers table.
         A record is a horizontal entity in a table.


TABLE :
----------
CustomerID     CustomerName          ContactName	       Address	City	                                 PostalCode	                  Country
================================================================================================================================================
1              Alfreds               Futterkiste         Maria Anders	Obere Str. 57	Berlin               12209                       	Germany
2              Ana Trujillo          Ana Trujillo        Avda. de la Constitución 2222	México D.F.	     05021                        Mexico
3              Antonio Moreno      	 Antonio Moreno      Mataderos 2312	México D.F.	                     05023	                      Mexico
4              Around the Horn	     Thomas Hardy	       120 Hanover Sq.	London                         WA1 1DP                    	UK
5              Berglunds snabbköp	   Christina Berglund  Berguvsvägen 8	Luleå	                           S-958 22	                    Sweden
6              Blauer See            Hanna Moos	         Forsterstr. 57	Mannheim	                       68306	                      Germany
7              Blondel père et       Frédérique          Citeaux	24, place Kléber	Strasbourg	         67000                      	France
8              Bólido Comidas      	 Martín Sommer	     C/ Araquil, 67	Madrid                           28023	                      Spain
9              Bon app	             Laurence            Lebihans	12, rue des Bouchers	Marseille	       13008                       	France

ALIAS  :
-------------
While Printing a single column, we can specify the column name to be printed using AS command.
Note: It requires double quotation marks or square brackets if the alias name contains spaces

select initial  AS name from table;
SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers;

QUERIES :
-----------
SELECT * FROM Customers;
SELECT CustomerName, City FROM Customers;
SELECT DISTINCT Country FROM Customers;
SELECT COUNT(DISTINCT Country) FROM Customers;

SELECT * FROM Customers WHERE Country='Mexico';
SELECT * FROM Customers WHERE CustomerID=1;
SELECT * FROM Customers WHERE City IN ('Paris','London');
SELECT * FROM Customers WHERE City LIKE 's%';
SELECT * FROM customers WHERE CustomerID BETWEEN 50 AND 60;

AND - OR - NOT :
--------------------
SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;
SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3
SELECT column1, column2, ... FROM table_name WHERE NOT condition;

SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';
SELECT * FROM Customers WHERE City='Berlin' OR City='München';
SELECT * FROM Customers WHERE NOT Country='Germany';
SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

ORDER BY :
------------------
The ORDER BY keyword is used to sort the result-set in ascending or descending order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;

SELECT * FROM Customers ORDER BY Country;
SELECT * FROM Customers ORDER BY Country DESC;
SELECT * FROM Customers ORDER BY Country, CustomerName; // first orders by Country and then using CustomerName if there are any conflicts .
SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;

INSERT INTO :
-----------------
TYPE 1 :  INSERT INTO table_name (column1, column2, column3, ...)  VALUES (value1, value2, value3, ...);
The first way specifies both the column names and the values to be inserted.
--> INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
--> INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway');  // This will put null in other columns.

TYPE 2 : INSERT INTO table_name VALUES (value1, value2, value3, ...);
If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.

NULL VALUE :
---------------
A field with a NULL value is a field with no value.
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!
It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
We will have to use the IS NULL and IS NOT NULL operators instead.

SELECT column_names FROM table_name WHERE column_name IS NULL;
SELECT column_names FROM table_name WHERE column_name IS NOT NULL;

UPDATE :
------------
The UPDATE statement is used to modify the existing records in a table.
Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement.
The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!
--> UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;

DELETE :
----------
The DELETE statement is used to delete existing records in a table.
Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement.
The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!
--> DELETE FROM table_name WHERE condition;

LIMIT :
---------
The LIMIT clause is used to specify the number of records to return.
The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

ARITHEMATIC OPERATIONS :
----------------------------
The MIN() function returns the smallest value of the selected column.
The MAX() function returns the largest value of the selected column.
The AVG() function returns the average value of a numeric column.
The SUM() function returns the total sum of a numeric column.
The COUNT() function returns the number of rows that matches a specified criterion.

--> SELECT MIN(column_name) FROM table_name WHERE condition;
--> SELECT COUNT(column_name) FROM table_name WHERE condition;

LIKE / NOT LIKE  :
----------------------
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards often used in conjunction with the LIKE operator:
    % - The percent sign represents zero, one, or multiple characters
    _ - The underscore represents a single character

    --> SELECT * FROM Customers WHERE CustomerName LIKE 'a%';

WHERE CustomerName LIKE 'a%'   	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'  	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	  Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	  Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName  LIKE 'a%o'	  Finds any values that start with "a" and ends with "o"

[bsp]% starting with "b", "s", or "p"
[a-c]% starting with "a", "b", or "c"

[!bsp]% NOT starting with "b", "s", or "p"
 --> SELECT * FROM Customers WHERE City LIKE '[!bsp]%';
 --> SELECT * FROM Customers WHERE City NOT LIKE '[bsp]%';


IN / NOT IN :
--------------
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.

SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);
SELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT);

BETWEEN / NOT BETWEEN :
-------------------------
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included.
--> SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;

--> SELECT * FROM Products WHERE Price BETWEEN 10 AND 20 AND CategoryID NOT IN (1,2,3);
--> SELECT * FROM Products WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;
--> SELECT * FROM Products WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;
--> SELECT * FROM Orders   WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;
--> SELECT * FROM Orders   WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================
:::: JOINS ::::
========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

ORDERS TABLE :
-----------------
OrderID	CustomerID	OrderDate
10308	     2      	1996-09-18
10309	     37     	1996-09-19
10310	     77     	1996-09-20

CUSTOMERS TABLE :
--------------------
CustomerID	CustomerName	           ContactName	      Country
    1	       Alfreds Futterkiste    	Maria Anders	    Germany
    2        Ana Trujillo           	Ana              	Mexico
    3	       Antonio Moreno 	        Moreno	          Mexico

Notice that the "CustomerID" column in the "Orders" table refers to the "CustomerID" in the "Customers" table.
The relationship between the two tables above is the "CustomerID" column.


Here are the different types of the JOINs in SQL:  https://www.w3schools.com/sql/sql_join.asp

(INNER) JOIN         : Returns records that have matching values in both tables
LEFT  (OUTER) JOIN   : Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN   : Returns all records from the right table, and the matched records from the left table
FULL  (OUTER) JOIN   : Returns all records when there is a match in either left or right table
