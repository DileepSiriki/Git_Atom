SOURCE : https://docs.docker.com/get-started/ 
WORKSHOP : https://docs.docker.com/get-started/workshop/ 
DOCKER PRACTICE : https://labs.play-with-docker.com/ 
K8 PRACTICE : https://labs.play-with-k8s.com/

DOCKER --> 
=================================================================================
Docker is an open platform for developing, shipping, and running applications. 
Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. 
With Docker, you can manage your infrastructure in the same ways you manage your applications. 
By taking advantage of Docker's methodologies for shipping, testing, and deploying code, you can significantly reduce the delay between writing code and running it in production.
Docker's container-based platform allows for highly portable workloads. Docker containers can run on a developer's local laptop, on physical or virtual machines in a data center, on cloud providers, or in a mixture of environments.
Docker's portability and lightweight nature also make it easy to dynamically manage workloads, scaling up or tearing down applications and services as business needs dictate, in near real time.
Docker is perfect for high density environments and for small and medium deployments where you need to do more with fewer resources.
Docker is written in the Go programming language and takes advantage of several features of the Linux kernel to deliver its functionality. 
Docker uses a technology called namespaces to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container.
These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.


DOCKER PLATFORM -->
=================================================================================
Docker provides the ability to package and run an application in a loosely isolated environment called a container. 
The isolation and security lets you run many containers simultaneously on a given host. 
Containers are lightweight and contain everything needed to run the application, so you don't need to rely on what's installed on the host. 
You can share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.

    Docker provides tooling and a platform to manage the lifecycle of your containers :
        Develop your application and its supporting components using containers.
        The container becomes the unit for distributing and testing your application.
        When you're ready, deploy your application into your production environment, as a container or an orchestrated service. 
        This works the same whether your production environment is a local data center, a cloud provider, or a hybrid of the two.

    Example Scenarios : 
        Your developers write code locally and share their work with their colleagues using Docker containers.
        They use Docker to push their applications into a test environment and run automated and manual tests.
        When developers find bugs, they can fix them in the development environment and redeploy them to the test environment for testing and validation.
        When testing is complete, getting the fix to the customer is as simple as pushing the updated image to the production environment.



ARCHITECTURE -->
=================================================================================
Docker uses a client-server architecture. 
The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. 
The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. 
The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface. 
Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.


    ---------------     ---------------------------------------------------------------         --------------------
         CLIENT                                   DOCKER HOST                                        REGISTRY 
    ---------------     ---------------------------------------------------------------         --------------------

    docker pull                          +------->>--------+------------------------->>---------------> Images
    docker run                           |                 |                                            plugins
    docker build   ----------->     docker daemon -> docker images -> containers                        Extensions
                                                                                             
    ---------------     ---------------------------------------------------------------         --------------------


        DAEMON -> 
        The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. 
        A daemon can also communicate with other daemons to manage Docker services.

        CLIENT ->
        The Docker client (docker) is the primary way that many Docker users interact with Docker. 
        When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. 
        The docker command uses the Docker API. The Docker client can communicate with more than one daemon.

        REGESTRIES ->
        A Docker registry stores Docker images. 
        Docker Hub is a public registry that anyone can use, and Docker looks for images on Docker Hub by default. You can even run your own private registry.
        When you use the docker pull or docker run commands, Docker pulls the required images from your configured registry. 
        When you use the docker push command, Docker pushes your image to your configured registry.

        IMAGES -> 
        An image is a read-only template with instructions for creating a Docker container. 
        Often, an image is based on another image, with some additional customization. 
        EX : You may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.
        You might create your own images or you might only use those created by others and published in a registry. 
        To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it. 
        Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. 
        This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.

        CONTAINERS -> 
        A container is a runnable instance of an image. 
        You can create, start, stop, move, or delete a container using the Docker API or CLI. 
        You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.
        By default, a container is relatively well isolated from other containers and its host machine. 
        You can control how isolated a container's network, storage, or other underlying subsystems are from other containers or from the host machine.
        A container is defined by its image as well as any configuration options you provide to it when you create or start it. 
        When a container is removed, any changes to its state that aren't stored in persistent storage disappear.



EXAMPLE COMMAND --> [[ docker run -i -t ubuntu /bin/bash ]]
=================================================================================
The following command runs an ubuntu container, attaches interactively to your local command-line session, and runs /bin/bash.
When you run this command, the following happens (assuming you are using the default registry configuration):

    - If you don't have the ubuntu image locally, Docker pulls it from your configured registry, as though you had run docker pull ubuntu manually.
    - Docker creates a new container, as though you had run a docker container create command manually.
    - Docker allocates a read-write filesystem to the container, as its final layer. This allows a running container to create or modify files and directories in its local filesystem.
    - Docker creates a network interface to connect the container to the default network, since you didn't specify any networking options. 
    - This includes assigning an IP address to the container. By default, containers can connect to external networks using the host machine's network connection.
    - Docker starts the container and executes /bin/bash. Because the container is running interactively and attached to your terminal (due to the -i and -t flags), you can provide input using your keyboard while Docker logs the output to your terminal.
    - When you run exit to terminate the /bin/bash command, the container stops but isn't removed. You can start it again or remove it.


HANDS-ON -->
=================================================================================
To create a container image for the application and share it on Docker Hub. you will need to do the following:
    - Sign in with your Docker account
    - Create an image repository on Docker Hub
    - Build the container image
    - Push the image to Docker Hub


CONTAINER IMAGES -->
A standardized package that contains everything needed to run an application, including its files, configuration, and dependencies. 
These packages can then be distributed and shared with others.


DOCKER HUB --> 
To share your Docker images, you need a place to store them. 
This is where registries come in. While there are many registries, Docker Hub is the default and go-to registry for images. 
Docker Hub provides both a place for you to store your own images and to find images from others to either run or use as the bases for your own images.


TO-DO -->
    Sign in with your Docker account - https://app.docker.com/
    
    Create an image repository
        Now that you have an account, you can create an image repository. 
        Just as a Git repository holds source code, an image repository stores container images.
        Go to Docker Hub.
        Select Create repository - https://hub.docker.com/repositories/dileep147

    On the Create repository page, enter the following information:
        Repository name - getting-started-todo-app
        Short description - feel free to enter a description if you'd like
        Visibility - select Public to allow others to pull your customized to-do app
        Select Create to create the repository.

        git clone https://github.com/docker/getting-started-todo-app
        cd getting-started-todo-app
        docker build -t <DOCKER_USERNAME>/getting-started-todo-app .
        docker image ls
        docker push <DOCKER_USERNAME>/getting-started-todo-app

    If you're reusing a pre-built image (e.g., pulled from Docker Hub or another registry), you can retag it and push it directly without rebuilding.
        docker pull nginx:latest
        docker tag nginx:latest <DOCKER_USERNAME>/nginx:latest
        docker push <DOCKER_USERNAME>/nginx:latest



SAMPLE COMMANDS -->
=================================================================================
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Category              | Command                                             | Description                                        |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| **Docker Info**       | docker login                                        | Login / Re-authenticate to Docker.                 |
|                       | docker --version                                    | Show Docker version.                               |
|                       | docker version                                      | Show detailed Docker version info.                 |
|                       | docker info                                         | Display system-wide Docker information.            |
|                       | docker system df                                    | Show disk space usage by Docker components.        |
|                       | docker system events                                | Show real-time Docker events.                      |
|                       | docker system prune                                 | Clean up unused containers, images, volumes, etc.  |
|                       | docker stats                                        | Display real-time resource usage statistics.       |
|                       | docker context ls                                   | List available Docker contexts.                    |
|                       | docker context inspect <context>                    | View details of a specific Docker context.         |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+ 
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Images                | docker images                                       | List all Docker images.                            |
|                       | docker images -a                                    | List all images including intermediate layers.     |
|                       | docker pull <image>:<tag>                           | Pull an image from a registry.                     |
|                       | docker pull <image>                                 | Pull an image (latest tag by default).             |
|                       | docker build -t <image_name>:<tag> <path>           | Build an image from a Dockerfile.                  |
|                       | docker rmi <image_id_or_name>                       | Remove a Docker image.                             |
|                       | docker tag <source_image> <target_image>            | Tag an image for pushing to a registry.            |
|                       | docker push <image>:<tag>                           | Push an image to a registry.                       |
|                       | docker save -o <file.tar> <image>:<tag>             | Save an image to a tar archive.                    |
|                       | docker load -i <file.tar>                           | Load an image from a tar archive.                  |
|                       | docker history <image>:<tag>                        | Show the history of an image.                      |
|                       | docker inspect <image>                              | Display detailed information about an image.       |
|                       | docker image prune                                  | Remove unused images.                              |
|                       | docker image ls                                     | List all Docker images (alias for `docker images`).|
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Containers            | docker ps                                           | List running containers.                           |
|                       | docker ps -a                                        | List all containers, including stopped ones.       |
|                       | docker ps -q                                        | List only container IDs.                           |
|                       | docker run -d -p <host_port>:<port> <image>         | Run a container in detached mode with port mapping.|
|                       | docker run --name <name> <image>                    | Run a container and assign it a custom name.       |
|                       | docker stop <container_id_or_name>                  | Stop a running container.                          |
|                       | docker start <container_id_or_name>                 | Start a stopped container.                         |
|                       | docker restart <container_id_or_name>               | Restart a container.                               |
|                       | docker kill <container_id_or_name>                  | Forcefully stop a running container.               |
|                       | docker rm <container_id_or_name>                    | Remove a container.                                |
|                       | docker rm -f <container_id_or_name>                 | Forcefully remove a container.                     |
|                       | docker exec -it <container_id_or_name> <command>    | Run a command in a running container.              |
|                       | docker attach <container_id_or_name>                | Attach to a running container's terminal.          |
|                       | docker logs <container_id_or_name>                  | View container logs.                               |
|                       | docker logs -f <container_id_or_name>               | Follow real-time logs of a container.              |
|                       | docker inspect <container_id_or_name>               | Display detailed information about a container.    |
|                       | docker container prune                              | Remove all stopped containers.                     |
|                       | docker commit <container_id_or_name> <image_name>   | Save a container's state as a new image.           |
|                       | docker stats                                        | Show real-time resource usage for containers.      |
|                       | docker top <container_id_or_name>                   | Display running processes in a container.          |
|                       | docker rename <old_name> <new_name>                 | Rename a container.                                |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Volumes               | docker volume ls                                    | List all Docker volumes.                           |
|                       | docker volume create <name>                         | Create a new Docker volume.                        |
|                       | docker volume rm <name>                             | Remove a specific Docker volume.                   |
|                       | docker volume prune                                 | Remove all unused Docker volumes.                  |
|                       | docker volume inspect <name>                        | Display detailed information about a volume.       |
|                       | docker volume ls -f dangling=true                   | List only unused (dangling) volumes.               |
|                       | docker run -v <volume>:/path <image>                | Mount a volume in a container.                     |
|                       | docker volume create --driver <driver_name> <name>  | Create a volume with a specific driver.            |
|                       | docker volume create --label key=value <name>       | Create a volume with a specific label.             |
|                       | docker volume rm $(docker volume ls -q -f dangling=true)| Remove all dangling volumes.                   |
|                       | docker system df -v                                 | Show disk space usage for volumes.                 |
|                       | docker-compose up                                   | Automatically creates and attaches volumes.        |
|                       | docker-compose down -v                              | Remove containers, networks, and volumes.          |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Networks              | docker network ls                                   | List all Docker networks.                          |
|                       | docker network inspect <network_name_or_id>         | Display detailed information about a network.      |
|                       | docker network create <network_name>                | Create a new Docker network.                       |
|                       | docker network rm <network_name_or_id>              | Remove a specific Docker network.                  |
|                       | docker network prune                                | Remove all unused Docker networks.                 |
|                       | docker run --network <network_name> <image>         | Connect a container to a specific network.         |
|                       | docker network connect <network_name> <container>   | Connect an existing container to a network.        |
|                       | docker network disconnect <network_name> <container>| Disconnect a container from a network.             |
|                       | docker network create --driver <driver_name> <name> | Create a network with a specific driver.           |
|                       | docker network create --subnet=<CIDR> <name>        | Create a network with a custom subnet.             |
|                       | docker network create --attachable <name>           | Create a network that containers can join.         |
|                       | docker system df                                    | Display disk usage, including networks.            |
|                       | docker-compose up                                   | Automatically creates and attaches networks.       |
|                       | docker-compose down                                 | Remove containers, networks, and volumes.          |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
+-----------------------+-----------------------------------------------------+----------------------------------------------------+
| Registry              | docker login <registry_url>                         | Log in to a Docker registry.                       |
|                       | docker logout <registry_url>                        | Log out from a Docker registry.                    |
|                       | docker tag <image>:<tag> <registry_url>/<image>:<tag>| Tag an image for pushing to a specific registry.  |
|                       | docker push <registry_url>/<image>:<tag>            | Push an image to a registry.                       |
|                       | docker pull <registry_url>/<image>:<tag>            | Pull an image from a registry.                     |
|                       | docker search <image_name>                          | Search for an image on Docker Hub.                 |
|                       | docker save -o <file.tar> <image>:<tag>             | Save an image locally for manual registry upload.  |
|                       | docker load -i <file.tar>                           | Load a saved image into Docker.                    |
|                       | docker image rm <registry_url>/<image>:<tag>        | Remove an image from the local cache.              |
|                       | docker inspect <registry_url>/<image>:<tag>         | Inspect details of an image from a registry.       |
|                       | docker-compose push                                 | Push all images defined in a `docker-compose` file.|
|                       | docker-compose pull                                 | Pull all images defined in a `docker-compose` file.|
|                       | docker registry ls                                  | List all available Docker registries (custom setup)|
|                       | docker registry prune                               | Clean up unused images on a private registry.      |
|                       | docker run -d -p 5000:5000 --name registry registry | Run a local Docker registry.                       |
|                       | docker push localhost:5000/<image>:<tag>            | Push an image to a local registry.                 |
|                       | docker pull localhost:5000/<image>:<tag>            | Pull an image from a local registry.               |
+-----------------------+-----------------------------------------------------+----------------------------------------------------+

+-----------------------+-----------------------------------------------+-----------------------------------------+
|       Feature         |                  docker run                   |               docker exec               |
+-----------------------+-----------------------------------------------+-----------------------------------------+
| Creates a container?  | Yes, starts a new container.                  | No, interacts with an existing one.     |
| Container state       | Starts a new container.                       | Requires an already running container.  |
| Primary use           | Initializing and starting new containers.     | Executing commands in running containers|
| Example               | docker run -it ubuntu bash                    | docker exec -it my_container bash       |
| Resource configuration| Can configure volumes, ports, environment     | No additional resource configuration.   |
+-----------------------+-----------------------------------------------+-----------------------------------------+

